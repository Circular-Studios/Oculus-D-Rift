/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module ovr;

static import ovr_im;
static import core.stdc.config;

static import std.conv;
static import std.string;


class ovrVector2i {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrVector2i obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrVector2i(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void x(int value) @property {
    ovr_im.ovrVector2i_x_set(cast(void*)swigCPtr, value);
  }

  public int x() @property const {
    auto ret = ovr_im.ovrVector2i_x_get(cast(void*)swigCPtr);
    return ret;
  }

  public void y(int value) @property {
    ovr_im.ovrVector2i_y_set(cast(void*)swigCPtr, value);
  }

  public int y() @property const {
    auto ret = ovr_im.ovrVector2i_y_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrVector2i(), true);
  }
}

class ovrSizei {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrSizei obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrSizei(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void w(int value) @property {
    ovr_im.ovrSizei_w_set(cast(void*)swigCPtr, value);
  }

  public int w() @property const {
    auto ret = ovr_im.ovrSizei_w_get(cast(void*)swigCPtr);
    return ret;
  }

  public void h(int value) @property {
    ovr_im.ovrSizei_h_set(cast(void*)swigCPtr, value);
  }

  public int h() @property const {
    auto ret = ovr_im.ovrSizei_h_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrSizei(), true);
  }
}

class ovrRecti {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrRecti obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrRecti(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Pos(ovrVector2i value) @property {
    ovr_im.ovrRecti_Pos_set(cast(void*)swigCPtr, ovrVector2i.swigGetCPtr(value));
  }

  public ovrVector2i Pos() @property const {
    void* cPtr = ovr_im.ovrRecti_Pos_get(cast(void*)swigCPtr);
    ovrVector2i ret = (cPtr is null) ? null : new ovrVector2i(cPtr, false);
    return ret;
  }

  public void Size(ovrSizei value) @property {
    ovr_im.ovrRecti_Size_set(cast(void*)swigCPtr, ovrSizei.swigGetCPtr(value));
  }

  public ovrSizei Size() @property const {
    void* cPtr = ovr_im.ovrRecti_Size_get(cast(void*)swigCPtr);
    ovrSizei ret = (cPtr is null) ? null : new ovrSizei(cPtr, false);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrRecti(), true);
  }
}

class ovrQuatf {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrQuatf obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrQuatf(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void x(float value) @property {
    ovr_im.ovrQuatf_x_set(cast(void*)swigCPtr, value);
  }

  public float x() @property const {
    auto ret = ovr_im.ovrQuatf_x_get(cast(void*)swigCPtr);
    return ret;
  }

  public void y(float value) @property {
    ovr_im.ovrQuatf_y_set(cast(void*)swigCPtr, value);
  }

  public float y() @property const {
    auto ret = ovr_im.ovrQuatf_y_get(cast(void*)swigCPtr);
    return ret;
  }

  public void z(float value) @property {
    ovr_im.ovrQuatf_z_set(cast(void*)swigCPtr, value);
  }

  public float z() @property const {
    auto ret = ovr_im.ovrQuatf_z_get(cast(void*)swigCPtr);
    return ret;
  }

  public void w(float value) @property {
    ovr_im.ovrQuatf_w_set(cast(void*)swigCPtr, value);
  }

  public float w() @property const {
    auto ret = ovr_im.ovrQuatf_w_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrQuatf(), true);
  }
}

class ovrVector2f {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrVector2f obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrVector2f(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void x(float value) @property {
    ovr_im.ovrVector2f_x_set(cast(void*)swigCPtr, value);
  }

  public float x() @property const {
    auto ret = ovr_im.ovrVector2f_x_get(cast(void*)swigCPtr);
    return ret;
  }

  public void y(float value) @property {
    ovr_im.ovrVector2f_y_set(cast(void*)swigCPtr, value);
  }

  public float y() @property const {
    auto ret = ovr_im.ovrVector2f_y_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrVector2f(), true);
  }
}

class ovrVector3f {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrVector3f obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrVector3f(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void x(float value) @property {
    ovr_im.ovrVector3f_x_set(cast(void*)swigCPtr, value);
  }

  public float x() @property const {
    auto ret = ovr_im.ovrVector3f_x_get(cast(void*)swigCPtr);
    return ret;
  }

  public void y(float value) @property {
    ovr_im.ovrVector3f_y_set(cast(void*)swigCPtr, value);
  }

  public float y() @property const {
    auto ret = ovr_im.ovrVector3f_y_get(cast(void*)swigCPtr);
    return ret;
  }

  public void z(float value) @property {
    ovr_im.ovrVector3f_z_set(cast(void*)swigCPtr, value);
  }

  public float z() @property const {
    auto ret = ovr_im.ovrVector3f_z_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrVector3f(), true);
  }
}

class ovrMatrix4f {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrMatrix4f obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrMatrix4f(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void M(SWIGTYPE_p_a_4__float value) @property {
    ovr_im.ovrMatrix4f_M_set(cast(void*)swigCPtr, SWIGTYPE_p_a_4__float.swigGetCPtr(value));
  }

  public SWIGTYPE_p_a_4__float M() @property const {
    void* cPtr = ovr_im.ovrMatrix4f_M_get(cast(void*)swigCPtr);
    SWIGTYPE_p_a_4__float ret = (cPtr is null) ? null : new SWIGTYPE_p_a_4__float(cPtr, false);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrMatrix4f(), true);
  }
}

class ovrPosef {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrPosef obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrPosef(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Orientation(ovrQuatf value) @property {
    ovr_im.ovrPosef_Orientation_set(cast(void*)swigCPtr, ovrQuatf.swigGetCPtr(value));
  }

  public ovrQuatf Orientation() @property const {
    void* cPtr = ovr_im.ovrPosef_Orientation_get(cast(void*)swigCPtr);
    ovrQuatf ret = (cPtr is null) ? null : new ovrQuatf(cPtr, false);
    return ret;
  }

  public void Position(ovrVector3f value) @property {
    ovr_im.ovrPosef_Position_set(cast(void*)swigCPtr, ovrVector3f.swigGetCPtr(value));
  }

  public ovrVector3f Position() @property const {
    void* cPtr = ovr_im.ovrPosef_Position_get(cast(void*)swigCPtr);
    ovrVector3f ret = (cPtr is null) ? null : new ovrVector3f(cPtr, false);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrPosef(), true);
  }
}

class ovrPoseStatef {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrPoseStatef obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrPoseStatef(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Pose(ovrPosef value) @property {
    ovr_im.ovrPoseStatef_Pose_set(cast(void*)swigCPtr, ovrPosef.swigGetCPtr(value));
  }

  public ovrPosef Pose() @property const {
    void* cPtr = ovr_im.ovrPoseStatef_Pose_get(cast(void*)swigCPtr);
    ovrPosef ret = (cPtr is null) ? null : new ovrPosef(cPtr, false);
    return ret;
  }

  public void AngularVelocity(ovrVector3f value) @property {
    ovr_im.ovrPoseStatef_AngularVelocity_set(cast(void*)swigCPtr, ovrVector3f.swigGetCPtr(value));
  }

  public ovrVector3f AngularVelocity() @property const {
    void* cPtr = ovr_im.ovrPoseStatef_AngularVelocity_get(cast(void*)swigCPtr);
    ovrVector3f ret = (cPtr is null) ? null : new ovrVector3f(cPtr, false);
    return ret;
  }

  public void LinearVelocity(ovrVector3f value) @property {
    ovr_im.ovrPoseStatef_LinearVelocity_set(cast(void*)swigCPtr, ovrVector3f.swigGetCPtr(value));
  }

  public ovrVector3f LinearVelocity() @property const {
    void* cPtr = ovr_im.ovrPoseStatef_LinearVelocity_get(cast(void*)swigCPtr);
    ovrVector3f ret = (cPtr is null) ? null : new ovrVector3f(cPtr, false);
    return ret;
  }

  public void AngularAcceleration(ovrVector3f value) @property {
    ovr_im.ovrPoseStatef_AngularAcceleration_set(cast(void*)swigCPtr, ovrVector3f.swigGetCPtr(value));
  }

  public ovrVector3f AngularAcceleration() @property const {
    void* cPtr = ovr_im.ovrPoseStatef_AngularAcceleration_get(cast(void*)swigCPtr);
    ovrVector3f ret = (cPtr is null) ? null : new ovrVector3f(cPtr, false);
    return ret;
  }

  public void LinearAcceleration(ovrVector3f value) @property {
    ovr_im.ovrPoseStatef_LinearAcceleration_set(cast(void*)swigCPtr, ovrVector3f.swigGetCPtr(value));
  }

  public ovrVector3f LinearAcceleration() @property const {
    void* cPtr = ovr_im.ovrPoseStatef_LinearAcceleration_get(cast(void*)swigCPtr);
    ovrVector3f ret = (cPtr is null) ? null : new ovrVector3f(cPtr, false);
    return ret;
  }

  public void TimeInSeconds(double value) @property {
    ovr_im.ovrPoseStatef_TimeInSeconds_set(cast(void*)swigCPtr, value);
  }

  public double TimeInSeconds() @property const {
    auto ret = ovr_im.ovrPoseStatef_TimeInSeconds_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrPoseStatef(), true);
  }
}

class ovrFovPort {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrFovPort obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrFovPort(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void UpTan(float value) @property {
    ovr_im.ovrFovPort_UpTan_set(cast(void*)swigCPtr, value);
  }

  public float UpTan() @property const {
    auto ret = ovr_im.ovrFovPort_UpTan_get(cast(void*)swigCPtr);
    return ret;
  }

  public void DownTan(float value) @property {
    ovr_im.ovrFovPort_DownTan_set(cast(void*)swigCPtr, value);
  }

  public float DownTan() @property const {
    auto ret = ovr_im.ovrFovPort_DownTan_get(cast(void*)swigCPtr);
    return ret;
  }

  public void LeftTan(float value) @property {
    ovr_im.ovrFovPort_LeftTan_set(cast(void*)swigCPtr, value);
  }

  public float LeftTan() @property const {
    auto ret = ovr_im.ovrFovPort_LeftTan_get(cast(void*)swigCPtr);
    return ret;
  }

  public void RightTan(float value) @property {
    ovr_im.ovrFovPort_RightTan_set(cast(void*)swigCPtr, value);
  }

  public float RightTan() @property const {
    auto ret = ovr_im.ovrFovPort_RightTan_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrFovPort(), true);
  }
}

enum ovrHmdType {
  ovrHmd_None = 0,
  ovrHmd_DK1 = 3,
  ovrHmd_DKHD = 4,
  ovrHmd_CrystalCoveProto = 5,
  ovrHmd_DK2 = 6,
  ovrHmd_Other
}

enum ovrHmdCapBits {
  ovrHmdCap_Present = 0x0001,
  ovrHmdCap_Available = 0x0002,
  ovrHmdCap_Orientation = 0x0010,
  ovrHmdCap_YawCorrection = 0x0020,
  ovrHmdCap_Position = 0x0040,
  ovrHmdCap_LowPersistence = 0x0080,
  ovrHmdCap_LatencyTest = 0x0100,
  ovrHmdCap_DynamicPrediction = 0x0200,
  ovrHmdCap_NoVSync = 0x1000
}

enum ovrDistortionCaps {
  ovrDistortion_Chromatic = 0x01,
  ovrDistortion_TimeWarp = 0x02,
  ovrDistortion_Vignette = 0x08
}

enum ovrEyeType {
  ovrEye_Left = 0,
  ovrEye_Right = 1,
  ovrEye_Count = 2
}

class ovrHmdDesc {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrHmdDesc obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrHmdDesc(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Handle(SWIGTYPE_p_ovrHmdStruct value) @property {
    ovr_im.ovrHmdDesc_Handle_set(cast(void*)swigCPtr, SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(value));
  }

  public SWIGTYPE_p_ovrHmdStruct Handle() @property const {
    void* cPtr = ovr_im.ovrHmdDesc_Handle_get(cast(void*)swigCPtr);
    SWIGTYPE_p_ovrHmdStruct ret = (cPtr is null) ? null : new SWIGTYPE_p_ovrHmdStruct(cPtr, false);
    return ret;
  }

  public void Type(ovrHmdType value) @property {
    ovr_im.ovrHmdDesc_Type_set(cast(void*)swigCPtr, cast(int)value);
  }

  public ovrHmdType Type() @property const {
    ovrHmdType ret = cast(ovrHmdType)ovr_im.ovrHmdDesc_Type_get(cast(void*)swigCPtr);
    return ret;
  }

  public void ProductName(string value) @property {
    ovr_im.ovrHmdDesc_ProductName_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string ProductName() @property const {
    string ret = std.conv.to!string(ovr_im.ovrHmdDesc_ProductName_get(cast(void*)swigCPtr));
    return ret;
  }

  public void Manufacturer(string value) @property {
    ovr_im.ovrHmdDesc_Manufacturer_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string Manufacturer() @property const {
    string ret = std.conv.to!string(ovr_im.ovrHmdDesc_Manufacturer_get(cast(void*)swigCPtr));
    return ret;
  }

  public void Caps(uint value) @property {
    ovr_im.ovrHmdDesc_Caps_set(cast(void*)swigCPtr, value);
  }

  public uint Caps() @property const {
    auto ret = ovr_im.ovrHmdDesc_Caps_get(cast(void*)swigCPtr);
    return ret;
  }

  public void DistortionCaps(uint value) @property {
    ovr_im.ovrHmdDesc_DistortionCaps_set(cast(void*)swigCPtr, value);
  }

  public uint DistortionCaps() @property const {
    auto ret = ovr_im.ovrHmdDesc_DistortionCaps_get(cast(void*)swigCPtr);
    return ret;
  }

  public void Resolution(ovrSizei value) @property {
    ovr_im.ovrHmdDesc_Resolution_set(cast(void*)swigCPtr, ovrSizei.swigGetCPtr(value));
  }

  public ovrSizei Resolution() @property const {
    void* cPtr = ovr_im.ovrHmdDesc_Resolution_get(cast(void*)swigCPtr);
    ovrSizei ret = (cPtr is null) ? null : new ovrSizei(cPtr, false);
    return ret;
  }

  public void WindowsPos(ovrVector2i value) @property {
    ovr_im.ovrHmdDesc_WindowsPos_set(cast(void*)swigCPtr, ovrVector2i.swigGetCPtr(value));
  }

  public ovrVector2i WindowsPos() @property const {
    void* cPtr = ovr_im.ovrHmdDesc_WindowsPos_get(cast(void*)swigCPtr);
    ovrVector2i ret = (cPtr is null) ? null : new ovrVector2i(cPtr, false);
    return ret;
  }

  public void DefaultEyeFov(ovrFovPort value) @property {
    ovr_im.ovrHmdDesc_DefaultEyeFov_set(cast(void*)swigCPtr, ovrFovPort.swigGetCPtr(value));
  }

  public ovrFovPort DefaultEyeFov() @property const {
    void* cPtr = ovr_im.ovrHmdDesc_DefaultEyeFov_get(cast(void*)swigCPtr);
    ovrFovPort ret = (cPtr is null) ? null : new ovrFovPort(cPtr, false);
    return ret;
  }

  public void MaxEyeFov(ovrFovPort value) @property {
    ovr_im.ovrHmdDesc_MaxEyeFov_set(cast(void*)swigCPtr, ovrFovPort.swigGetCPtr(value));
  }

  public ovrFovPort MaxEyeFov() @property const {
    void* cPtr = ovr_im.ovrHmdDesc_MaxEyeFov_get(cast(void*)swigCPtr);
    ovrFovPort ret = (cPtr is null) ? null : new ovrFovPort(cPtr, false);
    return ret;
  }

  public void EyeRenderOrder(SWIGTYPE_p_ovrEyeType value) @property {
    ovr_im.ovrHmdDesc_EyeRenderOrder_set(cast(void*)swigCPtr, SWIGTYPE_p_ovrEyeType.swigGetCPtr(value));
  }

  public SWIGTYPE_p_ovrEyeType EyeRenderOrder() @property const {
    void* cPtr = ovr_im.ovrHmdDesc_EyeRenderOrder_get(cast(void*)swigCPtr);
    SWIGTYPE_p_ovrEyeType ret = (cPtr is null) ? null : new SWIGTYPE_p_ovrEyeType(cPtr, false);
    return ret;
  }

  public void DisplayDeviceName(string value) @property {
    ovr_im.ovrHmdDesc_DisplayDeviceName_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string DisplayDeviceName() @property const {
    string ret = std.conv.to!string(ovr_im.ovrHmdDesc_DisplayDeviceName_get(cast(void*)swigCPtr));
    return ret;
  }

  public void DisplayId(core.stdc.config.c_long value) @property {
    ovr_im.ovrHmdDesc_DisplayId_set(cast(void*)swigCPtr, value);
  }

  public core.stdc.config.c_long DisplayId() @property const {
    auto ret = ovr_im.ovrHmdDesc_DisplayId_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrHmdDesc(), true);
  }
}

enum ovrStatusBits {
  ovrStatus_OrientationTracked = 0x0001,
  ovrStatus_PositionTracked = 0x0002,
  ovrStatus_PositionConnected = 0x0020,
  ovrStatus_HmdConnected = 0x0080
}

class ovrSensorState {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrSensorState obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrSensorState(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Predicted(ovrPoseStatef value) @property {
    ovr_im.ovrSensorState_Predicted_set(cast(void*)swigCPtr, ovrPoseStatef.swigGetCPtr(value));
  }

  public ovrPoseStatef Predicted() @property const {
    void* cPtr = ovr_im.ovrSensorState_Predicted_get(cast(void*)swigCPtr);
    ovrPoseStatef ret = (cPtr is null) ? null : new ovrPoseStatef(cPtr, false);
    return ret;
  }

  public void Recorded(ovrPoseStatef value) @property {
    ovr_im.ovrSensorState_Recorded_set(cast(void*)swigCPtr, ovrPoseStatef.swigGetCPtr(value));
  }

  public ovrPoseStatef Recorded() @property const {
    void* cPtr = ovr_im.ovrSensorState_Recorded_get(cast(void*)swigCPtr);
    ovrPoseStatef ret = (cPtr is null) ? null : new ovrPoseStatef(cPtr, false);
    return ret;
  }

  public void Temperature(float value) @property {
    ovr_im.ovrSensorState_Temperature_set(cast(void*)swigCPtr, value);
  }

  public float Temperature() @property const {
    auto ret = ovr_im.ovrSensorState_Temperature_get(cast(void*)swigCPtr);
    return ret;
  }

  public void StatusFlags(uint value) @property {
    ovr_im.ovrSensorState_StatusFlags_set(cast(void*)swigCPtr, value);
  }

  public uint StatusFlags() @property const {
    auto ret = ovr_im.ovrSensorState_StatusFlags_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrSensorState(), true);
  }
}

class ovrSensorDesc {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrSensorDesc obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrSensorDesc(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void VendorId(short value) @property {
    ovr_im.ovrSensorDesc_VendorId_set(cast(void*)swigCPtr, value);
  }

  public short VendorId() @property const {
    auto ret = ovr_im.ovrSensorDesc_VendorId_get(cast(void*)swigCPtr);
    return ret;
  }

  public void ProductId(short value) @property {
    ovr_im.ovrSensorDesc_ProductId_set(cast(void*)swigCPtr, value);
  }

  public short ProductId() @property const {
    auto ret = ovr_im.ovrSensorDesc_ProductId_get(cast(void*)swigCPtr);
    return ret;
  }

  public void SerialNumber(string value) @property {
    ovr_im.ovrSensorDesc_SerialNumber_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string SerialNumber() @property const {
    string ret = std.conv.to!string(ovr_im.ovrSensorDesc_SerialNumber_get(cast(void*)swigCPtr));
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrSensorDesc(), true);
  }
}

class ovrFrameTiming {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrFrameTiming obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrFrameTiming(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void DeltaSeconds(float value) @property {
    ovr_im.ovrFrameTiming_DeltaSeconds_set(cast(void*)swigCPtr, value);
  }

  public float DeltaSeconds() @property const {
    auto ret = ovr_im.ovrFrameTiming_DeltaSeconds_get(cast(void*)swigCPtr);
    return ret;
  }

  public void ThisFrameSeconds(double value) @property {
    ovr_im.ovrFrameTiming_ThisFrameSeconds_set(cast(void*)swigCPtr, value);
  }

  public double ThisFrameSeconds() @property const {
    auto ret = ovr_im.ovrFrameTiming_ThisFrameSeconds_get(cast(void*)swigCPtr);
    return ret;
  }

  public void TimewarpPointSeconds(double value) @property {
    ovr_im.ovrFrameTiming_TimewarpPointSeconds_set(cast(void*)swigCPtr, value);
  }

  public double TimewarpPointSeconds() @property const {
    auto ret = ovr_im.ovrFrameTiming_TimewarpPointSeconds_get(cast(void*)swigCPtr);
    return ret;
  }

  public void NextFrameSeconds(double value) @property {
    ovr_im.ovrFrameTiming_NextFrameSeconds_set(cast(void*)swigCPtr, value);
  }

  public double NextFrameSeconds() @property const {
    auto ret = ovr_im.ovrFrameTiming_NextFrameSeconds_get(cast(void*)swigCPtr);
    return ret;
  }

  public void ScanoutMidpointSeconds(double value) @property {
    ovr_im.ovrFrameTiming_ScanoutMidpointSeconds_set(cast(void*)swigCPtr, value);
  }

  public double ScanoutMidpointSeconds() @property const {
    auto ret = ovr_im.ovrFrameTiming_ScanoutMidpointSeconds_get(cast(void*)swigCPtr);
    return ret;
  }

  public void EyeScanoutSeconds(SWIGTYPE_p_double value) @property {
    ovr_im.ovrFrameTiming_EyeScanoutSeconds_set(cast(void*)swigCPtr, SWIGTYPE_p_double.swigGetCPtr(value));
  }

  public SWIGTYPE_p_double EyeScanoutSeconds() @property const {
    void* cPtr = ovr_im.ovrFrameTiming_EyeScanoutSeconds_get(cast(void*)swigCPtr);
    SWIGTYPE_p_double ret = (cPtr is null) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrFrameTiming(), true);
  }
}

class ovrEyeDesc {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrEyeDesc obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrEyeDesc(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Eye(ovrEyeType value) @property {
    ovr_im.ovrEyeDesc_Eye_set(cast(void*)swigCPtr, cast(int)value);
  }

  public ovrEyeType Eye() @property const {
    ovrEyeType ret = cast(ovrEyeType)ovr_im.ovrEyeDesc_Eye_get(cast(void*)swigCPtr);
    return ret;
  }

  public void TextureSize(ovrSizei value) @property {
    ovr_im.ovrEyeDesc_TextureSize_set(cast(void*)swigCPtr, ovrSizei.swigGetCPtr(value));
  }

  public ovrSizei TextureSize() @property const {
    void* cPtr = ovr_im.ovrEyeDesc_TextureSize_get(cast(void*)swigCPtr);
    ovrSizei ret = (cPtr is null) ? null : new ovrSizei(cPtr, false);
    return ret;
  }

  public void RenderViewport(ovrRecti value) @property {
    ovr_im.ovrEyeDesc_RenderViewport_set(cast(void*)swigCPtr, ovrRecti.swigGetCPtr(value));
  }

  public ovrRecti RenderViewport() @property const {
    void* cPtr = ovr_im.ovrEyeDesc_RenderViewport_get(cast(void*)swigCPtr);
    ovrRecti ret = (cPtr is null) ? null : new ovrRecti(cPtr, false);
    return ret;
  }

  public void Fov(ovrFovPort value) @property {
    ovr_im.ovrEyeDesc_Fov_set(cast(void*)swigCPtr, ovrFovPort.swigGetCPtr(value));
  }

  public ovrFovPort Fov() @property const {
    void* cPtr = ovr_im.ovrEyeDesc_Fov_get(cast(void*)swigCPtr);
    ovrFovPort ret = (cPtr is null) ? null : new ovrFovPort(cPtr, false);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrEyeDesc(), true);
  }
}

class ovrEyeRenderDesc {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrEyeRenderDesc obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrEyeRenderDesc(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Desc(ovrEyeDesc value) @property {
    ovr_im.ovrEyeRenderDesc_Desc_set(cast(void*)swigCPtr, ovrEyeDesc.swigGetCPtr(value));
  }

  public ovrEyeDesc Desc() @property const {
    void* cPtr = ovr_im.ovrEyeRenderDesc_Desc_get(cast(void*)swigCPtr);
    ovrEyeDesc ret = (cPtr is null) ? null : new ovrEyeDesc(cPtr, false);
    return ret;
  }

  public void DistortedViewport(ovrRecti value) @property {
    ovr_im.ovrEyeRenderDesc_DistortedViewport_set(cast(void*)swigCPtr, ovrRecti.swigGetCPtr(value));
  }

  public ovrRecti DistortedViewport() @property const {
    void* cPtr = ovr_im.ovrEyeRenderDesc_DistortedViewport_get(cast(void*)swigCPtr);
    ovrRecti ret = (cPtr is null) ? null : new ovrRecti(cPtr, false);
    return ret;
  }

  public void PixelsPerTanAngleAtCenter(ovrVector2f value) @property {
    ovr_im.ovrEyeRenderDesc_PixelsPerTanAngleAtCenter_set(cast(void*)swigCPtr, ovrVector2f.swigGetCPtr(value));
  }

  public ovrVector2f PixelsPerTanAngleAtCenter() @property const {
    void* cPtr = ovr_im.ovrEyeRenderDesc_PixelsPerTanAngleAtCenter_get(cast(void*)swigCPtr);
    ovrVector2f ret = (cPtr is null) ? null : new ovrVector2f(cPtr, false);
    return ret;
  }

  public void ViewAdjust(ovrVector3f value) @property {
    ovr_im.ovrEyeRenderDesc_ViewAdjust_set(cast(void*)swigCPtr, ovrVector3f.swigGetCPtr(value));
  }

  public ovrVector3f ViewAdjust() @property const {
    void* cPtr = ovr_im.ovrEyeRenderDesc_ViewAdjust_get(cast(void*)swigCPtr);
    ovrVector3f ret = (cPtr is null) ? null : new ovrVector3f(cPtr, false);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrEyeRenderDesc(), true);
  }
}

enum ovrRenderAPIType {
  ovrRenderAPI_None,
  ovrRenderAPI_OpenGL,
  ovrRenderAPI_Android_GLES,
  ovrRenderAPI_D3D9,
  ovrRenderAPI_D3D10,
  ovrRenderAPI_D3D11,
  ovrRenderAPI_Count
}

class ovrRenderAPIConfigHeader {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrRenderAPIConfigHeader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrRenderAPIConfigHeader(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void API(ovrRenderAPIType value) @property {
    ovr_im.ovrRenderAPIConfigHeader_API_set(cast(void*)swigCPtr, cast(int)value);
  }

  public ovrRenderAPIType API() @property const {
    ovrRenderAPIType ret = cast(ovrRenderAPIType)ovr_im.ovrRenderAPIConfigHeader_API_get(cast(void*)swigCPtr);
    return ret;
  }

  public void RTSize(ovrSizei value) @property {
    ovr_im.ovrRenderAPIConfigHeader_RTSize_set(cast(void*)swigCPtr, ovrSizei.swigGetCPtr(value));
  }

  public ovrSizei RTSize() @property const {
    void* cPtr = ovr_im.ovrRenderAPIConfigHeader_RTSize_get(cast(void*)swigCPtr);
    ovrSizei ret = (cPtr is null) ? null : new ovrSizei(cPtr, false);
    return ret;
  }

  public void Multisample(int value) @property {
    ovr_im.ovrRenderAPIConfigHeader_Multisample_set(cast(void*)swigCPtr, value);
  }

  public int Multisample() @property const {
    auto ret = ovr_im.ovrRenderAPIConfigHeader_Multisample_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrRenderAPIConfigHeader(), true);
  }
}

class ovrRenderAPIConfig {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrRenderAPIConfig obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrRenderAPIConfig(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Header(ovrRenderAPIConfigHeader value) @property {
    ovr_im.ovrRenderAPIConfig_Header_set(cast(void*)swigCPtr, ovrRenderAPIConfigHeader.swigGetCPtr(value));
  }

  public ovrRenderAPIConfigHeader Header() @property const {
    void* cPtr = ovr_im.ovrRenderAPIConfig_Header_get(cast(void*)swigCPtr);
    ovrRenderAPIConfigHeader ret = (cPtr is null) ? null : new ovrRenderAPIConfigHeader(cPtr, false);
    return ret;
  }

  public void PlatformData(SWIGTYPE_p_uintptr_t value) @property {
    ovr_im.ovrRenderAPIConfig_PlatformData_set(cast(void*)swigCPtr, SWIGTYPE_p_uintptr_t.swigGetCPtr(value));
  }

  public SWIGTYPE_p_uintptr_t PlatformData() @property const {
    void* cPtr = ovr_im.ovrRenderAPIConfig_PlatformData_get(cast(void*)swigCPtr);
    SWIGTYPE_p_uintptr_t ret = (cPtr is null) ? null : new SWIGTYPE_p_uintptr_t(cPtr, false);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrRenderAPIConfig(), true);
  }
}

class ovrTextureHeader {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrTextureHeader obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrTextureHeader(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void API(ovrRenderAPIType value) @property {
    ovr_im.ovrTextureHeader_API_set(cast(void*)swigCPtr, cast(int)value);
  }

  public ovrRenderAPIType API() @property const {
    ovrRenderAPIType ret = cast(ovrRenderAPIType)ovr_im.ovrTextureHeader_API_get(cast(void*)swigCPtr);
    return ret;
  }

  public void TextureSize(ovrSizei value) @property {
    ovr_im.ovrTextureHeader_TextureSize_set(cast(void*)swigCPtr, ovrSizei.swigGetCPtr(value));
  }

  public ovrSizei TextureSize() @property const {
    void* cPtr = ovr_im.ovrTextureHeader_TextureSize_get(cast(void*)swigCPtr);
    ovrSizei ret = (cPtr is null) ? null : new ovrSizei(cPtr, false);
    return ret;
  }

  public void RenderViewport(ovrRecti value) @property {
    ovr_im.ovrTextureHeader_RenderViewport_set(cast(void*)swigCPtr, ovrRecti.swigGetCPtr(value));
  }

  public ovrRecti RenderViewport() @property const {
    void* cPtr = ovr_im.ovrTextureHeader_RenderViewport_get(cast(void*)swigCPtr);
    ovrRecti ret = (cPtr is null) ? null : new ovrRecti(cPtr, false);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrTextureHeader(), true);
  }
}

class ovrTexture {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrTexture obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrTexture(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Header(ovrTextureHeader value) @property {
    ovr_im.ovrTexture_Header_set(cast(void*)swigCPtr, ovrTextureHeader.swigGetCPtr(value));
  }

  public ovrTextureHeader Header() @property const {
    void* cPtr = ovr_im.ovrTexture_Header_get(cast(void*)swigCPtr);
    ovrTextureHeader ret = (cPtr is null) ? null : new ovrTextureHeader(cPtr, false);
    return ret;
  }

  public void PlatformData(SWIGTYPE_p_uintptr_t value) @property {
    ovr_im.ovrTexture_PlatformData_set(cast(void*)swigCPtr, SWIGTYPE_p_uintptr_t.swigGetCPtr(value));
  }

  public SWIGTYPE_p_uintptr_t PlatformData() @property const {
    void* cPtr = ovr_im.ovrTexture_PlatformData_get(cast(void*)swigCPtr);
    SWIGTYPE_p_uintptr_t ret = (cPtr is null) ? null : new SWIGTYPE_p_uintptr_t(cPtr, false);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrTexture(), true);
  }
}

char ovr_Initialize() {
  auto ret = ovr_im.ovr_Initialize();
  return ret;
}

void ovr_Shutdown() {
  ovr_im.ovr_Shutdown();
}

int ovrHmd_Detect() {
  auto ret = ovr_im.ovrHmd_Detect();
  return ret;
}

SWIGTYPE_p_ovrHmdStruct ovrHmd_Create(int index) {
  void* cPtr = ovr_im.ovrHmd_Create(index);
  SWIGTYPE_p_ovrHmdStruct ret = (cPtr is null) ? null : new SWIGTYPE_p_ovrHmdStruct(cPtr, false);
  return ret;
}

void ovrHmd_Destroy(SWIGTYPE_p_ovrHmdStruct hmd) {
  ovr_im.ovrHmd_Destroy(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd));
}

SWIGTYPE_p_ovrHmdStruct ovrHmd_CreateDebug(ovrHmdType type) {
  void* cPtr = ovr_im.ovrHmd_CreateDebug(cast(int)type);
  SWIGTYPE_p_ovrHmdStruct ret = (cPtr is null) ? null : new SWIGTYPE_p_ovrHmdStruct(cPtr, false);
  return ret;
}

string ovrHmd_GetLastError(SWIGTYPE_p_ovrHmdStruct hmd) {
  string ret = std.conv.to!string(ovr_im.ovrHmd_GetLastError(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd)));
  return ret;
}

char ovrHmd_StartSensor(SWIGTYPE_p_ovrHmdStruct hmd, uint supportedCaps, uint requiredCaps) {
  auto ret = ovr_im.ovrHmd_StartSensor(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), supportedCaps, requiredCaps);
  return ret;
}

void ovrHmd_StopSensor(SWIGTYPE_p_ovrHmdStruct hmd) {
  ovr_im.ovrHmd_StopSensor(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd));
}

void ovrHmd_ResetSensor(SWIGTYPE_p_ovrHmdStruct hmd) {
  ovr_im.ovrHmd_ResetSensor(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd));
}

ovrSensorState ovrHmd_GetSensorState(SWIGTYPE_p_ovrHmdStruct hmd, double absTime) {
  ovrSensorState ret = new ovrSensorState(ovr_im.ovrHmd_GetSensorState(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), absTime), true);
  return ret;
}

char ovrHmd_GetSensorDesc(SWIGTYPE_p_ovrHmdStruct hmd, ovrSensorDesc descOut) {
  auto ret = ovr_im.ovrHmd_GetSensorDesc(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), ovrSensorDesc.swigGetCPtr(descOut));
  return ret;
}

void ovrHmd_GetDesc(SWIGTYPE_p_ovrHmdStruct hmd, ovrHmdDesc desc) {
  ovr_im.ovrHmd_GetDesc(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), ovrHmdDesc.swigGetCPtr(desc));
}

ovrSizei ovrHmd_GetFovTextureSize(SWIGTYPE_p_ovrHmdStruct hmd, ovrEyeType eye, ovrFovPort fov, float pixelsPerDisplayPixel) {
  ovrSizei ret = new ovrSizei(ovr_im.ovrHmd_GetFovTextureSize(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), cast(int)eye, ovrFovPort.swigGetCPtr(fov), pixelsPerDisplayPixel), true);
  if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  return ret;
}

char ovrHmd_ConfigureRendering(SWIGTYPE_p_ovrHmdStruct hmd, ovrRenderAPIConfig apiConfig, uint hmdCaps, uint distortionCaps, ovrEyeDesc eyeDescIn, ovrEyeRenderDesc eyeRenderDescOut) {
  auto ret = ovr_im.ovrHmd_ConfigureRendering(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), ovrRenderAPIConfig.swigGetCPtr(apiConfig), hmdCaps, distortionCaps, ovrEyeDesc.swigGetCPtr(eyeDescIn), ovrEyeRenderDesc.swigGetCPtr(eyeRenderDescOut));
  return ret;
}

ovrFrameTiming ovrHmd_BeginFrame(SWIGTYPE_p_ovrHmdStruct hmd, uint frameIndex) {
  ovrFrameTiming ret = new ovrFrameTiming(ovr_im.ovrHmd_BeginFrame(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), frameIndex), true);
  return ret;
}

void ovrHmd_EndFrame(SWIGTYPE_p_ovrHmdStruct hmd) {
  ovr_im.ovrHmd_EndFrame(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd));
}

ovrPosef ovrHmd_BeginEyeRender(SWIGTYPE_p_ovrHmdStruct hmd, ovrEyeType eye) {
  ovrPosef ret = new ovrPosef(ovr_im.ovrHmd_BeginEyeRender(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), cast(int)eye), true);
  return ret;
}

void ovrHmd_EndEyeRender(SWIGTYPE_p_ovrHmdStruct hmd, ovrEyeType eye, ovrPosef renderPose, ovrTexture eyeTexture) {
  ovr_im.ovrHmd_EndEyeRender(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), cast(int)eye, ovrPosef.swigGetCPtr(renderPose), ovrTexture.swigGetCPtr(eyeTexture));
  if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
}

ovrEyeRenderDesc ovrHmd_GetRenderDesc(SWIGTYPE_p_ovrHmdStruct hmd, ovrEyeDesc eyeDesc) {
  ovrEyeRenderDesc ret = new ovrEyeRenderDesc(ovr_im.ovrHmd_GetRenderDesc(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), ovrEyeDesc.swigGetCPtr(eyeDesc)), true);
  if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  return ret;
}

class ovrDistortionVertex {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrDistortionVertex obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrDistortionVertex(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Pos(ovrVector2f value) @property {
    ovr_im.ovrDistortionVertex_Pos_set(cast(void*)swigCPtr, ovrVector2f.swigGetCPtr(value));
  }

  public ovrVector2f Pos() @property const {
    void* cPtr = ovr_im.ovrDistortionVertex_Pos_get(cast(void*)swigCPtr);
    ovrVector2f ret = (cPtr is null) ? null : new ovrVector2f(cPtr, false);
    return ret;
  }

  public void TimeWarpFactor(float value) @property {
    ovr_im.ovrDistortionVertex_TimeWarpFactor_set(cast(void*)swigCPtr, value);
  }

  public float TimeWarpFactor() @property const {
    auto ret = ovr_im.ovrDistortionVertex_TimeWarpFactor_get(cast(void*)swigCPtr);
    return ret;
  }

  public void VignetteFactor(float value) @property {
    ovr_im.ovrDistortionVertex_VignetteFactor_set(cast(void*)swigCPtr, value);
  }

  public float VignetteFactor() @property const {
    auto ret = ovr_im.ovrDistortionVertex_VignetteFactor_get(cast(void*)swigCPtr);
    return ret;
  }

  public void TexR(ovrVector2f value) @property {
    ovr_im.ovrDistortionVertex_TexR_set(cast(void*)swigCPtr, ovrVector2f.swigGetCPtr(value));
  }

  public ovrVector2f TexR() @property const {
    void* cPtr = ovr_im.ovrDistortionVertex_TexR_get(cast(void*)swigCPtr);
    ovrVector2f ret = (cPtr is null) ? null : new ovrVector2f(cPtr, false);
    return ret;
  }

  public void TexG(ovrVector2f value) @property {
    ovr_im.ovrDistortionVertex_TexG_set(cast(void*)swigCPtr, ovrVector2f.swigGetCPtr(value));
  }

  public ovrVector2f TexG() @property const {
    void* cPtr = ovr_im.ovrDistortionVertex_TexG_get(cast(void*)swigCPtr);
    ovrVector2f ret = (cPtr is null) ? null : new ovrVector2f(cPtr, false);
    return ret;
  }

  public void TexB(ovrVector2f value) @property {
    ovr_im.ovrDistortionVertex_TexB_set(cast(void*)swigCPtr, ovrVector2f.swigGetCPtr(value));
  }

  public ovrVector2f TexB() @property const {
    void* cPtr = ovr_im.ovrDistortionVertex_TexB_get(cast(void*)swigCPtr);
    ovrVector2f ret = (cPtr is null) ? null : new ovrVector2f(cPtr, false);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrDistortionVertex(), true);
  }
}

class ovrDistortionMesh {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrDistortionMesh obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrDistortionMesh(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void pVertexData(ovrDistortionVertex value) @property {
    ovr_im.ovrDistortionMesh_pVertexData_set(cast(void*)swigCPtr, ovrDistortionVertex.swigGetCPtr(value));
  }

  public ovrDistortionVertex pVertexData() @property const {
    void* cPtr = ovr_im.ovrDistortionMesh_pVertexData_get(cast(void*)swigCPtr);
    ovrDistortionVertex ret = (cPtr is null) ? null : new ovrDistortionVertex(cPtr, false);
    return ret;
  }

  public void pIndexData(ushort* value) @property {
    ovr_im.ovrDistortionMesh_pIndexData_set(cast(void*)swigCPtr, cast(void*)value);
  }

  public ushort* pIndexData() @property const {
    auto ret = cast(ushort*)ovr_im.ovrDistortionMesh_pIndexData_get(cast(void*)swigCPtr);
    return ret;
  }

  public void VertexCount(uint value) @property {
    ovr_im.ovrDistortionMesh_VertexCount_set(cast(void*)swigCPtr, value);
  }

  public uint VertexCount() @property const {
    auto ret = ovr_im.ovrDistortionMesh_VertexCount_get(cast(void*)swigCPtr);
    return ret;
  }

  public void IndexCount(uint value) @property {
    ovr_im.ovrDistortionMesh_IndexCount_set(cast(void*)swigCPtr, value);
  }

  public uint IndexCount() @property const {
    auto ret = ovr_im.ovrDistortionMesh_IndexCount_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrDistortionMesh(), true);
  }
}

char ovrHmd_CreateDistortionMesh(SWIGTYPE_p_ovrHmdStruct hmd, ovrEyeDesc eyeDesc, uint distortionCaps, ovrVector2f uvScaleOffsetOut, ovrDistortionMesh meshData) {
  auto ret = ovr_im.ovrHmd_CreateDistortionMesh(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), ovrEyeDesc.swigGetCPtr(eyeDesc), distortionCaps, ovrVector2f.swigGetCPtr(uvScaleOffsetOut), ovrDistortionMesh.swigGetCPtr(meshData));
  if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  return ret;
}

void ovrHmd_DestroyDistortionMesh(ovrDistortionMesh meshData) {
  ovr_im.ovrHmd_DestroyDistortionMesh(ovrDistortionMesh.swigGetCPtr(meshData));
}

void ovrHmd_GetRenderScaleAndOffset(SWIGTYPE_p_ovrHmdStruct hmd, ovrEyeDesc eyeDesc, uint distortionCaps, ovrVector2f uvScaleOffsetOut) {
  ovr_im.ovrHmd_GetRenderScaleAndOffset(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), ovrEyeDesc.swigGetCPtr(eyeDesc), distortionCaps, ovrVector2f.swigGetCPtr(uvScaleOffsetOut));
  if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
}

ovrFrameTiming ovrHmd_GetFrameTiming(SWIGTYPE_p_ovrHmdStruct hmd, uint frameIndex) {
  ovrFrameTiming ret = new ovrFrameTiming(ovr_im.ovrHmd_GetFrameTiming(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), frameIndex), true);
  return ret;
}

ovrFrameTiming ovrHmd_BeginFrameTiming(SWIGTYPE_p_ovrHmdStruct hmd, uint frameIndex) {
  ovrFrameTiming ret = new ovrFrameTiming(ovr_im.ovrHmd_BeginFrameTiming(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), frameIndex), true);
  return ret;
}

void ovrHmd_EndFrameTiming(SWIGTYPE_p_ovrHmdStruct hmd) {
  ovr_im.ovrHmd_EndFrameTiming(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd));
}

void ovrHmd_ResetFrameTiming(SWIGTYPE_p_ovrHmdStruct hmd, uint frameIndex, char vsync) {
  ovr_im.ovrHmd_ResetFrameTiming(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), frameIndex, vsync);
}

ovrPosef ovrHmd_GetEyePose(SWIGTYPE_p_ovrHmdStruct hmd, ovrEyeType eye) {
  ovrPosef ret = new ovrPosef(ovr_im.ovrHmd_GetEyePose(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), cast(int)eye), true);
  return ret;
}

void ovrHmd_GetEyeTimewarpMatrices(SWIGTYPE_p_ovrHmdStruct hmd, ovrEyeType eye, ovrPosef renderPose, ovrMatrix4f twmOut) {
  ovr_im.ovrHmd_GetEyeTimewarpMatrices(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), cast(int)eye, ovrPosef.swigGetCPtr(renderPose), ovrMatrix4f.swigGetCPtr(twmOut));
  if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
}

ovrMatrix4f ovrMatrix4f_Projection(ovrFovPort fov, float znear, float zfar, char rightHanded) {
  ovrMatrix4f ret = new ovrMatrix4f(ovr_im.ovrMatrix4f_Projection(ovrFovPort.swigGetCPtr(fov), znear, zfar, rightHanded), true);
  if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  return ret;
}

ovrMatrix4f ovrMatrix4f_OrthoSubProjection(ovrMatrix4f projection, ovrVector2f orthoScale, float orthoDistance, float eyeViewAdjustX) {
  ovrMatrix4f ret = new ovrMatrix4f(ovr_im.ovrMatrix4f_OrthoSubProjection(ovrMatrix4f.swigGetCPtr(projection), ovrVector2f.swigGetCPtr(orthoScale), orthoDistance, eyeViewAdjustX), true);
  if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  return ret;
}

double ovr_GetTimeInSeconds() {
  auto ret = ovr_im.ovr_GetTimeInSeconds();
  return ret;
}

double ovr_WaitTillTime(double absTime) {
  auto ret = ovr_im.ovr_WaitTillTime(absTime);
  return ret;
}

char ovrHmd_ProcessLatencyTest(SWIGTYPE_p_ovrHmdStruct hmd, SWIGTYPE_p_unsigned_char rgbColorOut) {
  auto ret = ovr_im.ovrHmd_ProcessLatencyTest(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), SWIGTYPE_p_unsigned_char.swigGetCPtr(rgbColorOut));
  return ret;
}

string ovrHmd_GetLatencyTestResult(SWIGTYPE_p_ovrHmdStruct hmd) {
  string ret = std.conv.to!string(ovr_im.ovrHmd_GetLatencyTestResult(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd)));
  return ret;
}

double ovrHmd_GetMeasuredLatencyTest2(SWIGTYPE_p_ovrHmdStruct hmd) {
  auto ret = ovr_im.ovrHmd_GetMeasuredLatencyTest2(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd));
  return ret;
}

string OVR_KEY_USER() @property {
  string ret = std.conv.to!string(ovr_im.OVR_KEY_USER_get());
  return ret;
}

string OVR_KEY_NAME() @property {
  string ret = std.conv.to!string(ovr_im.OVR_KEY_NAME_get());
  return ret;
}

string OVR_KEY_GENDER() @property {
  string ret = std.conv.to!string(ovr_im.OVR_KEY_GENDER_get());
  return ret;
}

string OVR_KEY_PLAYER_HEIGHT() @property {
  string ret = std.conv.to!string(ovr_im.OVR_KEY_PLAYER_HEIGHT_get());
  return ret;
}

string OVR_KEY_EYE_HEIGHT() @property {
  string ret = std.conv.to!string(ovr_im.OVR_KEY_EYE_HEIGHT_get());
  return ret;
}

string OVR_KEY_IPD() @property {
  string ret = std.conv.to!string(ovr_im.OVR_KEY_IPD_get());
  return ret;
}

string OVR_KEY_NECK_TO_EYE_HORIZONTAL() @property {
  string ret = std.conv.to!string(ovr_im.OVR_KEY_NECK_TO_EYE_HORIZONTAL_get());
  return ret;
}

string OVR_KEY_NECK_TO_EYE_VERTICAL() @property {
  string ret = std.conv.to!string(ovr_im.OVR_KEY_NECK_TO_EYE_VERTICAL_get());
  return ret;
}

string OVR_DEFAULT_GENDER() @property {
  string ret = std.conv.to!string(ovr_im.OVR_DEFAULT_GENDER_get());
  return ret;
}

double OVR_DEFAULT_PLAYER_HEIGHT() @property {
  auto ret = ovr_im.OVR_DEFAULT_PLAYER_HEIGHT_get();
  return ret;
}

double OVR_DEFAULT_EYE_HEIGHT() @property {
  auto ret = ovr_im.OVR_DEFAULT_EYE_HEIGHT_get();
  return ret;
}

double OVR_DEFAULT_IPD() @property {
  auto ret = ovr_im.OVR_DEFAULT_IPD_get();
  return ret;
}

double OVR_DEFAULT_NECK_TO_EYE_HORIZONTAL() @property {
  auto ret = ovr_im.OVR_DEFAULT_NECK_TO_EYE_HORIZONTAL_get();
  return ret;
}

double OVR_DEFAULT_NECK_TO_EYE_VERTICAL() @property {
  auto ret = ovr_im.OVR_DEFAULT_NECK_TO_EYE_VERTICAL_get();
  return ret;
}

float ovrHmd_GetFloat(SWIGTYPE_p_ovrHmdStruct hmd, string propertyName, float defaultVal) {
  auto ret = ovr_im.ovrHmd_GetFloat(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), (propertyName ? std.string.toStringz(propertyName) : null), defaultVal);
  return ret;
}

char ovrHmd_SetFloat(SWIGTYPE_p_ovrHmdStruct hmd, string propertyName, float value) {
  auto ret = ovr_im.ovrHmd_SetFloat(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), (propertyName ? std.string.toStringz(propertyName) : null), value);
  return ret;
}

uint ovrHmd_GetFloatArray(SWIGTYPE_p_ovrHmdStruct hmd, string propertyName, SWIGTYPE_p_float values, uint arraySize) {
  auto ret = ovr_im.ovrHmd_GetFloatArray(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), (propertyName ? std.string.toStringz(propertyName) : null), SWIGTYPE_p_float.swigGetCPtr(values), arraySize);
  return ret;
}

char ovrHmd_SetFloatArray(SWIGTYPE_p_ovrHmdStruct hmd, string propertyName, SWIGTYPE_p_float values, uint arraySize) {
  auto ret = ovr_im.ovrHmd_SetFloatArray(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), (propertyName ? std.string.toStringz(propertyName) : null), SWIGTYPE_p_float.swigGetCPtr(values), arraySize);
  return ret;
}

string ovrHmd_GetString(SWIGTYPE_p_ovrHmdStruct hmd, string propertyName, string defaultVal) {
  string ret = std.conv.to!string(ovr_im.ovrHmd_GetString(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), (propertyName ? std.string.toStringz(propertyName) : null), (defaultVal ? std.string.toStringz(defaultVal) : null)));
  return ret;
}

uint ovrHmd_GetArraySize(SWIGTYPE_p_ovrHmdStruct hmd, string propertyName) {
  auto ret = ovr_im.ovrHmd_GetArraySize(SWIGTYPE_p_ovrHmdStruct.swigGetCPtr(hmd), (propertyName ? std.string.toStringz(propertyName) : null));
  return ret;
}

class ovrGLConfigData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrGLConfigData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrGLConfigData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Header(ovrRenderAPIConfigHeader value) @property {
    ovr_im.ovrGLConfigData_Header_set(cast(void*)swigCPtr, ovrRenderAPIConfigHeader.swigGetCPtr(value));
  }

  public ovrRenderAPIConfigHeader Header() @property const {
    void* cPtr = ovr_im.ovrGLConfigData_Header_get(cast(void*)swigCPtr);
    ovrRenderAPIConfigHeader ret = (cPtr is null) ? null : new ovrRenderAPIConfigHeader(cPtr, false);
    return ret;
  }

  public void Window(SWIGTYPE_p_HWND value) @property {
    ovr_im.ovrGLConfigData_Window_set(cast(void*)swigCPtr, SWIGTYPE_p_HWND.swigGetCPtr(value));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_HWND Window() @property const {
    SWIGTYPE_p_HWND ret = new SWIGTYPE_p_HWND(ovr_im.ovrGLConfigData_Window_get(cast(void*)swigCPtr), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public void WglContext(SWIGTYPE_p_HGLRC value) @property {
    ovr_im.ovrGLConfigData_WglContext_set(cast(void*)swigCPtr, SWIGTYPE_p_HGLRC.swigGetCPtr(value));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_HGLRC WglContext() @property const {
    SWIGTYPE_p_HGLRC ret = new SWIGTYPE_p_HGLRC(ovr_im.ovrGLConfigData_WglContext_get(cast(void*)swigCPtr), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public void GdiDc(SWIGTYPE_p_HDC value) @property {
    ovr_im.ovrGLConfigData_GdiDc_set(cast(void*)swigCPtr, SWIGTYPE_p_HDC.swigGetCPtr(value));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_HDC GdiDc() @property const {
    SWIGTYPE_p_HDC ret = new SWIGTYPE_p_HDC(ovr_im.ovrGLConfigData_GdiDc_get(cast(void*)swigCPtr), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrGLConfigData(), true);
  }
}

class ovrGLConfig {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrGLConfig obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrGLConfig(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Config(ovrRenderAPIConfig value) @property {
    ovr_im.ovrGLConfig_Config_set(cast(void*)swigCPtr, ovrRenderAPIConfig.swigGetCPtr(value));
  }

  public ovrRenderAPIConfig Config() @property const {
    void* cPtr = ovr_im.ovrGLConfig_Config_get(cast(void*)swigCPtr);
    ovrRenderAPIConfig ret = (cPtr is null) ? null : new ovrRenderAPIConfig(cPtr, false);
    return ret;
  }

  public void OGL(ovrGLConfigData value) @property {
    ovr_im.ovrGLConfig_OGL_set(cast(void*)swigCPtr, ovrGLConfigData.swigGetCPtr(value));
  }

  public ovrGLConfigData OGL() @property const {
    void* cPtr = ovr_im.ovrGLConfig_OGL_get(cast(void*)swigCPtr);
    ovrGLConfigData ret = (cPtr is null) ? null : new ovrGLConfigData(cPtr, false);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrGLConfig(), true);
  }
}

class ovrGLTextureData {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrGLTextureData obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrGLTextureData(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Header(ovrTextureHeader value) @property {
    ovr_im.ovrGLTextureData_Header_set(cast(void*)swigCPtr, ovrTextureHeader.swigGetCPtr(value));
  }

  public ovrTextureHeader Header() @property const {
    void* cPtr = ovr_im.ovrGLTextureData_Header_get(cast(void*)swigCPtr);
    ovrTextureHeader ret = (cPtr is null) ? null : new ovrTextureHeader(cPtr, false);
    return ret;
  }

  public void TexId(SWIGTYPE_p_GLuint value) @property {
    ovr_im.ovrGLTextureData_TexId_set(cast(void*)swigCPtr, SWIGTYPE_p_GLuint.swigGetCPtr(value));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_GLuint TexId() @property const {
    SWIGTYPE_p_GLuint ret = new SWIGTYPE_p_GLuint(ovr_im.ovrGLTextureData_TexId_get(cast(void*)swigCPtr), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrGLTextureData(), true);
  }
}

class ovrGLTexture {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ovrGLTexture obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_ovrGLTexture(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Texture(ovrTexture value) @property {
    ovr_im.ovrGLTexture_Texture_set(cast(void*)swigCPtr, ovrTexture.swigGetCPtr(value));
  }

  public ovrTexture Texture() @property const {
    void* cPtr = ovr_im.ovrGLTexture_Texture_get(cast(void*)swigCPtr);
    ovrTexture ret = (cPtr is null) ? null : new ovrTexture(cPtr, false);
    return ret;
  }

  public void OGL(ovrGLTextureData value) @property {
    ovr_im.ovrGLTexture_OGL_set(cast(void*)swigCPtr, ovrGLTextureData.swigGetCPtr(value));
  }

  public ovrGLTextureData OGL() @property const {
    void* cPtr = ovr_im.ovrGLTexture_OGL_get(cast(void*)swigCPtr);
    ovrGLTextureData ret = (cPtr is null) ? null : new ovrGLTextureData(cPtr, false);
    return ret;
  }

  public this() {
    this(ovr_im.new_ovrGLTexture(), true);
  }
}

class SWIGTYPE_p_unsigned_char {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_unsigned_char obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_a_4__float {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_a_4__float obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_float {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_float obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_HWND {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_HWND obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_HGLRC {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_HGLRC obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_HDC {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_HDC obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_double {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_double obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_ovrHmdStruct {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_ovrHmdStruct obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_GLuint {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_GLuint obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_ovrEyeType {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_ovrEyeType obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_uintptr_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_uintptr_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module ovr_im;
static import core.stdc.config;

static import std.conv;

static import std.conv;
static import std.string;


private {
  version(linux) {
    version = Nix;
  } else version(darwin) {
    version = Nix;
  } else version(OSX) {
    version = Nix;
  } else version(FreeBSD) {
    version = Nix;
    version = freebsd;
  } else version(freebsd) {
    version = Nix;
  } else version(Unix) {
    version = Nix;
  } else version(Posix) {
    version = Nix;
  }

  version(Tango) {
    static import tango.stdc.string;
    static import tango.stdc.stringz;

    version (PhobosCompatibility) {
    } else {
      alias char[] string;
      alias wchar[] wstring;
      alias dchar[] dstring;
    }
  } else {
    version(D_Version2) {
      static import std.conv;
    }
    static import std.string;
    static import std.c.string;
  }

  version(D_Version2) {
    mixin("alias const(char)* CCPTR;");
  } else {
    alias char* CCPTR;
  }

  CCPTR swigToCString(string str) {
    version(Tango) {
      return tango.stdc.stringz.toStringz(str);
    } else {
      return std.string.toStringz(str);
    }
  }

  string swigToDString(CCPTR cstr) {
    version(Tango) {
      return tango.stdc.stringz.fromStringz(cstr);
    } else {
      version(D_Version2) {
        mixin("return std.conv.to!string(cstr);");
      } else {
        return std.c.string.toString(cstr);
      }
    }
  }
}

class SwigSwigSharedLibLoadException : Exception {
  this(in string[] libNames, in string[] reasons) {
    string msg = "Failed to load one or more shared libraries:";
    foreach(i, n; libNames) {
      msg ~= "\n\t" ~ n ~ " - ";
      if(i < reasons.length)
        msg ~= reasons[i];
      else
        msg ~= "Unknown";
    }
    super(msg);
  }
}

class SwigSymbolLoadException : Exception {
  this(string SwigSharedLibName, string symbolName) {
    super("Failed to load symbol " ~ symbolName ~ " from shared library " ~ SwigSharedLibName);
    _symbolName = symbolName;
  }

  string symbolName() {
    return _symbolName;
  }

private:
  string _symbolName;
}

private {
  version(Nix) {
    version(freebsd) {
      // the dl* functions are in libc on FreeBSD
    }
    else {
      pragma(lib, "dl");
    }

    version(Tango) {
      import tango.sys.Common;
    } else version(linux) {
      import std.c.linux.linux;
    } else {
      extern(C) {
        const RTLD_NOW = 2;

        void *dlopen(CCPTR file, int mode);
        int dlclose(void* handle);
        void *dlsym(void* handle, CCPTR name);
        CCPTR dlerror();
      }
    }

    alias void* SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return dlopen(swigToCString(libName), RTLD_NOW);
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      dlclose(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return dlsym(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      CCPTR err = dlerror();
      if (err is null) {
        return "Unknown Error";
      }
      return swigToDString(err);
    }
  } else version(Windows) {
    alias ushort WORD;
    alias uint DWORD;
    alias CCPTR LPCSTR;
    alias void* HMODULE;
    alias void* HLOCAL;
    alias int function() FARPROC;
    struct VA_LIST {}

    extern (Windows) {
      HMODULE LoadLibraryA(LPCSTR);
      FARPROC GetProcAddress(HMODULE, LPCSTR);
      void FreeLibrary(HMODULE);
      DWORD GetLastError();
      DWORD FormatMessageA(DWORD, in void*, DWORD, DWORD, LPCSTR, DWORD, VA_LIST*);
      HLOCAL LocalFree(HLOCAL);
    }

    DWORD MAKELANGID(WORD p, WORD s) {
      return (((cast(WORD)s) << 10) | cast(WORD)p);
    }

    enum {
      LANG_NEUTRAL                    = 0,
      SUBLANG_DEFAULT                 = 1,
      FORMAT_MESSAGE_ALLOCATE_BUFFER  = 256,
      FORMAT_MESSAGE_IGNORE_INSERTS   = 512,
      FORMAT_MESSAGE_FROM_SYSTEM      = 4096
    }

    alias HMODULE SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return LoadLibraryA(swigToCString(libName));
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      FreeLibrary(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return GetProcAddress(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      DWORD errcode = GetLastError();

      LPCSTR msgBuf;
      DWORD i = FormatMessageA(
        FORMAT_MESSAGE_ALLOCATE_BUFFER |
        FORMAT_MESSAGE_FROM_SYSTEM |
        FORMAT_MESSAGE_IGNORE_INSERTS,
        null,
        errcode,
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        cast(LPCSTR)&msgBuf,
        0,
        null);

      string text = swigToDString(msgBuf);
      LocalFree(cast(HLOCAL)msgBuf);

      if (i >= 2) {
        i -= 2;
      }
      return text[0 .. i];
    }
  } else {
    static assert(0, "Operating system not supported by the wrapper loading code.");
  }

  final class SwigSharedLib {
    void load(string[] names) {
      if (_hlib !is null) return;

      string[] failedLibs;
      string[] reasons;

      foreach(n; names) {
        _hlib = swigLoadSharedLib(n);
        if (_hlib is null) {
          failedLibs ~= n;
          reasons ~= swigGetErrorStr();
          continue;
        }
        _name = n;
        break;
      }

      if (_hlib is null) {
        throw new SwigSwigSharedLibLoadException(failedLibs, reasons);
      }
    }

    void* loadSymbol(string symbolName, bool doThrow = true) {
      void* sym = swigGetSymbol(_hlib, symbolName);
      if(doThrow && (sym is null)) {
        throw new SwigSymbolLoadException(_name, symbolName);
      }
      return sym;
    }

    void unload() {
      if(_hlib !is null) {
        swigUnloadSharedLib(_hlib);
        _hlib = null;
      }
    }

  private:
    string _name;
    SwigSharedLibHandle _hlib;
  }
}

static this() {
  string[] possibleFileNames;
  version (Posix) {
    version (OSX) {
      possibleFileNames ~= ["libovr_wrap.dylib", "libovr_wrap.bundle"];
    }
    possibleFileNames ~= ["libovr_wrap.so"];
  } else version (Windows) {
    possibleFileNames ~= ["ovr_wrap.dll", "libovr_wrap.so"];
  } else {
    static assert(false, "Operating system not supported by the wrapper loading code.");
  }

  auto library = new SwigSharedLib;
  library.load(possibleFileNames);

  string bindCode(string functionPointer, string symbol) {
    return functionPointer ~ " = cast(typeof(" ~ functionPointer ~
      "))library.loadSymbol(`" ~ symbol ~ "`);";
  }

  //#if !defined(SWIG_D_NO_EXCEPTION_HELPER)
  mixin(bindCode("swigRegisterExceptionCallbacksovr", "SWIGRegisterExceptionCallbacks_ovr"));
  //#endif // SWIG_D_NO_EXCEPTION_HELPER
  //#if !defined(SWIG_D_NO_STRING_HELPER)
  mixin(bindCode("swigRegisterStringCallbackovr", "SWIGRegisterStringCallback_ovr"));
  //#endif // SWIG_D_NO_STRING_HELPER
  
  mixin(bindCode("ovrVector2i_x_set", "D_ovrVector2i_x_set"));
  mixin(bindCode("ovrVector2i_x_get", "D_ovrVector2i_x_get"));
  mixin(bindCode("ovrVector2i_y_set", "D_ovrVector2i_y_set"));
  mixin(bindCode("ovrVector2i_y_get", "D_ovrVector2i_y_get"));
  mixin(bindCode("new_ovrVector2i", "D_new_ovrVector2i"));
  mixin(bindCode("delete_ovrVector2i", "D_delete_ovrVector2i"));
  mixin(bindCode("ovrSizei_w_set", "D_ovrSizei_w_set"));
  mixin(bindCode("ovrSizei_w_get", "D_ovrSizei_w_get"));
  mixin(bindCode("ovrSizei_h_set", "D_ovrSizei_h_set"));
  mixin(bindCode("ovrSizei_h_get", "D_ovrSizei_h_get"));
  mixin(bindCode("new_ovrSizei", "D_new_ovrSizei"));
  mixin(bindCode("delete_ovrSizei", "D_delete_ovrSizei"));
  mixin(bindCode("ovrRecti_Pos_set", "D_ovrRecti_Pos_set"));
  mixin(bindCode("ovrRecti_Pos_get", "D_ovrRecti_Pos_get"));
  mixin(bindCode("ovrRecti_Size_set", "D_ovrRecti_Size_set"));
  mixin(bindCode("ovrRecti_Size_get", "D_ovrRecti_Size_get"));
  mixin(bindCode("new_ovrRecti", "D_new_ovrRecti"));
  mixin(bindCode("delete_ovrRecti", "D_delete_ovrRecti"));
  mixin(bindCode("ovrQuatf_x_set", "D_ovrQuatf_x_set"));
  mixin(bindCode("ovrQuatf_x_get", "D_ovrQuatf_x_get"));
  mixin(bindCode("ovrQuatf_y_set", "D_ovrQuatf_y_set"));
  mixin(bindCode("ovrQuatf_y_get", "D_ovrQuatf_y_get"));
  mixin(bindCode("ovrQuatf_z_set", "D_ovrQuatf_z_set"));
  mixin(bindCode("ovrQuatf_z_get", "D_ovrQuatf_z_get"));
  mixin(bindCode("ovrQuatf_w_set", "D_ovrQuatf_w_set"));
  mixin(bindCode("ovrQuatf_w_get", "D_ovrQuatf_w_get"));
  mixin(bindCode("new_ovrQuatf", "D_new_ovrQuatf"));
  mixin(bindCode("delete_ovrQuatf", "D_delete_ovrQuatf"));
  mixin(bindCode("ovrVector2f_x_set", "D_ovrVector2f_x_set"));
  mixin(bindCode("ovrVector2f_x_get", "D_ovrVector2f_x_get"));
  mixin(bindCode("ovrVector2f_y_set", "D_ovrVector2f_y_set"));
  mixin(bindCode("ovrVector2f_y_get", "D_ovrVector2f_y_get"));
  mixin(bindCode("new_ovrVector2f", "D_new_ovrVector2f"));
  mixin(bindCode("delete_ovrVector2f", "D_delete_ovrVector2f"));
  mixin(bindCode("ovrVector3f_x_set", "D_ovrVector3f_x_set"));
  mixin(bindCode("ovrVector3f_x_get", "D_ovrVector3f_x_get"));
  mixin(bindCode("ovrVector3f_y_set", "D_ovrVector3f_y_set"));
  mixin(bindCode("ovrVector3f_y_get", "D_ovrVector3f_y_get"));
  mixin(bindCode("ovrVector3f_z_set", "D_ovrVector3f_z_set"));
  mixin(bindCode("ovrVector3f_z_get", "D_ovrVector3f_z_get"));
  mixin(bindCode("new_ovrVector3f", "D_new_ovrVector3f"));
  mixin(bindCode("delete_ovrVector3f", "D_delete_ovrVector3f"));
  mixin(bindCode("ovrMatrix4f_M_set", "D_ovrMatrix4f_M_set"));
  mixin(bindCode("ovrMatrix4f_M_get", "D_ovrMatrix4f_M_get"));
  mixin(bindCode("new_ovrMatrix4f", "D_new_ovrMatrix4f"));
  mixin(bindCode("delete_ovrMatrix4f", "D_delete_ovrMatrix4f"));
  mixin(bindCode("ovrPosef_Orientation_set", "D_ovrPosef_Orientation_set"));
  mixin(bindCode("ovrPosef_Orientation_get", "D_ovrPosef_Orientation_get"));
  mixin(bindCode("ovrPosef_Position_set", "D_ovrPosef_Position_set"));
  mixin(bindCode("ovrPosef_Position_get", "D_ovrPosef_Position_get"));
  mixin(bindCode("new_ovrPosef", "D_new_ovrPosef"));
  mixin(bindCode("delete_ovrPosef", "D_delete_ovrPosef"));
  mixin(bindCode("ovrPoseStatef_Pose_set", "D_ovrPoseStatef_Pose_set"));
  mixin(bindCode("ovrPoseStatef_Pose_get", "D_ovrPoseStatef_Pose_get"));
  mixin(bindCode("ovrPoseStatef_AngularVelocity_set", "D_ovrPoseStatef_AngularVelocity_set"));
  mixin(bindCode("ovrPoseStatef_AngularVelocity_get", "D_ovrPoseStatef_AngularVelocity_get"));
  mixin(bindCode("ovrPoseStatef_LinearVelocity_set", "D_ovrPoseStatef_LinearVelocity_set"));
  mixin(bindCode("ovrPoseStatef_LinearVelocity_get", "D_ovrPoseStatef_LinearVelocity_get"));
  mixin(bindCode("ovrPoseStatef_AngularAcceleration_set", "D_ovrPoseStatef_AngularAcceleration_set"));
  mixin(bindCode("ovrPoseStatef_AngularAcceleration_get", "D_ovrPoseStatef_AngularAcceleration_get"));
  mixin(bindCode("ovrPoseStatef_LinearAcceleration_set", "D_ovrPoseStatef_LinearAcceleration_set"));
  mixin(bindCode("ovrPoseStatef_LinearAcceleration_get", "D_ovrPoseStatef_LinearAcceleration_get"));
  mixin(bindCode("ovrPoseStatef_TimeInSeconds_set", "D_ovrPoseStatef_TimeInSeconds_set"));
  mixin(bindCode("ovrPoseStatef_TimeInSeconds_get", "D_ovrPoseStatef_TimeInSeconds_get"));
  mixin(bindCode("new_ovrPoseStatef", "D_new_ovrPoseStatef"));
  mixin(bindCode("delete_ovrPoseStatef", "D_delete_ovrPoseStatef"));
  mixin(bindCode("ovrFovPort_UpTan_set", "D_ovrFovPort_UpTan_set"));
  mixin(bindCode("ovrFovPort_UpTan_get", "D_ovrFovPort_UpTan_get"));
  mixin(bindCode("ovrFovPort_DownTan_set", "D_ovrFovPort_DownTan_set"));
  mixin(bindCode("ovrFovPort_DownTan_get", "D_ovrFovPort_DownTan_get"));
  mixin(bindCode("ovrFovPort_LeftTan_set", "D_ovrFovPort_LeftTan_set"));
  mixin(bindCode("ovrFovPort_LeftTan_get", "D_ovrFovPort_LeftTan_get"));
  mixin(bindCode("ovrFovPort_RightTan_set", "D_ovrFovPort_RightTan_set"));
  mixin(bindCode("ovrFovPort_RightTan_get", "D_ovrFovPort_RightTan_get"));
  mixin(bindCode("new_ovrFovPort", "D_new_ovrFovPort"));
  mixin(bindCode("delete_ovrFovPort", "D_delete_ovrFovPort"));
  mixin(bindCode("ovrHmdDesc_Handle_set", "D_ovrHmdDesc_Handle_set"));
  mixin(bindCode("ovrHmdDesc_Handle_get", "D_ovrHmdDesc_Handle_get"));
  mixin(bindCode("ovrHmdDesc_Type_set", "D_ovrHmdDesc_Type_set"));
  mixin(bindCode("ovrHmdDesc_Type_get", "D_ovrHmdDesc_Type_get"));
  mixin(bindCode("ovrHmdDesc_ProductName_set", "D_ovrHmdDesc_ProductName_set"));
  mixin(bindCode("ovrHmdDesc_ProductName_get", "D_ovrHmdDesc_ProductName_get"));
  mixin(bindCode("ovrHmdDesc_Manufacturer_set", "D_ovrHmdDesc_Manufacturer_set"));
  mixin(bindCode("ovrHmdDesc_Manufacturer_get", "D_ovrHmdDesc_Manufacturer_get"));
  mixin(bindCode("ovrHmdDesc_Caps_set", "D_ovrHmdDesc_Caps_set"));
  mixin(bindCode("ovrHmdDesc_Caps_get", "D_ovrHmdDesc_Caps_get"));
  mixin(bindCode("ovrHmdDesc_DistortionCaps_set", "D_ovrHmdDesc_DistortionCaps_set"));
  mixin(bindCode("ovrHmdDesc_DistortionCaps_get", "D_ovrHmdDesc_DistortionCaps_get"));
  mixin(bindCode("ovrHmdDesc_Resolution_set", "D_ovrHmdDesc_Resolution_set"));
  mixin(bindCode("ovrHmdDesc_Resolution_get", "D_ovrHmdDesc_Resolution_get"));
  mixin(bindCode("ovrHmdDesc_WindowsPos_set", "D_ovrHmdDesc_WindowsPos_set"));
  mixin(bindCode("ovrHmdDesc_WindowsPos_get", "D_ovrHmdDesc_WindowsPos_get"));
  mixin(bindCode("ovrHmdDesc_DefaultEyeFov_set", "D_ovrHmdDesc_DefaultEyeFov_set"));
  mixin(bindCode("ovrHmdDesc_DefaultEyeFov_get", "D_ovrHmdDesc_DefaultEyeFov_get"));
  mixin(bindCode("ovrHmdDesc_MaxEyeFov_set", "D_ovrHmdDesc_MaxEyeFov_set"));
  mixin(bindCode("ovrHmdDesc_MaxEyeFov_get", "D_ovrHmdDesc_MaxEyeFov_get"));
  mixin(bindCode("ovrHmdDesc_EyeRenderOrder_set", "D_ovrHmdDesc_EyeRenderOrder_set"));
  mixin(bindCode("ovrHmdDesc_EyeRenderOrder_get", "D_ovrHmdDesc_EyeRenderOrder_get"));
  mixin(bindCode("ovrHmdDesc_DisplayDeviceName_set", "D_ovrHmdDesc_DisplayDeviceName_set"));
  mixin(bindCode("ovrHmdDesc_DisplayDeviceName_get", "D_ovrHmdDesc_DisplayDeviceName_get"));
  mixin(bindCode("ovrHmdDesc_DisplayId_set", "D_ovrHmdDesc_DisplayId_set"));
  mixin(bindCode("ovrHmdDesc_DisplayId_get", "D_ovrHmdDesc_DisplayId_get"));
  mixin(bindCode("new_ovrHmdDesc", "D_new_ovrHmdDesc"));
  mixin(bindCode("delete_ovrHmdDesc", "D_delete_ovrHmdDesc"));
  mixin(bindCode("ovrSensorState_Predicted_set", "D_ovrSensorState_Predicted_set"));
  mixin(bindCode("ovrSensorState_Predicted_get", "D_ovrSensorState_Predicted_get"));
  mixin(bindCode("ovrSensorState_Recorded_set", "D_ovrSensorState_Recorded_set"));
  mixin(bindCode("ovrSensorState_Recorded_get", "D_ovrSensorState_Recorded_get"));
  mixin(bindCode("ovrSensorState_Temperature_set", "D_ovrSensorState_Temperature_set"));
  mixin(bindCode("ovrSensorState_Temperature_get", "D_ovrSensorState_Temperature_get"));
  mixin(bindCode("ovrSensorState_StatusFlags_set", "D_ovrSensorState_StatusFlags_set"));
  mixin(bindCode("ovrSensorState_StatusFlags_get", "D_ovrSensorState_StatusFlags_get"));
  mixin(bindCode("new_ovrSensorState", "D_new_ovrSensorState"));
  mixin(bindCode("delete_ovrSensorState", "D_delete_ovrSensorState"));
  mixin(bindCode("ovrSensorDesc_VendorId_set", "D_ovrSensorDesc_VendorId_set"));
  mixin(bindCode("ovrSensorDesc_VendorId_get", "D_ovrSensorDesc_VendorId_get"));
  mixin(bindCode("ovrSensorDesc_ProductId_set", "D_ovrSensorDesc_ProductId_set"));
  mixin(bindCode("ovrSensorDesc_ProductId_get", "D_ovrSensorDesc_ProductId_get"));
  mixin(bindCode("ovrSensorDesc_SerialNumber_set", "D_ovrSensorDesc_SerialNumber_set"));
  mixin(bindCode("ovrSensorDesc_SerialNumber_get", "D_ovrSensorDesc_SerialNumber_get"));
  mixin(bindCode("new_ovrSensorDesc", "D_new_ovrSensorDesc"));
  mixin(bindCode("delete_ovrSensorDesc", "D_delete_ovrSensorDesc"));
  mixin(bindCode("ovrFrameTiming_DeltaSeconds_set", "D_ovrFrameTiming_DeltaSeconds_set"));
  mixin(bindCode("ovrFrameTiming_DeltaSeconds_get", "D_ovrFrameTiming_DeltaSeconds_get"));
  mixin(bindCode("ovrFrameTiming_ThisFrameSeconds_set", "D_ovrFrameTiming_ThisFrameSeconds_set"));
  mixin(bindCode("ovrFrameTiming_ThisFrameSeconds_get", "D_ovrFrameTiming_ThisFrameSeconds_get"));
  mixin(bindCode("ovrFrameTiming_TimewarpPointSeconds_set", "D_ovrFrameTiming_TimewarpPointSeconds_set"));
  mixin(bindCode("ovrFrameTiming_TimewarpPointSeconds_get", "D_ovrFrameTiming_TimewarpPointSeconds_get"));
  mixin(bindCode("ovrFrameTiming_NextFrameSeconds_set", "D_ovrFrameTiming_NextFrameSeconds_set"));
  mixin(bindCode("ovrFrameTiming_NextFrameSeconds_get", "D_ovrFrameTiming_NextFrameSeconds_get"));
  mixin(bindCode("ovrFrameTiming_ScanoutMidpointSeconds_set", "D_ovrFrameTiming_ScanoutMidpointSeconds_set"));
  mixin(bindCode("ovrFrameTiming_ScanoutMidpointSeconds_get", "D_ovrFrameTiming_ScanoutMidpointSeconds_get"));
  mixin(bindCode("ovrFrameTiming_EyeScanoutSeconds_set", "D_ovrFrameTiming_EyeScanoutSeconds_set"));
  mixin(bindCode("ovrFrameTiming_EyeScanoutSeconds_get", "D_ovrFrameTiming_EyeScanoutSeconds_get"));
  mixin(bindCode("new_ovrFrameTiming", "D_new_ovrFrameTiming"));
  mixin(bindCode("delete_ovrFrameTiming", "D_delete_ovrFrameTiming"));
  mixin(bindCode("ovrEyeDesc_Eye_set", "D_ovrEyeDesc_Eye_set"));
  mixin(bindCode("ovrEyeDesc_Eye_get", "D_ovrEyeDesc_Eye_get"));
  mixin(bindCode("ovrEyeDesc_TextureSize_set", "D_ovrEyeDesc_TextureSize_set"));
  mixin(bindCode("ovrEyeDesc_TextureSize_get", "D_ovrEyeDesc_TextureSize_get"));
  mixin(bindCode("ovrEyeDesc_RenderViewport_set", "D_ovrEyeDesc_RenderViewport_set"));
  mixin(bindCode("ovrEyeDesc_RenderViewport_get", "D_ovrEyeDesc_RenderViewport_get"));
  mixin(bindCode("ovrEyeDesc_Fov_set", "D_ovrEyeDesc_Fov_set"));
  mixin(bindCode("ovrEyeDesc_Fov_get", "D_ovrEyeDesc_Fov_get"));
  mixin(bindCode("new_ovrEyeDesc", "D_new_ovrEyeDesc"));
  mixin(bindCode("delete_ovrEyeDesc", "D_delete_ovrEyeDesc"));
  mixin(bindCode("ovrEyeRenderDesc_Desc_set", "D_ovrEyeRenderDesc_Desc_set"));
  mixin(bindCode("ovrEyeRenderDesc_Desc_get", "D_ovrEyeRenderDesc_Desc_get"));
  mixin(bindCode("ovrEyeRenderDesc_DistortedViewport_set", "D_ovrEyeRenderDesc_DistortedViewport_set"));
  mixin(bindCode("ovrEyeRenderDesc_DistortedViewport_get", "D_ovrEyeRenderDesc_DistortedViewport_get"));
  mixin(bindCode("ovrEyeRenderDesc_PixelsPerTanAngleAtCenter_set", "D_ovrEyeRenderDesc_PixelsPerTanAngleAtCenter_set"));
  mixin(bindCode("ovrEyeRenderDesc_PixelsPerTanAngleAtCenter_get", "D_ovrEyeRenderDesc_PixelsPerTanAngleAtCenter_get"));
  mixin(bindCode("ovrEyeRenderDesc_ViewAdjust_set", "D_ovrEyeRenderDesc_ViewAdjust_set"));
  mixin(bindCode("ovrEyeRenderDesc_ViewAdjust_get", "D_ovrEyeRenderDesc_ViewAdjust_get"));
  mixin(bindCode("new_ovrEyeRenderDesc", "D_new_ovrEyeRenderDesc"));
  mixin(bindCode("delete_ovrEyeRenderDesc", "D_delete_ovrEyeRenderDesc"));
  mixin(bindCode("ovrRenderAPIConfigHeader_API_set", "D_ovrRenderAPIConfigHeader_API_set"));
  mixin(bindCode("ovrRenderAPIConfigHeader_API_get", "D_ovrRenderAPIConfigHeader_API_get"));
  mixin(bindCode("ovrRenderAPIConfigHeader_RTSize_set", "D_ovrRenderAPIConfigHeader_RTSize_set"));
  mixin(bindCode("ovrRenderAPIConfigHeader_RTSize_get", "D_ovrRenderAPIConfigHeader_RTSize_get"));
  mixin(bindCode("ovrRenderAPIConfigHeader_Multisample_set", "D_ovrRenderAPIConfigHeader_Multisample_set"));
  mixin(bindCode("ovrRenderAPIConfigHeader_Multisample_get", "D_ovrRenderAPIConfigHeader_Multisample_get"));
  mixin(bindCode("new_ovrRenderAPIConfigHeader", "D_new_ovrRenderAPIConfigHeader"));
  mixin(bindCode("delete_ovrRenderAPIConfigHeader", "D_delete_ovrRenderAPIConfigHeader"));
  mixin(bindCode("ovrRenderAPIConfig_Header_set", "D_ovrRenderAPIConfig_Header_set"));
  mixin(bindCode("ovrRenderAPIConfig_Header_get", "D_ovrRenderAPIConfig_Header_get"));
  mixin(bindCode("ovrRenderAPIConfig_PlatformData_set", "D_ovrRenderAPIConfig_PlatformData_set"));
  mixin(bindCode("ovrRenderAPIConfig_PlatformData_get", "D_ovrRenderAPIConfig_PlatformData_get"));
  mixin(bindCode("new_ovrRenderAPIConfig", "D_new_ovrRenderAPIConfig"));
  mixin(bindCode("delete_ovrRenderAPIConfig", "D_delete_ovrRenderAPIConfig"));
  mixin(bindCode("ovrTextureHeader_API_set", "D_ovrTextureHeader_API_set"));
  mixin(bindCode("ovrTextureHeader_API_get", "D_ovrTextureHeader_API_get"));
  mixin(bindCode("ovrTextureHeader_TextureSize_set", "D_ovrTextureHeader_TextureSize_set"));
  mixin(bindCode("ovrTextureHeader_TextureSize_get", "D_ovrTextureHeader_TextureSize_get"));
  mixin(bindCode("ovrTextureHeader_RenderViewport_set", "D_ovrTextureHeader_RenderViewport_set"));
  mixin(bindCode("ovrTextureHeader_RenderViewport_get", "D_ovrTextureHeader_RenderViewport_get"));
  mixin(bindCode("new_ovrTextureHeader", "D_new_ovrTextureHeader"));
  mixin(bindCode("delete_ovrTextureHeader", "D_delete_ovrTextureHeader"));
  mixin(bindCode("ovrTexture_Header_set", "D_ovrTexture_Header_set"));
  mixin(bindCode("ovrTexture_Header_get", "D_ovrTexture_Header_get"));
  mixin(bindCode("ovrTexture_PlatformData_set", "D_ovrTexture_PlatformData_set"));
  mixin(bindCode("ovrTexture_PlatformData_get", "D_ovrTexture_PlatformData_get"));
  mixin(bindCode("new_ovrTexture", "D_new_ovrTexture"));
  mixin(bindCode("delete_ovrTexture", "D_delete_ovrTexture"));
  mixin(bindCode("ovr_Initialize", "D_ovr_Initialize"));
  mixin(bindCode("ovr_Shutdown", "D_ovr_Shutdown"));
  mixin(bindCode("ovrHmd_Detect", "D_ovrHmd_Detect"));
  mixin(bindCode("ovrHmd_Create", "D_ovrHmd_Create"));
  mixin(bindCode("ovrHmd_Destroy", "D_ovrHmd_Destroy"));
  mixin(bindCode("ovrHmd_CreateDebug", "D_ovrHmd_CreateDebug"));
  mixin(bindCode("ovrHmd_GetLastError", "D_ovrHmd_GetLastError"));
  mixin(bindCode("ovrHmd_StartSensor", "D_ovrHmd_StartSensor"));
  mixin(bindCode("ovrHmd_StopSensor", "D_ovrHmd_StopSensor"));
  mixin(bindCode("ovrHmd_ResetSensor", "D_ovrHmd_ResetSensor"));
  mixin(bindCode("ovrHmd_GetSensorState", "D_ovrHmd_GetSensorState"));
  mixin(bindCode("ovrHmd_GetSensorDesc", "D_ovrHmd_GetSensorDesc"));
  mixin(bindCode("ovrHmd_GetDesc", "D_ovrHmd_GetDesc"));
  mixin(bindCode("ovrHmd_GetFovTextureSize", "D_ovrHmd_GetFovTextureSize"));
  mixin(bindCode("ovrHmd_ConfigureRendering", "D_ovrHmd_ConfigureRendering"));
  mixin(bindCode("ovrHmd_BeginFrame", "D_ovrHmd_BeginFrame"));
  mixin(bindCode("ovrHmd_EndFrame", "D_ovrHmd_EndFrame"));
  mixin(bindCode("ovrHmd_BeginEyeRender", "D_ovrHmd_BeginEyeRender"));
  mixin(bindCode("ovrHmd_EndEyeRender", "D_ovrHmd_EndEyeRender"));
  mixin(bindCode("ovrHmd_GetRenderDesc", "D_ovrHmd_GetRenderDesc"));
  mixin(bindCode("ovrDistortionVertex_Pos_set", "D_ovrDistortionVertex_Pos_set"));
  mixin(bindCode("ovrDistortionVertex_Pos_get", "D_ovrDistortionVertex_Pos_get"));
  mixin(bindCode("ovrDistortionVertex_TimeWarpFactor_set", "D_ovrDistortionVertex_TimeWarpFactor_set"));
  mixin(bindCode("ovrDistortionVertex_TimeWarpFactor_get", "D_ovrDistortionVertex_TimeWarpFactor_get"));
  mixin(bindCode("ovrDistortionVertex_VignetteFactor_set", "D_ovrDistortionVertex_VignetteFactor_set"));
  mixin(bindCode("ovrDistortionVertex_VignetteFactor_get", "D_ovrDistortionVertex_VignetteFactor_get"));
  mixin(bindCode("ovrDistortionVertex_TexR_set", "D_ovrDistortionVertex_TexR_set"));
  mixin(bindCode("ovrDistortionVertex_TexR_get", "D_ovrDistortionVertex_TexR_get"));
  mixin(bindCode("ovrDistortionVertex_TexG_set", "D_ovrDistortionVertex_TexG_set"));
  mixin(bindCode("ovrDistortionVertex_TexG_get", "D_ovrDistortionVertex_TexG_get"));
  mixin(bindCode("ovrDistortionVertex_TexB_set", "D_ovrDistortionVertex_TexB_set"));
  mixin(bindCode("ovrDistortionVertex_TexB_get", "D_ovrDistortionVertex_TexB_get"));
  mixin(bindCode("new_ovrDistortionVertex", "D_new_ovrDistortionVertex"));
  mixin(bindCode("delete_ovrDistortionVertex", "D_delete_ovrDistortionVertex"));
  mixin(bindCode("ovrDistortionMesh_pVertexData_set", "D_ovrDistortionMesh_pVertexData_set"));
  mixin(bindCode("ovrDistortionMesh_pVertexData_get", "D_ovrDistortionMesh_pVertexData_get"));
  mixin(bindCode("ovrDistortionMesh_pIndexData_set", "D_ovrDistortionMesh_pIndexData_set"));
  mixin(bindCode("ovrDistortionMesh_pIndexData_get", "D_ovrDistortionMesh_pIndexData_get"));
  mixin(bindCode("ovrDistortionMesh_VertexCount_set", "D_ovrDistortionMesh_VertexCount_set"));
  mixin(bindCode("ovrDistortionMesh_VertexCount_get", "D_ovrDistortionMesh_VertexCount_get"));
  mixin(bindCode("ovrDistortionMesh_IndexCount_set", "D_ovrDistortionMesh_IndexCount_set"));
  mixin(bindCode("ovrDistortionMesh_IndexCount_get", "D_ovrDistortionMesh_IndexCount_get"));
  mixin(bindCode("new_ovrDistortionMesh", "D_new_ovrDistortionMesh"));
  mixin(bindCode("delete_ovrDistortionMesh", "D_delete_ovrDistortionMesh"));
  mixin(bindCode("ovrHmd_CreateDistortionMesh", "D_ovrHmd_CreateDistortionMesh"));
  mixin(bindCode("ovrHmd_DestroyDistortionMesh", "D_ovrHmd_DestroyDistortionMesh"));
  mixin(bindCode("ovrHmd_GetRenderScaleAndOffset", "D_ovrHmd_GetRenderScaleAndOffset"));
  mixin(bindCode("ovrHmd_GetFrameTiming", "D_ovrHmd_GetFrameTiming"));
  mixin(bindCode("ovrHmd_BeginFrameTiming", "D_ovrHmd_BeginFrameTiming"));
  mixin(bindCode("ovrHmd_EndFrameTiming", "D_ovrHmd_EndFrameTiming"));
  mixin(bindCode("ovrHmd_ResetFrameTiming", "D_ovrHmd_ResetFrameTiming"));
  mixin(bindCode("ovrHmd_GetEyePose", "D_ovrHmd_GetEyePose"));
  mixin(bindCode("ovrHmd_GetEyeTimewarpMatrices", "D_ovrHmd_GetEyeTimewarpMatrices"));
  mixin(bindCode("ovrMatrix4f_Projection", "D_ovrMatrix4f_Projection"));
  mixin(bindCode("ovrMatrix4f_OrthoSubProjection", "D_ovrMatrix4f_OrthoSubProjection"));
  mixin(bindCode("ovr_GetTimeInSeconds", "D_ovr_GetTimeInSeconds"));
  mixin(bindCode("ovr_WaitTillTime", "D_ovr_WaitTillTime"));
  mixin(bindCode("ovrHmd_ProcessLatencyTest", "D_ovrHmd_ProcessLatencyTest"));
  mixin(bindCode("ovrHmd_GetLatencyTestResult", "D_ovrHmd_GetLatencyTestResult"));
  mixin(bindCode("ovrHmd_GetMeasuredLatencyTest2", "D_ovrHmd_GetMeasuredLatencyTest2"));
  mixin(bindCode("OVR_KEY_USER_get", "D_OVR_KEY_USER_get"));
  mixin(bindCode("OVR_KEY_NAME_get", "D_OVR_KEY_NAME_get"));
  mixin(bindCode("OVR_KEY_GENDER_get", "D_OVR_KEY_GENDER_get"));
  mixin(bindCode("OVR_KEY_PLAYER_HEIGHT_get", "D_OVR_KEY_PLAYER_HEIGHT_get"));
  mixin(bindCode("OVR_KEY_EYE_HEIGHT_get", "D_OVR_KEY_EYE_HEIGHT_get"));
  mixin(bindCode("OVR_KEY_IPD_get", "D_OVR_KEY_IPD_get"));
  mixin(bindCode("OVR_KEY_NECK_TO_EYE_HORIZONTAL_get", "D_OVR_KEY_NECK_TO_EYE_HORIZONTAL_get"));
  mixin(bindCode("OVR_KEY_NECK_TO_EYE_VERTICAL_get", "D_OVR_KEY_NECK_TO_EYE_VERTICAL_get"));
  mixin(bindCode("OVR_DEFAULT_GENDER_get", "D_OVR_DEFAULT_GENDER_get"));
  mixin(bindCode("OVR_DEFAULT_PLAYER_HEIGHT_get", "D_OVR_DEFAULT_PLAYER_HEIGHT_get"));
  mixin(bindCode("OVR_DEFAULT_EYE_HEIGHT_get", "D_OVR_DEFAULT_EYE_HEIGHT_get"));
  mixin(bindCode("OVR_DEFAULT_IPD_get", "D_OVR_DEFAULT_IPD_get"));
  mixin(bindCode("OVR_DEFAULT_NECK_TO_EYE_HORIZONTAL_get", "D_OVR_DEFAULT_NECK_TO_EYE_HORIZONTAL_get"));
  mixin(bindCode("OVR_DEFAULT_NECK_TO_EYE_VERTICAL_get", "D_OVR_DEFAULT_NECK_TO_EYE_VERTICAL_get"));
  mixin(bindCode("ovrHmd_GetFloat", "D_ovrHmd_GetFloat"));
  mixin(bindCode("ovrHmd_SetFloat", "D_ovrHmd_SetFloat"));
  mixin(bindCode("ovrHmd_GetFloatArray", "D_ovrHmd_GetFloatArray"));
  mixin(bindCode("ovrHmd_SetFloatArray", "D_ovrHmd_SetFloatArray"));
  mixin(bindCode("ovrHmd_GetString", "D_ovrHmd_GetString"));
  mixin(bindCode("ovrHmd_GetArraySize", "D_ovrHmd_GetArraySize"));
  mixin(bindCode("ovrGLConfigData_Header_set", "D_ovrGLConfigData_Header_set"));
  mixin(bindCode("ovrGLConfigData_Header_get", "D_ovrGLConfigData_Header_get"));
  mixin(bindCode("ovrGLConfigData_Window_set", "D_ovrGLConfigData_Window_set"));
  mixin(bindCode("ovrGLConfigData_Window_get", "D_ovrGLConfigData_Window_get"));
  mixin(bindCode("ovrGLConfigData_WglContext_set", "D_ovrGLConfigData_WglContext_set"));
  mixin(bindCode("ovrGLConfigData_WglContext_get", "D_ovrGLConfigData_WglContext_get"));
  mixin(bindCode("ovrGLConfigData_GdiDc_set", "D_ovrGLConfigData_GdiDc_set"));
  mixin(bindCode("ovrGLConfigData_GdiDc_get", "D_ovrGLConfigData_GdiDc_get"));
  mixin(bindCode("new_ovrGLConfigData", "D_new_ovrGLConfigData"));
  mixin(bindCode("delete_ovrGLConfigData", "D_delete_ovrGLConfigData"));
  mixin(bindCode("ovrGLConfig_Config_set", "D_ovrGLConfig_Config_set"));
  mixin(bindCode("ovrGLConfig_Config_get", "D_ovrGLConfig_Config_get"));
  mixin(bindCode("ovrGLConfig_OGL_set", "D_ovrGLConfig_OGL_set"));
  mixin(bindCode("ovrGLConfig_OGL_get", "D_ovrGLConfig_OGL_get"));
  mixin(bindCode("new_ovrGLConfig", "D_new_ovrGLConfig"));
  mixin(bindCode("delete_ovrGLConfig", "D_delete_ovrGLConfig"));
  mixin(bindCode("ovrGLTextureData_Header_set", "D_ovrGLTextureData_Header_set"));
  mixin(bindCode("ovrGLTextureData_Header_get", "D_ovrGLTextureData_Header_get"));
  mixin(bindCode("ovrGLTextureData_TexId_set", "D_ovrGLTextureData_TexId_set"));
  mixin(bindCode("ovrGLTextureData_TexId_get", "D_ovrGLTextureData_TexId_get"));
  mixin(bindCode("new_ovrGLTextureData", "D_new_ovrGLTextureData"));
  mixin(bindCode("delete_ovrGLTextureData", "D_delete_ovrGLTextureData"));
  mixin(bindCode("ovrGLTexture_Texture_set", "D_ovrGLTexture_Texture_set"));
  mixin(bindCode("ovrGLTexture_Texture_get", "D_ovrGLTexture_Texture_get"));
  mixin(bindCode("ovrGLTexture_OGL_set", "D_ovrGLTexture_OGL_set"));
  mixin(bindCode("ovrGLTexture_OGL_get", "D_ovrGLTexture_OGL_get"));
  mixin(bindCode("new_ovrGLTexture", "D_new_ovrGLTexture"));
  mixin(bindCode("delete_ovrGLTexture", "D_delete_ovrGLTexture"));
}

//#if !defined(SWIG_D_NO_EXCEPTION_HELPER)
extern(C) void function(
  SwigExceptionCallback exceptionCallback,
  SwigExceptionCallback illegalArgumentCallback,
  SwigExceptionCallback illegalElementCallback,
  SwigExceptionCallback ioCallback,
  SwigExceptionCallback noSuchElementCallback) swigRegisterExceptionCallbacksovr;
//#endif // SWIG_D_NO_EXCEPTION_HELPER

//#if !defined(SWIG_D_NO_STRING_HELPER)
extern(C) void function(SwigStringCallback callback) swigRegisterStringCallbackovr;
//#endif // SWIG_D_NO_STRING_HELPER


mixin template SwigOperatorDefinitions() {
  public override bool opEquals(Object o) {
    if (auto rhs = cast(typeof(this))o) {
      if (swigCPtr == rhs.swigCPtr) return true;
      static if (is(typeof(swigOpEquals(rhs)))) {
        return swigOpEquals(rhs);
      } else {
        return false; 
      }
    }
    return super.opEquals(o);
  }


}


private class SwigExceptionHelper {
  static this() {
	// The D1/Tango version maps C++ exceptions to multiple exception types.
    swigRegisterExceptionCallbacksovr(
      &setException,
      &setException,
      &setException,
      &setException,
      &setException
    );
  }

  static void setException(const char* message) {
    auto exception = new object.Exception(std.conv.to!string(message).idup);
    exception.next = SwigPendingException.retrieve();
    SwigPendingException.set(exception);
  }
}

package struct SwigPendingException {
public:
  static this() {
    m_sPendingCount = 0;
    m_sPendingException = null;
  }

  static bool isPending() {
    bool pending = false;
    if (m_sPendingCount > 0) {
      if (m_sPendingException !is null) {
        pending = true;
      }
    }
    return pending;
  }

  static void set(object.Exception e) {
    if (m_sPendingException !is null) {
      throw new object.Exception("FATAL: An earlier pending exception from C/C++ code " ~
        "was missed and thus not thrown (" ~ m_sPendingException.classinfo.name ~
        ": " ~ m_sPendingException.msg ~ ")!", e);
    }

    m_sPendingException = e;
    synchronized {
      ++m_sPendingCount;
    }
  }

  static object.Exception retrieve() {
    object.Exception e = null;
    if (m_sPendingCount > 0) {
      if (m_sPendingException !is null) {
        e = m_sPendingException;
        m_sPendingException = null;
        synchronized {
          --m_sPendingCount;
        }
      }
    }
    return e;
  }

private:
  // The pending exception counter is stored thread-global.
  static shared int m_sPendingCount;

  // The reference to the pending exception (if any) is stored thread-local.
  static object.Exception m_sPendingException;
}
alias void function(const char* message) SwigExceptionCallback;


private class SwigStringHelper {
  static this() {
    swigRegisterStringCallbackovr(&createString);
  }

  static const(char)* createString(const(char*) cString) {
    // We are effectively dup'ing the string here.
    // TODO: Is this also correct for D2/Phobos?
    return std.string.toStringz(std.conv.to!string(cString));
  }
}
alias const(char)* function(const(char*) cString) SwigStringCallback;


template SwigExternC(T) if (is(typeof(*(T.init)) P == function)) {
  static if (is(typeof(*(T.init)) R == return)) {
    static if (is(typeof(*(T.init)) P == function)) {
      alias extern(C) R function(P) SwigExternC;
    }
  }
}

extern(C) void function(void* jarg1, int jarg2) ovrVector2i_x_set;
extern(C) int function(void* jarg1) ovrVector2i_x_get;
extern(C) void function(void* jarg1, int jarg2) ovrVector2i_y_set;
extern(C) int function(void* jarg1) ovrVector2i_y_get;
extern(C) void* function() new_ovrVector2i;
extern(C) void function(void* jarg1) delete_ovrVector2i;
extern(C) void function(void* jarg1, int jarg2) ovrSizei_w_set;
extern(C) int function(void* jarg1) ovrSizei_w_get;
extern(C) void function(void* jarg1, int jarg2) ovrSizei_h_set;
extern(C) int function(void* jarg1) ovrSizei_h_get;
extern(C) void* function() new_ovrSizei;
extern(C) void function(void* jarg1) delete_ovrSizei;
extern(C) void function(void* jarg1, void* jarg2) ovrRecti_Pos_set;
extern(C) void* function(void* jarg1) ovrRecti_Pos_get;
extern(C) void function(void* jarg1, void* jarg2) ovrRecti_Size_set;
extern(C) void* function(void* jarg1) ovrRecti_Size_get;
extern(C) void* function() new_ovrRecti;
extern(C) void function(void* jarg1) delete_ovrRecti;
extern(C) void function(void* jarg1, float jarg2) ovrQuatf_x_set;
extern(C) float function(void* jarg1) ovrQuatf_x_get;
extern(C) void function(void* jarg1, float jarg2) ovrQuatf_y_set;
extern(C) float function(void* jarg1) ovrQuatf_y_get;
extern(C) void function(void* jarg1, float jarg2) ovrQuatf_z_set;
extern(C) float function(void* jarg1) ovrQuatf_z_get;
extern(C) void function(void* jarg1, float jarg2) ovrQuatf_w_set;
extern(C) float function(void* jarg1) ovrQuatf_w_get;
extern(C) void* function() new_ovrQuatf;
extern(C) void function(void* jarg1) delete_ovrQuatf;
extern(C) void function(void* jarg1, float jarg2) ovrVector2f_x_set;
extern(C) float function(void* jarg1) ovrVector2f_x_get;
extern(C) void function(void* jarg1, float jarg2) ovrVector2f_y_set;
extern(C) float function(void* jarg1) ovrVector2f_y_get;
extern(C) void* function() new_ovrVector2f;
extern(C) void function(void* jarg1) delete_ovrVector2f;
extern(C) void function(void* jarg1, float jarg2) ovrVector3f_x_set;
extern(C) float function(void* jarg1) ovrVector3f_x_get;
extern(C) void function(void* jarg1, float jarg2) ovrVector3f_y_set;
extern(C) float function(void* jarg1) ovrVector3f_y_get;
extern(C) void function(void* jarg1, float jarg2) ovrVector3f_z_set;
extern(C) float function(void* jarg1) ovrVector3f_z_get;
extern(C) void* function() new_ovrVector3f;
extern(C) void function(void* jarg1) delete_ovrVector3f;
extern(C) void function(void* jarg1, void* jarg2) ovrMatrix4f_M_set;
extern(C) void* function(void* jarg1) ovrMatrix4f_M_get;
extern(C) void* function() new_ovrMatrix4f;
extern(C) void function(void* jarg1) delete_ovrMatrix4f;
extern(C) void function(void* jarg1, void* jarg2) ovrPosef_Orientation_set;
extern(C) void* function(void* jarg1) ovrPosef_Orientation_get;
extern(C) void function(void* jarg1, void* jarg2) ovrPosef_Position_set;
extern(C) void* function(void* jarg1) ovrPosef_Position_get;
extern(C) void* function() new_ovrPosef;
extern(C) void function(void* jarg1) delete_ovrPosef;
extern(C) void function(void* jarg1, void* jarg2) ovrPoseStatef_Pose_set;
extern(C) void* function(void* jarg1) ovrPoseStatef_Pose_get;
extern(C) void function(void* jarg1, void* jarg2) ovrPoseStatef_AngularVelocity_set;
extern(C) void* function(void* jarg1) ovrPoseStatef_AngularVelocity_get;
extern(C) void function(void* jarg1, void* jarg2) ovrPoseStatef_LinearVelocity_set;
extern(C) void* function(void* jarg1) ovrPoseStatef_LinearVelocity_get;
extern(C) void function(void* jarg1, void* jarg2) ovrPoseStatef_AngularAcceleration_set;
extern(C) void* function(void* jarg1) ovrPoseStatef_AngularAcceleration_get;
extern(C) void function(void* jarg1, void* jarg2) ovrPoseStatef_LinearAcceleration_set;
extern(C) void* function(void* jarg1) ovrPoseStatef_LinearAcceleration_get;
extern(C) void function(void* jarg1, double jarg2) ovrPoseStatef_TimeInSeconds_set;
extern(C) double function(void* jarg1) ovrPoseStatef_TimeInSeconds_get;
extern(C) void* function() new_ovrPoseStatef;
extern(C) void function(void* jarg1) delete_ovrPoseStatef;
extern(C) void function(void* jarg1, float jarg2) ovrFovPort_UpTan_set;
extern(C) float function(void* jarg1) ovrFovPort_UpTan_get;
extern(C) void function(void* jarg1, float jarg2) ovrFovPort_DownTan_set;
extern(C) float function(void* jarg1) ovrFovPort_DownTan_get;
extern(C) void function(void* jarg1, float jarg2) ovrFovPort_LeftTan_set;
extern(C) float function(void* jarg1) ovrFovPort_LeftTan_get;
extern(C) void function(void* jarg1, float jarg2) ovrFovPort_RightTan_set;
extern(C) float function(void* jarg1) ovrFovPort_RightTan_get;
extern(C) void* function() new_ovrFovPort;
extern(C) void function(void* jarg1) delete_ovrFovPort;
extern(C) void function(void* jarg1, void* jarg2) ovrHmdDesc_Handle_set;
extern(C) void* function(void* jarg1) ovrHmdDesc_Handle_get;
extern(C) void function(void* jarg1, int jarg2) ovrHmdDesc_Type_set;
extern(C) int function(void* jarg1) ovrHmdDesc_Type_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ovrHmdDesc_ProductName_set;
extern(C) const(char)* function(void* jarg1) ovrHmdDesc_ProductName_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ovrHmdDesc_Manufacturer_set;
extern(C) const(char)* function(void* jarg1) ovrHmdDesc_Manufacturer_get;
extern(C) void function(void* jarg1, uint jarg2) ovrHmdDesc_Caps_set;
extern(C) uint function(void* jarg1) ovrHmdDesc_Caps_get;
extern(C) void function(void* jarg1, uint jarg2) ovrHmdDesc_DistortionCaps_set;
extern(C) uint function(void* jarg1) ovrHmdDesc_DistortionCaps_get;
extern(C) void function(void* jarg1, void* jarg2) ovrHmdDesc_Resolution_set;
extern(C) void* function(void* jarg1) ovrHmdDesc_Resolution_get;
extern(C) void function(void* jarg1, void* jarg2) ovrHmdDesc_WindowsPos_set;
extern(C) void* function(void* jarg1) ovrHmdDesc_WindowsPos_get;
extern(C) void function(void* jarg1, void* jarg2) ovrHmdDesc_DefaultEyeFov_set;
extern(C) void* function(void* jarg1) ovrHmdDesc_DefaultEyeFov_get;
extern(C) void function(void* jarg1, void* jarg2) ovrHmdDesc_MaxEyeFov_set;
extern(C) void* function(void* jarg1) ovrHmdDesc_MaxEyeFov_get;
extern(C) void function(void* jarg1, void* jarg2) ovrHmdDesc_EyeRenderOrder_set;
extern(C) void* function(void* jarg1) ovrHmdDesc_EyeRenderOrder_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ovrHmdDesc_DisplayDeviceName_set;
extern(C) const(char)* function(void* jarg1) ovrHmdDesc_DisplayDeviceName_get;
extern(C) void function(void* jarg1, core.stdc.config.c_long jarg2) ovrHmdDesc_DisplayId_set;
extern(C) core.stdc.config.c_long function(void* jarg1) ovrHmdDesc_DisplayId_get;
extern(C) void* function() new_ovrHmdDesc;
extern(C) void function(void* jarg1) delete_ovrHmdDesc;
extern(C) void function(void* jarg1, void* jarg2) ovrSensorState_Predicted_set;
extern(C) void* function(void* jarg1) ovrSensorState_Predicted_get;
extern(C) void function(void* jarg1, void* jarg2) ovrSensorState_Recorded_set;
extern(C) void* function(void* jarg1) ovrSensorState_Recorded_get;
extern(C) void function(void* jarg1, float jarg2) ovrSensorState_Temperature_set;
extern(C) float function(void* jarg1) ovrSensorState_Temperature_get;
extern(C) void function(void* jarg1, uint jarg2) ovrSensorState_StatusFlags_set;
extern(C) uint function(void* jarg1) ovrSensorState_StatusFlags_get;
extern(C) void* function() new_ovrSensorState;
extern(C) void function(void* jarg1) delete_ovrSensorState;
extern(C) void function(void* jarg1, short jarg2) ovrSensorDesc_VendorId_set;
extern(C) short function(void* jarg1) ovrSensorDesc_VendorId_get;
extern(C) void function(void* jarg1, short jarg2) ovrSensorDesc_ProductId_set;
extern(C) short function(void* jarg1) ovrSensorDesc_ProductId_get;
extern(C) void function(void* jarg1, const(char)* jarg2) ovrSensorDesc_SerialNumber_set;
extern(C) const(char)* function(void* jarg1) ovrSensorDesc_SerialNumber_get;
extern(C) void* function() new_ovrSensorDesc;
extern(C) void function(void* jarg1) delete_ovrSensorDesc;
extern(C) void function(void* jarg1, float jarg2) ovrFrameTiming_DeltaSeconds_set;
extern(C) float function(void* jarg1) ovrFrameTiming_DeltaSeconds_get;
extern(C) void function(void* jarg1, double jarg2) ovrFrameTiming_ThisFrameSeconds_set;
extern(C) double function(void* jarg1) ovrFrameTiming_ThisFrameSeconds_get;
extern(C) void function(void* jarg1, double jarg2) ovrFrameTiming_TimewarpPointSeconds_set;
extern(C) double function(void* jarg1) ovrFrameTiming_TimewarpPointSeconds_get;
extern(C) void function(void* jarg1, double jarg2) ovrFrameTiming_NextFrameSeconds_set;
extern(C) double function(void* jarg1) ovrFrameTiming_NextFrameSeconds_get;
extern(C) void function(void* jarg1, double jarg2) ovrFrameTiming_ScanoutMidpointSeconds_set;
extern(C) double function(void* jarg1) ovrFrameTiming_ScanoutMidpointSeconds_get;
extern(C) void function(void* jarg1, void* jarg2) ovrFrameTiming_EyeScanoutSeconds_set;
extern(C) void* function(void* jarg1) ovrFrameTiming_EyeScanoutSeconds_get;
extern(C) void* function() new_ovrFrameTiming;
extern(C) void function(void* jarg1) delete_ovrFrameTiming;
extern(C) void function(void* jarg1, int jarg2) ovrEyeDesc_Eye_set;
extern(C) int function(void* jarg1) ovrEyeDesc_Eye_get;
extern(C) void function(void* jarg1, void* jarg2) ovrEyeDesc_TextureSize_set;
extern(C) void* function(void* jarg1) ovrEyeDesc_TextureSize_get;
extern(C) void function(void* jarg1, void* jarg2) ovrEyeDesc_RenderViewport_set;
extern(C) void* function(void* jarg1) ovrEyeDesc_RenderViewport_get;
extern(C) void function(void* jarg1, void* jarg2) ovrEyeDesc_Fov_set;
extern(C) void* function(void* jarg1) ovrEyeDesc_Fov_get;
extern(C) void* function() new_ovrEyeDesc;
extern(C) void function(void* jarg1) delete_ovrEyeDesc;
extern(C) void function(void* jarg1, void* jarg2) ovrEyeRenderDesc_Desc_set;
extern(C) void* function(void* jarg1) ovrEyeRenderDesc_Desc_get;
extern(C) void function(void* jarg1, void* jarg2) ovrEyeRenderDesc_DistortedViewport_set;
extern(C) void* function(void* jarg1) ovrEyeRenderDesc_DistortedViewport_get;
extern(C) void function(void* jarg1, void* jarg2) ovrEyeRenderDesc_PixelsPerTanAngleAtCenter_set;
extern(C) void* function(void* jarg1) ovrEyeRenderDesc_PixelsPerTanAngleAtCenter_get;
extern(C) void function(void* jarg1, void* jarg2) ovrEyeRenderDesc_ViewAdjust_set;
extern(C) void* function(void* jarg1) ovrEyeRenderDesc_ViewAdjust_get;
extern(C) void* function() new_ovrEyeRenderDesc;
extern(C) void function(void* jarg1) delete_ovrEyeRenderDesc;
extern(C) void function(void* jarg1, int jarg2) ovrRenderAPIConfigHeader_API_set;
extern(C) int function(void* jarg1) ovrRenderAPIConfigHeader_API_get;
extern(C) void function(void* jarg1, void* jarg2) ovrRenderAPIConfigHeader_RTSize_set;
extern(C) void* function(void* jarg1) ovrRenderAPIConfigHeader_RTSize_get;
extern(C) void function(void* jarg1, int jarg2) ovrRenderAPIConfigHeader_Multisample_set;
extern(C) int function(void* jarg1) ovrRenderAPIConfigHeader_Multisample_get;
extern(C) void* function() new_ovrRenderAPIConfigHeader;
extern(C) void function(void* jarg1) delete_ovrRenderAPIConfigHeader;
extern(C) void function(void* jarg1, void* jarg2) ovrRenderAPIConfig_Header_set;
extern(C) void* function(void* jarg1) ovrRenderAPIConfig_Header_get;
extern(C) void function(void* jarg1, void* jarg2) ovrRenderAPIConfig_PlatformData_set;
extern(C) void* function(void* jarg1) ovrRenderAPIConfig_PlatformData_get;
extern(C) void* function() new_ovrRenderAPIConfig;
extern(C) void function(void* jarg1) delete_ovrRenderAPIConfig;
extern(C) void function(void* jarg1, int jarg2) ovrTextureHeader_API_set;
extern(C) int function(void* jarg1) ovrTextureHeader_API_get;
extern(C) void function(void* jarg1, void* jarg2) ovrTextureHeader_TextureSize_set;
extern(C) void* function(void* jarg1) ovrTextureHeader_TextureSize_get;
extern(C) void function(void* jarg1, void* jarg2) ovrTextureHeader_RenderViewport_set;
extern(C) void* function(void* jarg1) ovrTextureHeader_RenderViewport_get;
extern(C) void* function() new_ovrTextureHeader;
extern(C) void function(void* jarg1) delete_ovrTextureHeader;
extern(C) void function(void* jarg1, void* jarg2) ovrTexture_Header_set;
extern(C) void* function(void* jarg1) ovrTexture_Header_get;
extern(C) void function(void* jarg1, void* jarg2) ovrTexture_PlatformData_set;
extern(C) void* function(void* jarg1) ovrTexture_PlatformData_get;
extern(C) void* function() new_ovrTexture;
extern(C) void function(void* jarg1) delete_ovrTexture;
extern(C) char function() ovr_Initialize;
extern(C) void function() ovr_Shutdown;
extern(C) int function() ovrHmd_Detect;
extern(C) void* function(int jarg1) ovrHmd_Create;
extern(C) void function(void* jarg1) ovrHmd_Destroy;
extern(C) void* function(int jarg1) ovrHmd_CreateDebug;
extern(C) const(char)* function(void* jarg1) ovrHmd_GetLastError;
extern(C) char function(void* jarg1, uint jarg2, uint jarg3) ovrHmd_StartSensor;
extern(C) void function(void* jarg1) ovrHmd_StopSensor;
extern(C) void function(void* jarg1) ovrHmd_ResetSensor;
extern(C) void* function(void* jarg1, double jarg2) ovrHmd_GetSensorState;
extern(C) char function(void* jarg1, void* jarg2) ovrHmd_GetSensorDesc;
extern(C) void function(void* jarg1, void* jarg2) ovrHmd_GetDesc;
extern(C) void* function(void* jarg1, int jarg2, void* jarg3, float jarg4) ovrHmd_GetFovTextureSize;
extern(C) char function(void* jarg1, void* jarg2, uint jarg3, uint jarg4, void* jarg5, void* jarg6) ovrHmd_ConfigureRendering;
extern(C) void* function(void* jarg1, uint jarg2) ovrHmd_BeginFrame;
extern(C) void function(void* jarg1) ovrHmd_EndFrame;
extern(C) void* function(void* jarg1, int jarg2) ovrHmd_BeginEyeRender;
extern(C) void function(void* jarg1, int jarg2, void* jarg3, void* jarg4) ovrHmd_EndEyeRender;
extern(C) void* function(void* jarg1, void* jarg2) ovrHmd_GetRenderDesc;
extern(C) void function(void* jarg1, void* jarg2) ovrDistortionVertex_Pos_set;
extern(C) void* function(void* jarg1) ovrDistortionVertex_Pos_get;
extern(C) void function(void* jarg1, float jarg2) ovrDistortionVertex_TimeWarpFactor_set;
extern(C) float function(void* jarg1) ovrDistortionVertex_TimeWarpFactor_get;
extern(C) void function(void* jarg1, float jarg2) ovrDistortionVertex_VignetteFactor_set;
extern(C) float function(void* jarg1) ovrDistortionVertex_VignetteFactor_get;
extern(C) void function(void* jarg1, void* jarg2) ovrDistortionVertex_TexR_set;
extern(C) void* function(void* jarg1) ovrDistortionVertex_TexR_get;
extern(C) void function(void* jarg1, void* jarg2) ovrDistortionVertex_TexG_set;
extern(C) void* function(void* jarg1) ovrDistortionVertex_TexG_get;
extern(C) void function(void* jarg1, void* jarg2) ovrDistortionVertex_TexB_set;
extern(C) void* function(void* jarg1) ovrDistortionVertex_TexB_get;
extern(C) void* function() new_ovrDistortionVertex;
extern(C) void function(void* jarg1) delete_ovrDistortionVertex;
extern(C) void function(void* jarg1, void* jarg2) ovrDistortionMesh_pVertexData_set;
extern(C) void* function(void* jarg1) ovrDistortionMesh_pVertexData_get;
extern(C) void function(void* jarg1, void* jarg2) ovrDistortionMesh_pIndexData_set;
extern(C) void* function(void* jarg1) ovrDistortionMesh_pIndexData_get;
extern(C) void function(void* jarg1, uint jarg2) ovrDistortionMesh_VertexCount_set;
extern(C) uint function(void* jarg1) ovrDistortionMesh_VertexCount_get;
extern(C) void function(void* jarg1, uint jarg2) ovrDistortionMesh_IndexCount_set;
extern(C) uint function(void* jarg1) ovrDistortionMesh_IndexCount_get;
extern(C) void* function() new_ovrDistortionMesh;
extern(C) void function(void* jarg1) delete_ovrDistortionMesh;
extern(C) char function(void* jarg1, void* jarg2, uint jarg3, void* jarg4, void* jarg5) ovrHmd_CreateDistortionMesh;
extern(C) void function(void* jarg1) ovrHmd_DestroyDistortionMesh;
extern(C) void function(void* jarg1, void* jarg2, uint jarg3, void* jarg4) ovrHmd_GetRenderScaleAndOffset;
extern(C) void* function(void* jarg1, uint jarg2) ovrHmd_GetFrameTiming;
extern(C) void* function(void* jarg1, uint jarg2) ovrHmd_BeginFrameTiming;
extern(C) void function(void* jarg1) ovrHmd_EndFrameTiming;
extern(C) void function(void* jarg1, uint jarg2, char jarg3) ovrHmd_ResetFrameTiming;
extern(C) void* function(void* jarg1, int jarg2) ovrHmd_GetEyePose;
extern(C) void function(void* jarg1, int jarg2, void* jarg3, void* jarg4) ovrHmd_GetEyeTimewarpMatrices;
extern(C) void* function(void* jarg1, float jarg2, float jarg3, char jarg4) ovrMatrix4f_Projection;
extern(C) void* function(void* jarg1, void* jarg2, float jarg3, float jarg4) ovrMatrix4f_OrthoSubProjection;
extern(C) double function() ovr_GetTimeInSeconds;
extern(C) double function(double jarg1) ovr_WaitTillTime;
extern(C) char function(void* jarg1, void* jarg2) ovrHmd_ProcessLatencyTest;
extern(C) const(char)* function(void* jarg1) ovrHmd_GetLatencyTestResult;
extern(C) double function(void* jarg1) ovrHmd_GetMeasuredLatencyTest2;
extern(C) const(char)* function() OVR_KEY_USER_get;
extern(C) const(char)* function() OVR_KEY_NAME_get;
extern(C) const(char)* function() OVR_KEY_GENDER_get;
extern(C) const(char)* function() OVR_KEY_PLAYER_HEIGHT_get;
extern(C) const(char)* function() OVR_KEY_EYE_HEIGHT_get;
extern(C) const(char)* function() OVR_KEY_IPD_get;
extern(C) const(char)* function() OVR_KEY_NECK_TO_EYE_HORIZONTAL_get;
extern(C) const(char)* function() OVR_KEY_NECK_TO_EYE_VERTICAL_get;
extern(C) const(char)* function() OVR_DEFAULT_GENDER_get;
extern(C) double function() OVR_DEFAULT_PLAYER_HEIGHT_get;
extern(C) double function() OVR_DEFAULT_EYE_HEIGHT_get;
extern(C) double function() OVR_DEFAULT_IPD_get;
extern(C) double function() OVR_DEFAULT_NECK_TO_EYE_HORIZONTAL_get;
extern(C) double function() OVR_DEFAULT_NECK_TO_EYE_VERTICAL_get;
extern(C) float function(void* jarg1, const(char)* jarg2, float jarg3) ovrHmd_GetFloat;
extern(C) char function(void* jarg1, const(char)* jarg2, float jarg3) ovrHmd_SetFloat;
extern(C) uint function(void* jarg1, const(char)* jarg2, void* jarg3, uint jarg4) ovrHmd_GetFloatArray;
extern(C) char function(void* jarg1, const(char)* jarg2, void* jarg3, uint jarg4) ovrHmd_SetFloatArray;
extern(C) const(char)* function(void* jarg1, const(char)* jarg2, const(char)* jarg3) ovrHmd_GetString;
extern(C) uint function(void* jarg1, const(char)* jarg2) ovrHmd_GetArraySize;
extern(C) void function(void* jarg1, void* jarg2) ovrGLConfigData_Header_set;
extern(C) void* function(void* jarg1) ovrGLConfigData_Header_get;
extern(C) void function(void* jarg1, void* jarg2) ovrGLConfigData_Window_set;
extern(C) void* function(void* jarg1) ovrGLConfigData_Window_get;
extern(C) void function(void* jarg1, void* jarg2) ovrGLConfigData_WglContext_set;
extern(C) void* function(void* jarg1) ovrGLConfigData_WglContext_get;
extern(C) void function(void* jarg1, void* jarg2) ovrGLConfigData_GdiDc_set;
extern(C) void* function(void* jarg1) ovrGLConfigData_GdiDc_get;
extern(C) void* function() new_ovrGLConfigData;
extern(C) void function(void* jarg1) delete_ovrGLConfigData;
extern(C) void function(void* jarg1, void* jarg2) ovrGLConfig_Config_set;
extern(C) void* function(void* jarg1) ovrGLConfig_Config_get;
extern(C) void function(void* jarg1, void* jarg2) ovrGLConfig_OGL_set;
extern(C) void* function(void* jarg1) ovrGLConfig_OGL_get;
extern(C) void* function() new_ovrGLConfig;
extern(C) void function(void* jarg1) delete_ovrGLConfig;
extern(C) void function(void* jarg1, void* jarg2) ovrGLTextureData_Header_set;
extern(C) void* function(void* jarg1) ovrGLTextureData_Header_get;
extern(C) void function(void* jarg1, void* jarg2) ovrGLTextureData_TexId_set;
extern(C) void* function(void* jarg1) ovrGLTextureData_TexId_get;
extern(C) void* function() new_ovrGLTextureData;
extern(C) void function(void* jarg1) delete_ovrGLTextureData;
extern(C) void function(void* jarg1, void* jarg2) ovrGLTexture_Texture_set;
extern(C) void* function(void* jarg1) ovrGLTexture_Texture_get;
extern(C) void function(void* jarg1, void* jarg2) ovrGLTexture_OGL_set;
extern(C) void* function(void* jarg1) ovrGLTexture_OGL_get;
extern(C) void* function() new_ovrGLTexture;
extern(C) void function(void* jarg1) delete_ovrGLTexture;

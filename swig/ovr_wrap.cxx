/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGD


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>

/* Contract support. */
#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_DSetPendingException(SWIG_DException, msg); return nullreturn; } else


// Support for throwing D exceptions from C/C++.
typedef enum {
  SWIG_DException = 0,
  SWIG_DIllegalArgumentException,
  SWIG_DIllegalElementException,
  SWIG_DIOException,
  SWIG_DNoSuchElementException,
} SWIG_DExceptionCodes;

typedef void (* SWIG_DExceptionCallback_t)(const char *);

typedef struct {
  SWIG_DExceptionCodes code;
  SWIG_DExceptionCallback_t callback;
} SWIG_DException_t;

static SWIG_DException_t SWIG_d_exceptions[] = {
  { SWIG_DException, NULL },
  { SWIG_DIllegalArgumentException, NULL },
  { SWIG_DIllegalElementException, NULL },
  { SWIG_DIOException, NULL },
  { SWIG_DNoSuchElementException, NULL }
};

static void SWIGUNUSED SWIG_DSetPendingException(SWIG_DExceptionCodes code, const char *msg) {
  if ((size_t)code < sizeof(SWIG_d_exceptions)/sizeof(SWIG_DException_t)) {
    SWIG_d_exceptions[code].callback(msg);
  } else {
    SWIG_d_exceptions[SWIG_DException].callback(msg);
  }
}

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGRegisterExceptionCallbacks_ovr(
  SWIG_DExceptionCallback_t exceptionCallback,
  SWIG_DExceptionCallback_t illegalArgumentCallback,
  SWIG_DExceptionCallback_t illegalElementCallback,
  SWIG_DExceptionCallback_t ioCallback,
  SWIG_DExceptionCallback_t noSuchElementCallback) {
  SWIG_d_exceptions[SWIG_DException].callback = exceptionCallback;
  SWIG_d_exceptions[SWIG_DIllegalArgumentException].callback = illegalArgumentCallback;
  SWIG_d_exceptions[SWIG_DIllegalElementException].callback = illegalElementCallback;
  SWIG_d_exceptions[SWIG_DIOException].callback = ioCallback;
  SWIG_d_exceptions[SWIG_DNoSuchElementException].callback = noSuchElementCallback;
}


// Callback for returning strings to D without leaking memory.
typedef char * (* SWIG_DStringHelperCallback)(const char *);
static SWIG_DStringHelperCallback SWIG_d_string_callback = NULL;

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGRegisterStringCallback_ovr(SWIG_DStringHelperCallback callback) {
  SWIG_d_string_callback = callback;
}


#include "Kernel/OVR_Types.h"
#include "Kernel/OVR_Allocator.h"
#include "Kernel/OVR_ContainerAllocator.h"
#include "Kernel/OVR_Array.h"
#include "Kernel/OVR_Alg.h"
#include "Kernel/OVR_UTF8Util.h"
#include "Kernel/OVR_Log.h"
#include "Kernel/OVR_Allocator.h"
#include "Kernel/OVR_System.h"
#include "Kernel/OVR_RefCount.h"
#include "Kernel/OVR_Std.h"
#include "Kernel/OVR_Math.h"
#include "Kernel/OVR_Atomic.h"
#include "Kernel/OVR_String.h"
#include "OVR_DeviceConstants.h"
#include "OVR_DeviceHandle.h"
#include "OVR_DeviceMessages.h"
#include "OVR_SensorFusion.h"
#include "OVR_Profile.h"
#include "OVR_HIDDeviceBase.h"
#include "OVR_Device.h"
#include "Util/Util_LatencyTest.h"
#include "Util/Util_Render_Stereo.h"
#include "OVR_JSON.h"
#include "OVR_DeviceImpl.h"

using namespace OVR;

Matrix4f Matrix4f::IdentityValue = Matrix4f();


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * D_new_Log__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  OVR::Log *result = 0 ;
  
  arg1 = (unsigned int)jarg1;
  result = (OVR::Log *)new OVR::Log(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Log__SWIG_1() {
  void * jresult ;
  OVR::Log *result = 0 ;
  
  result = (OVR::Log *)new OVR::Log();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Log(void * jarg1) {
  OVR::Log *arg1 = (OVR::Log *) 0 ;
  
  arg1 = (OVR::Log *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_Log_GetLoggingMask(void * jarg1) {
  unsigned int jresult ;
  OVR::Log *arg1 = (OVR::Log *) 0 ;
  unsigned int result;
  
  arg1 = (OVR::Log *)jarg1;
  result = (unsigned int)((OVR::Log const *)arg1)->GetLoggingMask();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Log_SetLoggingMask(void * jarg1, unsigned int jarg2) {
  OVR::Log *arg1 = (OVR::Log *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (OVR::Log *)jarg1;
  arg2 = (unsigned int)jarg2;
  (arg1)->SetLoggingMask(arg2);
}


SWIGEXPORT void D_Log_LogMessageVarg(void * jarg1, int jarg2, char * jarg3, void * jarg4) {
  OVR::Log *arg1 = (OVR::Log *) 0 ;
  OVR::LogMessageType arg2 ;
  char *arg3 = (char *) 0 ;
  va_list arg4 ;
  va_list *argp4 ;
  
  arg1 = (OVR::Log *)jarg1;
  arg2 = (OVR::LogMessageType)jarg2; 
  arg3 = (char *)jarg3; 
  argp4 = (va_list *)jarg4;
  if (!argp4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null va_list");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->LogMessageVarg(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void D_Log_LogMessage(void * jarg1, int jarg2, char * jarg3) {
  OVR::Log *arg1 = (OVR::Log *) 0 ;
  OVR::LogMessageType arg2 ;
  char *arg3 = (char *) 0 ;
  void *arg4 = 0 ;
  
  arg1 = (OVR::Log *)jarg1;
  arg2 = (OVR::LogMessageType)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->LogMessage(arg2,(char const *)arg3,arg4);
}


SWIGEXPORT void D_Log_FormatLog(char * jarg1, unsigned int jarg2, int jarg3, char * jarg4, void * jarg5) {
  char *arg1 = (char *) 0 ;
  unsigned int arg2 ;
  OVR::LogMessageType arg3 ;
  char *arg4 = (char *) 0 ;
  va_list arg5 ;
  va_list *argp5 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (unsigned int)jarg2;
  arg3 = (OVR::LogMessageType)jarg3; 
  arg4 = (char *)jarg4; 
  argp5 = (va_list *)jarg5;
  if (!argp5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null va_list");
    return ;
  }
  arg5 = *argp5; 
  OVR::Log::FormatLog(arg1,arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void D_Log_DefaultLogOutput(char * jarg1, unsigned int jarg2) {
  char *arg1 = (char *) 0 ;
  bool arg2 ;
  
  arg1 = (char *)jarg1; 
  arg2 = jarg2 ? true : false;
  OVR::Log::DefaultLogOutput((char const *)arg1,arg2);
}


SWIGEXPORT unsigned int D_Log_IsDebugMessage(int jarg1) {
  unsigned int jresult ;
  OVR::LogMessageType arg1 ;
  bool result;
  
  arg1 = (OVR::LogMessageType)jarg1; 
  result = (bool)OVR::Log::IsDebugMessage(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Log_SetGlobalLog(void * jarg1) {
  OVR::Log *arg1 = (OVR::Log *) 0 ;
  
  arg1 = (OVR::Log *)jarg1;
  OVR::Log::SetGlobalLog(arg1);
}


SWIGEXPORT void * D_Log_GetGlobalLog() {
  void * jresult ;
  OVR::Log *result = 0 ;
  
  result = (OVR::Log *)OVR::Log::GetGlobalLog();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Log_GetDefaultLog() {
  void * jresult ;
  OVR::Log *result = 0 ;
  
  result = (OVR::Log *)OVR::Log::GetDefaultLog();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Log_ConfigureDefaultLog__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  OVR::Log *result = 0 ;
  
  arg1 = (unsigned int)jarg1;
  result = (OVR::Log *)OVR::Log::ConfigureDefaultLog(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Log_ConfigureDefaultLog__SWIG_1() {
  void * jresult ;
  OVR::Log *result = 0 ;
  
  result = (OVR::Log *)OVR::Log::ConfigureDefaultLog();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_LogText(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  OVR::LogText((char const *)arg1,arg2);
}


SWIGEXPORT void D_LogError(char * jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  arg1 = (char *)jarg1; 
  OVR::LogError((char const *)arg1,arg2);
}


SWIGEXPORT void * D_Allocator_Alloc(void * jarg1, size_t jarg2) {
  void * jresult ;
  OVR::Allocator *arg1 = (OVR::Allocator *) 0 ;
  OVR::UPInt arg2 ;
  void *result = 0 ;
  
  arg1 = (OVR::Allocator *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  result = (void *)(arg1)->Alloc(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Allocator_AllocDebug(void * jarg1, size_t jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  OVR::Allocator *arg1 = (OVR::Allocator *) 0 ;
  OVR::UPInt arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  void *result = 0 ;
  
  arg1 = (OVR::Allocator *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4;
  result = (void *)(arg1)->AllocDebug(arg2,(char const *)arg3,arg4);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Allocator_Realloc(void * jarg1, void * jarg2, size_t jarg3) {
  void * jresult ;
  OVR::Allocator *arg1 = (OVR::Allocator *) 0 ;
  void *arg2 = (void *) 0 ;
  OVR::UPInt arg3 ;
  void *result = 0 ;
  
  arg1 = (OVR::Allocator *)jarg1;
  arg2 = (void *)jarg2;
  arg3 = (OVR::UPInt)jarg3;
  result = (void *)(arg1)->Realloc(arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Allocator_Free(void * jarg1, void * jarg2) {
  OVR::Allocator *arg1 = (OVR::Allocator *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (OVR::Allocator *)jarg1;
  arg2 = (void *)jarg2;
  (arg1)->Free(arg2);
}


SWIGEXPORT void * D_Allocator_AllocAligned(void * jarg1, size_t jarg2, size_t jarg3) {
  void * jresult ;
  OVR::Allocator *arg1 = (OVR::Allocator *) 0 ;
  OVR::UPInt arg2 ;
  OVR::UPInt arg3 ;
  void *result = 0 ;
  
  arg1 = (OVR::Allocator *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  arg3 = (OVR::UPInt)jarg3;
  result = (void *)(arg1)->AllocAligned(arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Allocator_FreeAligned(void * jarg1, void * jarg2) {
  OVR::Allocator *arg1 = (OVR::Allocator *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (OVR::Allocator *)jarg1;
  arg2 = (void *)jarg2;
  (arg1)->FreeAligned(arg2);
}


SWIGEXPORT void * D_Allocator_GetInstance() {
  void * jresult ;
  OVR::Allocator *result = 0 ;
  
  result = (OVR::Allocator *)OVR::Allocator::GetInstance();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Allocator_setInstance(void * jarg1) {
  OVR::Allocator *arg1 = (OVR::Allocator *) 0 ;
  
  arg1 = (OVR::Allocator *)jarg1;
  OVR::Allocator::setInstance(arg1);
}


SWIGEXPORT void D_delete_Allocator(void * jarg1) {
  OVR::Allocator *arg1 = (OVR::Allocator *) 0 ;
  
  arg1 = (OVR::Allocator *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_DefaultAllocator_Alloc(void * jarg1, size_t jarg2) {
  void * jresult ;
  OVR::DefaultAllocator *arg1 = (OVR::DefaultAllocator *) 0 ;
  OVR::UPInt arg2 ;
  void *result = 0 ;
  
  arg1 = (OVR::DefaultAllocator *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  result = (void *)(arg1)->Alloc(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_DefaultAllocator_AllocDebug(void * jarg1, size_t jarg2, char * jarg3, unsigned int jarg4) {
  void * jresult ;
  OVR::DefaultAllocator *arg1 = (OVR::DefaultAllocator *) 0 ;
  OVR::UPInt arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  void *result = 0 ;
  
  arg1 = (OVR::DefaultAllocator *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4;
  result = (void *)(arg1)->AllocDebug(arg2,(char const *)arg3,arg4);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_DefaultAllocator_Realloc(void * jarg1, void * jarg2, size_t jarg3) {
  void * jresult ;
  OVR::DefaultAllocator *arg1 = (OVR::DefaultAllocator *) 0 ;
  void *arg2 = (void *) 0 ;
  OVR::UPInt arg3 ;
  void *result = 0 ;
  
  arg1 = (OVR::DefaultAllocator *)jarg1;
  arg2 = (void *)jarg2;
  arg3 = (OVR::UPInt)jarg3;
  result = (void *)(arg1)->Realloc(arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_DefaultAllocator_Free(void * jarg1, void * jarg2) {
  OVR::DefaultAllocator *arg1 = (OVR::DefaultAllocator *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (OVR::DefaultAllocator *)jarg1;
  arg2 = (void *)jarg2;
  (arg1)->Free(arg2);
}


SWIGEXPORT void * D_new_DefaultAllocator() {
  void * jresult ;
  OVR::DefaultAllocator *result = 0 ;
  
  result = (OVR::DefaultAllocator *)new OVR::DefaultAllocator();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_DefaultAllocator(void * jarg1) {
  OVR::DefaultAllocator *arg1 = (OVR::DefaultAllocator *) 0 ;
  
  arg1 = (OVR::DefaultAllocator *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_NewOverrideBase() {
  void * jresult ;
  OVR::NewOverrideBase *result = 0 ;
  
  result = (OVR::NewOverrideBase *)new OVR::NewOverrideBase();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_NewOverrideBase(void * jarg1) {
  OVR::NewOverrideBase *arg1 = (OVR::NewOverrideBase *) 0 ;
  
  arg1 = (OVR::NewOverrideBase *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_System__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::Log *arg1 = (OVR::Log *) 0 ;
  OVR::Allocator *arg2 = (OVR::Allocator *) 0 ;
  OVR::System *result = 0 ;
  
  arg1 = (OVR::Log *)jarg1;
  arg2 = (OVR::Allocator *)jarg2;
  result = (OVR::System *)new OVR::System(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_System__SWIG_1(void * jarg1) {
  void * jresult ;
  OVR::Log *arg1 = (OVR::Log *) 0 ;
  OVR::System *result = 0 ;
  
  arg1 = (OVR::Log *)jarg1;
  result = (OVR::System *)new OVR::System(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_System__SWIG_2() {
  void * jresult ;
  OVR::System *result = 0 ;
  
  result = (OVR::System *)new OVR::System();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_System(void * jarg1) {
  OVR::System *arg1 = (OVR::System *) 0 ;
  
  arg1 = (OVR::System *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_System_IsInitialized() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)OVR::System::IsInitialized();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_System_Init__SWIG_0(void * jarg1, void * jarg2) {
  OVR::Log *arg1 = (OVR::Log *) 0 ;
  OVR::Allocator *arg2 = (OVR::Allocator *) 0 ;
  
  arg1 = (OVR::Log *)jarg1;
  arg2 = (OVR::Allocator *)jarg2;
  OVR::System::Init(arg1,arg2);
}


SWIGEXPORT void D_System_Init__SWIG_1(void * jarg1) {
  OVR::Log *arg1 = (OVR::Log *) 0 ;
  
  arg1 = (OVR::Log *)jarg1;
  OVR::System::Init(arg1);
}


SWIGEXPORT void D_System_Init__SWIG_2() {
  OVR::System::Init();
}


SWIGEXPORT void D_System_Destroy() {
  OVR::System::Destroy();
}


SWIGEXPORT void D_WorldAxes_XAxis_set(void * jarg1, int jarg2) {
  OVR::WorldAxes *arg1 = (OVR::WorldAxes *) 0 ;
  OVR::AxisDirection arg2 ;
  
  arg1 = (OVR::WorldAxes *)jarg1;
  arg2 = (OVR::AxisDirection)jarg2; 
  if (arg1) (arg1)->XAxis = arg2;
}


SWIGEXPORT int D_WorldAxes_XAxis_get(void * jarg1) {
  int jresult ;
  OVR::WorldAxes *arg1 = (OVR::WorldAxes *) 0 ;
  OVR::AxisDirection result;
  
  arg1 = (OVR::WorldAxes *)jarg1;
  result = (OVR::AxisDirection) ((arg1)->XAxis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_WorldAxes_YAxis_set(void * jarg1, int jarg2) {
  OVR::WorldAxes *arg1 = (OVR::WorldAxes *) 0 ;
  OVR::AxisDirection arg2 ;
  
  arg1 = (OVR::WorldAxes *)jarg1;
  arg2 = (OVR::AxisDirection)jarg2; 
  if (arg1) (arg1)->YAxis = arg2;
}


SWIGEXPORT int D_WorldAxes_YAxis_get(void * jarg1) {
  int jresult ;
  OVR::WorldAxes *arg1 = (OVR::WorldAxes *) 0 ;
  OVR::AxisDirection result;
  
  arg1 = (OVR::WorldAxes *)jarg1;
  result = (OVR::AxisDirection) ((arg1)->YAxis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_WorldAxes_ZAxis_set(void * jarg1, int jarg2) {
  OVR::WorldAxes *arg1 = (OVR::WorldAxes *) 0 ;
  OVR::AxisDirection arg2 ;
  
  arg1 = (OVR::WorldAxes *)jarg1;
  arg2 = (OVR::AxisDirection)jarg2; 
  if (arg1) (arg1)->ZAxis = arg2;
}


SWIGEXPORT int D_WorldAxes_ZAxis_get(void * jarg1) {
  int jresult ;
  OVR::WorldAxes *arg1 = (OVR::WorldAxes *) 0 ;
  OVR::AxisDirection result;
  
  arg1 = (OVR::WorldAxes *)jarg1;
  result = (OVR::AxisDirection) ((arg1)->ZAxis);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * D_new_WorldAxes(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  OVR::AxisDirection arg1 ;
  OVR::AxisDirection arg2 ;
  OVR::AxisDirection arg3 ;
  OVR::WorldAxes *result = 0 ;
  
  arg1 = (OVR::AxisDirection)jarg1; 
  arg2 = (OVR::AxisDirection)jarg2; 
  arg3 = (OVR::AxisDirection)jarg3; 
  result = (OVR::WorldAxes *)new OVR::WorldAxes(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_WorldAxes(void * jarg1) {
  OVR::WorldAxes *arg1 = (OVR::WorldAxes *) 0 ;
  
  arg1 = (OVR::WorldAxes *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_Matrix4f_M_set(void * jarg1, void * jarg2) {
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  float (*arg2)[4] ;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  arg2 = (float (*)[4])jarg2; 
  {
    float (*inp)[4] = (float (*)[4])(arg2);
    float (*dest)[4] = (float (*)[4])(arg1->M);
    size_t ii = 0;
    for (; ii < 4; ++ii) {
      float *ip = inp[ii];
      float *dp = dest[ii];
      size_t jj = 0;
      for (; jj < 4; ++jj) dp[jj] = ip[jj];
    }
  }
}


SWIGEXPORT void * D_Matrix4f_M_get(void * jarg1) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  float (*result)[4] = 0 ;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  result = (float (*)[4])(float (*)[4]) ((arg1)->M);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * D_new_Matrix4f__SWIG_0(int jarg1) {
  void * jresult ;
  OVR::Matrix4f::NoInitType arg1 ;
  OVR::Matrix4f *result = 0 ;
  
  arg1 = (OVR::Matrix4f::NoInitType)jarg1; 
  result = (OVR::Matrix4f *)new OVR::Matrix4f(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Matrix4f__SWIG_1() {
  void * jresult ;
  OVR::Matrix4f *result = 0 ;
  
  result = (OVR::Matrix4f *)new OVR::Matrix4f();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Matrix4f__SWIG_2(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14, float jarg15, float jarg16) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  float arg10 ;
  float arg11 ;
  float arg12 ;
  float arg13 ;
  float arg14 ;
  float arg15 ;
  float arg16 ;
  OVR::Matrix4f *result = 0 ;
  
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (float)jarg6;
  arg7 = (float)jarg7;
  arg8 = (float)jarg8;
  arg9 = (float)jarg9;
  arg10 = (float)jarg10;
  arg11 = (float)jarg11;
  arg12 = (float)jarg12;
  arg13 = (float)jarg13;
  arg14 = (float)jarg14;
  arg15 = (float)jarg15;
  arg16 = (float)jarg16;
  result = (OVR::Matrix4f *)new OVR::Matrix4f(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13,arg14,arg15,arg16);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Matrix4f__SWIG_3(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  float arg7 ;
  float arg8 ;
  float arg9 ;
  OVR::Matrix4f *result = 0 ;
  
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (float)jarg6;
  arg7 = (float)jarg7;
  arg8 = (float)jarg8;
  arg9 = (float)jarg9;
  result = (OVR::Matrix4f *)new OVR::Matrix4f(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Matrix4f_ToString(void * jarg1, char * jarg2, size_t jarg3) {
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  char *arg2 = (char *) 0 ;
  OVR::UPInt arg3 ;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = (OVR::UPInt)jarg3;
  (arg1)->ToString(arg2,arg3);
}


SWIGEXPORT void * D_Matrix4f_FromString(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  OVR::Matrix4f result;
  
  arg1 = (char *)jarg1; 
  result = OVR::Matrix4f::FromString((char const *)arg1);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_Identity() {
  void * jresult ;
  OVR::Matrix4f *result = 0 ;
  
  result = (OVR::Matrix4f *) &OVR::Matrix4f::Identity();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Matrix4f_SetIdentity(void * jarg1) {
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  (arg1)->SetIdentity();
}


SWIGEXPORT void * D_Matrix4f_swigOpAdd(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  OVR::Matrix4f *arg2 = 0 ;
  OVR::Matrix4f result;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  arg2 = (OVR::Matrix4f *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Matrix4f const & type is null");
    return 0;
  } 
  result = ((OVR::Matrix4f const *)arg1)->operator +((OVR::Matrix4f const &)*arg2);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_swigOpAddAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  OVR::Matrix4f *arg2 = 0 ;
  OVR::Matrix4f *result = 0 ;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  arg2 = (OVR::Matrix4f *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Matrix4f const & type is null");
    return 0;
  } 
  result = (OVR::Matrix4f *) &(arg1)->operator +=((OVR::Matrix4f const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_swigOpSub(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  OVR::Matrix4f *arg2 = 0 ;
  OVR::Matrix4f result;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  arg2 = (OVR::Matrix4f *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Matrix4f const & type is null");
    return 0;
  } 
  result = ((OVR::Matrix4f const *)arg1)->operator -((OVR::Matrix4f const &)*arg2);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_swigOpSubAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  OVR::Matrix4f *arg2 = 0 ;
  OVR::Matrix4f *result = 0 ;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  arg2 = (OVR::Matrix4f *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Matrix4f const & type is null");
    return 0;
  } 
  result = (OVR::Matrix4f *) &(arg1)->operator -=((OVR::Matrix4f const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_Multiply(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  OVR::Matrix4f *arg2 = 0 ;
  OVR::Matrix4f *arg3 = 0 ;
  OVR::Matrix4f *result = 0 ;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  arg2 = (OVR::Matrix4f *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Matrix4f const & type is null");
    return 0;
  } 
  arg3 = (OVR::Matrix4f *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Matrix4f const & type is null");
    return 0;
  } 
  result = (OVR::Matrix4f *) &OVR::Matrix4f::Multiply(arg1,(OVR::Matrix4f const &)*arg2,(OVR::Matrix4f const &)*arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_swigOpMul__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  OVR::Matrix4f *arg2 = 0 ;
  OVR::Matrix4f result;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  arg2 = (OVR::Matrix4f *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Matrix4f const & type is null");
    return 0;
  } 
  result = ((OVR::Matrix4f const *)arg1)->operator *((OVR::Matrix4f const &)*arg2);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_swigOpMulAssign__SWIG_0(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  OVR::Matrix4f *arg2 = 0 ;
  OVR::Matrix4f *result = 0 ;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  arg2 = (OVR::Matrix4f *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Matrix4f const & type is null");
    return 0;
  } 
  result = (OVR::Matrix4f *) &(arg1)->operator *=((OVR::Matrix4f const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_swigOpMul__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  float arg2 ;
  OVR::Matrix4f result;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  arg2 = (float)jarg2;
  result = ((OVR::Matrix4f const *)arg1)->operator *(arg2);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_swigOpMulAssign__SWIG_1(void * jarg1, float jarg2) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  float arg2 ;
  OVR::Matrix4f *result = 0 ;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  arg2 = (float)jarg2;
  result = (OVR::Matrix4f *) &(arg1)->operator *=(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_swigOpDiv(void * jarg1, float jarg2) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  float arg2 ;
  OVR::Matrix4f result;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  arg2 = (float)jarg2;
  result = ((OVR::Matrix4f const *)arg1)->operator /(arg2);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_swigOpDivAssign(void * jarg1, float jarg2) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  float arg2 ;
  OVR::Matrix4f *result = 0 ;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  arg2 = (float)jarg2;
  result = (OVR::Matrix4f *) &(arg1)->operator /=(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_Transform(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  OVR::Vector3f *arg2 = 0 ;
  SwigValueWrapper< OVR::Vector3< float > > result;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  arg2 = (OVR::Vector3f *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Vector3f const & type is null");
    return 0;
  } 
  result = ((OVR::Matrix4f const *)arg1)->Transform((OVR::Vector3f const &)*arg2);
  jresult = new OVR::Vector3f((const OVR::Vector3f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_Transposed(void * jarg1) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  OVR::Matrix4f result;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  result = ((OVR::Matrix4f const *)arg1)->Transposed();
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void D_Matrix4f_Transpose(void * jarg1) {
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  (arg1)->Transpose();
}


SWIGEXPORT float D_Matrix4f_SubDet(void * jarg1, void * jarg2, void * jarg3) {
  float jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  OVR::UPInt *arg2 = (OVR::UPInt *) 0 ;
  OVR::UPInt *arg3 = (OVR::UPInt *) 0 ;
  float result;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  arg2 = (OVR::UPInt *)jarg2;
  arg3 = (OVR::UPInt *)jarg3;
  result = (float)((OVR::Matrix4f const *)arg1)->SubDet((OVR::UPInt const *)arg2,(OVR::UPInt const *)arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT float D_Matrix4f_Cofactor(void * jarg1, size_t jarg2, size_t jarg3) {
  float jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  OVR::UPInt arg2 ;
  OVR::UPInt arg3 ;
  float result;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  arg3 = (OVR::UPInt)jarg3;
  result = (float)((OVR::Matrix4f const *)arg1)->Cofactor(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT float D_Matrix4f_Determinant(void * jarg1) {
  float jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  float result;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  result = (float)((OVR::Matrix4f const *)arg1)->Determinant();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_Adjugated(void * jarg1) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  OVR::Matrix4f result;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  result = ((OVR::Matrix4f const *)arg1)->Adjugated();
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_Inverted(void * jarg1) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  OVR::Matrix4f result;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  result = ((OVR::Matrix4f const *)arg1)->Inverted();
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void D_Matrix4f_Invert(void * jarg1) {
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  (arg1)->Invert();
}


SWIGEXPORT void * D_Matrix4f_InvertedHomogeneousTransform(void * jarg1) {
  void * jresult ;
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  OVR::Matrix4f result;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  result = ((OVR::Matrix4f const *)arg1)->InvertedHomogeneousTransform();
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void D_Matrix4f_InvertHomogeneousTransform(void * jarg1) {
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  (arg1)->InvertHomogeneousTransform();
}


SWIGEXPORT void * D_Matrix4f_AxisConversion(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::WorldAxes *arg1 = 0 ;
  OVR::WorldAxes *arg2 = 0 ;
  OVR::Matrix4f result;
  
  arg1 = (OVR::WorldAxes *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::WorldAxes const & type is null");
    return 0;
  } 
  arg2 = (OVR::WorldAxes *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::WorldAxes const & type is null");
    return 0;
  } 
  result = OVR::Matrix4f::AxisConversion((OVR::WorldAxes const &)*arg1,(OVR::WorldAxes const &)*arg2);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_Translation__SWIG_0(void * jarg1) {
  void * jresult ;
  OVR::Vector3f *arg1 = 0 ;
  OVR::Matrix4f result;
  
  arg1 = (OVR::Vector3f *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Vector3f const & type is null");
    return 0;
  } 
  result = OVR::Matrix4f::Translation((OVR::Vector3< float > const &)*arg1);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_Translation__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  OVR::Matrix4f result;
  
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  result = OVR::Matrix4f::Translation(arg1,arg2,arg3);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_Translation__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  OVR::Matrix4f result;
  
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  result = OVR::Matrix4f::Translation(arg1,arg2);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_Scaling__SWIG_0(void * jarg1) {
  void * jresult ;
  OVR::Vector3f *arg1 = 0 ;
  OVR::Matrix4f result;
  
  arg1 = (OVR::Vector3f *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Vector3f const & type is null");
    return 0;
  } 
  result = OVR::Matrix4f::Scaling((OVR::Vector3< float > const &)*arg1);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_Scaling__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  OVR::Matrix4f result;
  
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  result = OVR::Matrix4f::Scaling(arg1,arg2,arg3);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_Scaling__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  OVR::Matrix4f result;
  
  arg1 = (float)jarg1;
  result = OVR::Matrix4f::Scaling(arg1);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_RotationAxis(int jarg1, float jarg2, int jarg3, int jarg4) {
  void * jresult ;
  OVR::Axis arg1 ;
  float arg2 ;
  OVR::RotateDirection arg3 ;
  OVR::HandedSystem arg4 ;
  OVR::Matrix4f result;
  
  arg1 = (OVR::Axis)jarg1; 
  arg2 = (float)jarg2;
  arg3 = (OVR::RotateDirection)jarg3; 
  arg4 = (OVR::HandedSystem)jarg4; 
  result = OVR::Matrix4f::RotationAxis(arg1,arg2,arg3,arg4);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_RotationX(float jarg1) {
  void * jresult ;
  float arg1 ;
  OVR::Matrix4f result;
  
  arg1 = (float)jarg1;
  result = OVR::Matrix4f::RotationX(arg1);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_RotationY(float jarg1) {
  void * jresult ;
  float arg1 ;
  OVR::Matrix4f result;
  
  arg1 = (float)jarg1;
  result = OVR::Matrix4f::RotationY(arg1);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_RotationZ(float jarg1) {
  void * jresult ;
  float arg1 ;
  OVR::Matrix4f result;
  
  arg1 = (float)jarg1;
  result = OVR::Matrix4f::RotationZ(arg1);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_LookAtRH(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  OVR::Vector3f *arg1 = 0 ;
  OVR::Vector3f *arg2 = 0 ;
  OVR::Vector3f *arg3 = 0 ;
  OVR::Matrix4f result;
  
  arg1 = (OVR::Vector3f *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Vector3f const & type is null");
    return 0;
  } 
  arg2 = (OVR::Vector3f *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Vector3f const & type is null");
    return 0;
  } 
  arg3 = (OVR::Vector3f *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Vector3f const & type is null");
    return 0;
  } 
  result = OVR::Matrix4f::LookAtRH((OVR::Vector3< float > const &)*arg1,(OVR::Vector3< float > const &)*arg2,(OVR::Vector3< float > const &)*arg3);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_LookAtLH(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  OVR::Vector3f *arg1 = 0 ;
  OVR::Vector3f *arg2 = 0 ;
  OVR::Vector3f *arg3 = 0 ;
  OVR::Matrix4f result;
  
  arg1 = (OVR::Vector3f *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Vector3f const & type is null");
    return 0;
  } 
  arg2 = (OVR::Vector3f *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Vector3f const & type is null");
    return 0;
  } 
  arg3 = (OVR::Vector3f *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Vector3f const & type is null");
    return 0;
  } 
  result = OVR::Matrix4f::LookAtLH((OVR::Vector3< float > const &)*arg1,(OVR::Vector3< float > const &)*arg2,(OVR::Vector3< float > const &)*arg3);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_PerspectiveRH(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  OVR::Matrix4f result;
  
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  result = OVR::Matrix4f::PerspectiveRH(arg1,arg2,arg3,arg4);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_PerspectiveLH(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  OVR::Matrix4f result;
  
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  result = OVR::Matrix4f::PerspectiveLH(arg1,arg2,arg3,arg4);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_Matrix4f_Ortho2D(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  OVR::Matrix4f result;
  
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  result = OVR::Matrix4f::Ortho2D(arg1,arg2);
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void D_delete_Matrix4f(void * jarg1) {
  OVR::Matrix4f *arg1 = (OVR::Matrix4f *) 0 ;
  
  arg1 = (OVR::Matrix4f *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_AtomicOpsRawBase() {
  void * jresult ;
  OVR::AtomicOpsRawBase *result = 0 ;
  
  result = (OVR::AtomicOpsRawBase *)new OVR::AtomicOpsRawBase();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_AtomicOpsRawBase(void * jarg1) {
  OVR::AtomicOpsRawBase *arg1 = (OVR::AtomicOpsRawBase *) 0 ;
  
  arg1 = (OVR::AtomicOpsRawBase *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_AtomicOpsRaw_4ByteImpl_Exchange_NoSync(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::AtomicOpsRaw_4ByteImpl::T *arg1 = (OVR::AtomicOpsRaw_4ByteImpl::T *) 0 ;
  OVR::AtomicOpsRaw_4ByteImpl::T arg2 ;
  OVR::AtomicOpsRaw_4ByteImpl::T *argp2 ;
  OVR::AtomicOpsRaw_4ByteImpl::T result;
  
  arg1 = (OVR::AtomicOpsRaw_4ByteImpl::T *)jarg1;
  argp2 = (OVR::AtomicOpsRaw_4ByteImpl::T *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null OVR::AtomicOpsRaw_4ByteImpl::T");
    return 0;
  }
  arg2 = *argp2; 
  result = OVR::AtomicOpsRaw_4ByteImpl::Exchange_NoSync((LONG volatile *)arg1,arg2);
  jresult = new OVR::AtomicOpsRaw_4ByteImpl::T((const OVR::AtomicOpsRaw_4ByteImpl::T &)result); 
  return jresult;
}


SWIGEXPORT void * D_AtomicOpsRaw_4ByteImpl_ExchangeAdd_NoSync(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::AtomicOpsRaw_4ByteImpl::T *arg1 = (OVR::AtomicOpsRaw_4ByteImpl::T *) 0 ;
  OVR::AtomicOpsRaw_4ByteImpl::T arg2 ;
  OVR::AtomicOpsRaw_4ByteImpl::T *argp2 ;
  OVR::AtomicOpsRaw_4ByteImpl::T result;
  
  arg1 = (OVR::AtomicOpsRaw_4ByteImpl::T *)jarg1;
  argp2 = (OVR::AtomicOpsRaw_4ByteImpl::T *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null OVR::AtomicOpsRaw_4ByteImpl::T");
    return 0;
  }
  arg2 = *argp2; 
  result = OVR::AtomicOpsRaw_4ByteImpl::ExchangeAdd_NoSync((LONG volatile *)arg1,arg2);
  jresult = new OVR::AtomicOpsRaw_4ByteImpl::T((const OVR::AtomicOpsRaw_4ByteImpl::T &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_AtomicOpsRaw_4ByteImpl_CompareAndSet_NoSync(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  OVR::AtomicOpsRaw_4ByteImpl::T *arg1 = (OVR::AtomicOpsRaw_4ByteImpl::T *) 0 ;
  OVR::AtomicOpsRaw_4ByteImpl::T arg2 ;
  OVR::AtomicOpsRaw_4ByteImpl::T arg3 ;
  OVR::AtomicOpsRaw_4ByteImpl::T *argp2 ;
  OVR::AtomicOpsRaw_4ByteImpl::T *argp3 ;
  bool result;
  
  arg1 = (OVR::AtomicOpsRaw_4ByteImpl::T *)jarg1;
  argp2 = (OVR::AtomicOpsRaw_4ByteImpl::T *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null OVR::AtomicOpsRaw_4ByteImpl::T");
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (OVR::AtomicOpsRaw_4ByteImpl::T *)jarg3;
  if (!argp3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null OVR::AtomicOpsRaw_4ByteImpl::T");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)OVR::AtomicOpsRaw_4ByteImpl::CompareAndSet_NoSync((LONG volatile *)arg1,arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_AtomicOpsRaw_4ByteImpl() {
  void * jresult ;
  OVR::AtomicOpsRaw_4ByteImpl *result = 0 ;
  
  result = (OVR::AtomicOpsRaw_4ByteImpl *)new OVR::AtomicOpsRaw_4ByteImpl();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_AtomicOpsRaw_4ByteImpl(void * jarg1) {
  OVR::AtomicOpsRaw_4ByteImpl *arg1 = (OVR::AtomicOpsRaw_4ByteImpl *) 0 ;
  
  arg1 = (OVR::AtomicOpsRaw_4ByteImpl *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_AtomicOpsRaw_8ByteImpl() {
  void * jresult ;
  OVR::AtomicOpsRaw_8ByteImpl *result = 0 ;
  
  result = (OVR::AtomicOpsRaw_8ByteImpl *)new OVR::AtomicOpsRaw_8ByteImpl();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_AtomicOpsRaw_8ByteImpl(void * jarg1) {
  OVR::AtomicOpsRaw_8ByteImpl *arg1 = (OVR::AtomicOpsRaw_8ByteImpl *) 0 ;
  
  arg1 = (OVR::AtomicOpsRaw_8ByteImpl *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_Lock__SWIG_0(unsigned int jarg1) {
  void * jresult ;
  unsigned int arg1 ;
  OVR::Lock *result = 0 ;
  
  arg1 = (unsigned int)jarg1;
  result = (OVR::Lock *)new OVR::Lock(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Lock__SWIG_1() {
  void * jresult ;
  OVR::Lock *result = 0 ;
  
  result = (OVR::Lock *)new OVR::Lock();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Lock(void * jarg1) {
  OVR::Lock *arg1 = (OVR::Lock *) 0 ;
  
  arg1 = (OVR::Lock *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_Lock_DoLock(void * jarg1) {
  OVR::Lock *arg1 = (OVR::Lock *) 0 ;
  
  arg1 = (OVR::Lock *)jarg1;
  (arg1)->DoLock();
}


SWIGEXPORT void D_Lock_Unlock(void * jarg1) {
  OVR::Lock *arg1 = (OVR::Lock *) 0 ;
  
  arg1 = (OVR::Lock *)jarg1;
  (arg1)->Unlock();
}


SWIGEXPORT void * D_new_String__SWIG_1() {
  void * jresult ;
  OVR::String *result = 0 ;
  
  result = (OVR::String *)new OVR::String();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_String__SWIG_2(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  OVR::String *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (OVR::String *)new OVR::String((char const *)arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_String__SWIG_3(char * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  OVR::String *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (OVR::String *)new OVR::String((char const *)arg1,(char const *)arg2,(char const *)arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_String__SWIG_4(char * jarg1, char * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  OVR::String *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (OVR::String *)new OVR::String((char const *)arg1,(char const *)arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_String__SWIG_5(char * jarg1, size_t jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  OVR::UPInt arg2 ;
  OVR::String *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (OVR::UPInt)jarg2;
  result = (OVR::String *)new OVR::String((char const *)arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_String__SWIG_6(void * jarg1) {
  void * jresult ;
  OVR::String *arg1 = 0 ;
  OVR::String *result = 0 ;
  
  arg1 = (OVR::String *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::String const & type is null");
    return 0;
  } 
  result = (OVR::String *)new OVR::String((OVR::String const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_String__SWIG_7(void * jarg1) {
  void * jresult ;
  OVR::StringBuffer *arg1 = 0 ;
  OVR::String *result = 0 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::StringBuffer const & type is null");
    return 0;
  } 
  result = (OVR::String *)new OVR::String((OVR::StringBuffer const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_String__SWIG_8(void * jarg1, size_t jarg2) {
  void * jresult ;
  OVR::String::InitStruct *arg1 = 0 ;
  OVR::UPInt arg2 ;
  OVR::String *result = 0 ;
  
  arg1 = (OVR::String::InitStruct *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::String::InitStruct const & type is null");
    return 0;
  } 
  arg2 = (OVR::UPInt)jarg2;
  result = (OVR::String *)new OVR::String((OVR::String::InitStruct const &)*arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_String__SWIG_9(void * jarg1) {
  void * jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  OVR::String *result = 0 ;
  
  arg1 = (wchar_t *)jarg1;
  result = (OVR::String *)new OVR::String((wchar_t const *)arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_String(void * jarg1) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  
  arg1 = (OVR::String *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_String_NullData_set(void * jarg1) {
  DataDesc arg1 ;
  DataDesc *argp1 ;
  
  argp1 = (DataDesc *)jarg1;
  if (!argp1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null DataDesc");
    return ;
  }
  arg1 = *argp1; 
  OVR::String::NullData = arg1;
}


SWIGEXPORT void * D_String_NullData_get() {
  void * jresult ;
  DataDesc result;
  
  result = OVR::String::NullData;
  jresult = new DataDesc((const DataDesc &)result); 
  return jresult;
}


SWIGEXPORT void D_String_Clear(void * jarg1) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  
  arg1 = (OVR::String *)jarg1;
  (arg1)->Clear();
}


SWIGEXPORT char * D_String_ToCStr(void * jarg1) {
  char * jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  char *result = 0 ;
  
  arg1 = (OVR::String *)jarg1;
  result = (char *)((OVR::String const *)arg1)->ToCStr();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT size_t D_String_GetSize(void * jarg1) {
  size_t jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::UPInt result;
  
  arg1 = (OVR::String *)jarg1;
  result = ((OVR::String const *)arg1)->GetSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_String_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  bool result;
  
  arg1 = (OVR::String *)jarg1;
  result = (bool)((OVR::String const *)arg1)->IsEmpty();
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_String_GetLength(void * jarg1) {
  size_t jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::UPInt result;
  
  arg1 = (OVR::String *)jarg1;
  result = ((OVR::String const *)arg1)->GetLength();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long D_String_GetCharAt(void * jarg1, size_t jarg2) {
  unsigned long jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::UPInt arg2 ;
  OVR::UInt32 result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  result = (OVR::UInt32)((OVR::String const *)arg1)->GetCharAt(arg2);
  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT unsigned long D_String_GetFirstCharAt(void * jarg1, size_t jarg2, void * jarg3) {
  unsigned long jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::UPInt arg2 ;
  char **arg3 = (char **) 0 ;
  OVR::UInt32 result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  arg3 = (char **)jarg3;
  result = (OVR::UInt32)((OVR::String const *)arg1)->GetFirstCharAt(arg2,(char const **)arg3);
  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT unsigned long D_String_GetNextChar(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  char **arg2 = (char **) 0 ;
  OVR::UInt32 result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (char **)jarg2;
  result = (OVR::UInt32)((OVR::String const *)arg1)->GetNextChar((char const **)arg2);
  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void D_String_AppendChar(void * jarg1, unsigned long jarg2) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::UInt32 arg2 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::UInt32)jarg2;
  (arg1)->AppendChar(arg2);
}


SWIGEXPORT void D_String_AppendString__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  OVR::SPInt arg3 ;
  OVR::SPInt *argp3 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (wchar_t *)jarg2;
  argp3 = (OVR::SPInt *)jarg3;
  if (!argp3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null OVR::SPInt");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->AppendString((wchar_t const *)arg2,arg3);
}


SWIGEXPORT void D_String_AppendString__SWIG_1(void * jarg1, void * jarg2) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (wchar_t *)jarg2;
  (arg1)->AppendString((wchar_t const *)arg2);
}


SWIGEXPORT void D_String_AppendString__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  char *arg2 = (char *) 0 ;
  OVR::SPInt arg3 ;
  OVR::SPInt *argp3 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (char *)jarg2; 
  argp3 = (OVR::SPInt *)jarg3;
  if (!argp3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null OVR::SPInt");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->AppendString((char const *)arg2,arg3);
}


SWIGEXPORT void D_String_AppendString__SWIG_3(void * jarg1, char * jarg2) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (char *)jarg2; 
  (arg1)->AppendString((char const *)arg2);
}


SWIGEXPORT void D_String_AssignString__SWIG_0(void * jarg1, void * jarg2, size_t jarg3) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::String::InitStruct *arg2 = 0 ;
  OVR::UPInt arg3 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::String::InitStruct *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::String::InitStruct const & type is null");
    return ;
  } 
  arg3 = (OVR::UPInt)jarg3;
  (arg1)->AssignString((OVR::String::InitStruct const &)*arg2,arg3);
}


SWIGEXPORT void D_String_AssignString__SWIG_1(void * jarg1, char * jarg2, size_t jarg3) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  char *arg2 = (char *) 0 ;
  OVR::UPInt arg3 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = (OVR::UPInt)jarg3;
  (arg1)->AssignString((char const *)arg2,arg3);
}


SWIGEXPORT void D_String_Remove__SWIG_0(void * jarg1, size_t jarg2, void * jarg3) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::UPInt arg2 ;
  OVR::SPInt arg3 ;
  OVR::SPInt *argp3 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  argp3 = (OVR::SPInt *)jarg3;
  if (!argp3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null OVR::SPInt");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->Remove(arg2,arg3);
}


SWIGEXPORT void D_String_Remove__SWIG_1(void * jarg1, size_t jarg2) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::UPInt arg2 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  (arg1)->Remove(arg2);
}


SWIGEXPORT void * D_String_Substring(void * jarg1, size_t jarg2, size_t jarg3) {
  void * jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::UPInt arg2 ;
  OVR::UPInt arg3 ;
  OVR::String result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  arg3 = (OVR::UPInt)jarg3;
  result = ((OVR::String const *)arg1)->Substring(arg2,arg3);
  jresult = new OVR::String((const OVR::String &)result); 
  return jresult;
}


SWIGEXPORT void * D_String_ToUpper(void * jarg1) {
  void * jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::String result;
  
  arg1 = (OVR::String *)jarg1;
  result = ((OVR::String const *)arg1)->ToUpper();
  jresult = new OVR::String((const OVR::String &)result); 
  return jresult;
}


SWIGEXPORT void * D_String_ToLower(void * jarg1) {
  void * jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::String result;
  
  arg1 = (OVR::String *)jarg1;
  result = ((OVR::String const *)arg1)->ToLower();
  jresult = new OVR::String((const OVR::String &)result); 
  return jresult;
}


SWIGEXPORT void * D_String_Insert__SWIG_0(void * jarg1, char * jarg2, size_t jarg3, void * jarg4) {
  void * jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  char *arg2 = (char *) 0 ;
  OVR::UPInt arg3 ;
  OVR::SPInt arg4 ;
  OVR::SPInt *argp4 ;
  OVR::String *result = 0 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = (OVR::UPInt)jarg3;
  argp4 = (OVR::SPInt *)jarg4;
  if (!argp4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null OVR::SPInt");
    return 0;
  }
  arg4 = *argp4; 
  result = (OVR::String *) &(arg1)->Insert((char const *)arg2,arg3,arg4);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_String_Insert__SWIG_1(void * jarg1, char * jarg2, size_t jarg3) {
  void * jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  char *arg2 = (char *) 0 ;
  OVR::UPInt arg3 ;
  OVR::String *result = 0 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = (OVR::UPInt)jarg3;
  result = (OVR::String *) &(arg1)->Insert((char const *)arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT size_t D_String_InsertCharAt(void * jarg1, unsigned long jarg2, size_t jarg3) {
  size_t jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::UInt32 arg2 ;
  OVR::UPInt arg3 ;
  OVR::UPInt result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::UInt32)jarg2;
  arg3 = (OVR::UPInt)jarg3;
  result = (arg1)->InsertCharAt(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_String_GetByteIndex(void * jarg1, size_t jarg2) {
  size_t jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::UPInt arg2 ;
  OVR::UPInt result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  result = ((OVR::String const *)arg1)->GetByteIndex(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_String_CompareNoCase__SWIG_0(char * jarg1, char * jarg2) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)OVR::String::CompareNoCase((char const *)arg1,(char const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_String_CompareNoCase__SWIG_1(char * jarg1, char * jarg2, void * jarg3) {
  int jresult ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  OVR::SPInt arg3 ;
  OVR::SPInt *argp3 ;
  int result;
  
  arg1 = (char *)jarg1; 
  arg2 = (char *)jarg2; 
  argp3 = (OVR::SPInt *)jarg3;
  if (!argp3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null OVR::SPInt");
    return 0;
  }
  arg3 = *argp3; 
  result = (int)OVR::String::CompareNoCase((char const *)arg1,(char const *)arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_String_BernsteinHashFunctionCIS__SWIG_0(void * jarg1, size_t jarg2, size_t jarg3) {
  size_t jresult ;
  void *arg1 = (void *) 0 ;
  OVR::UPInt arg2 ;
  OVR::UPInt arg3 ;
  OVR::UPInt result;
  
  arg1 = (void *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  arg3 = (OVR::UPInt)jarg3;
  result = OVR::String::BernsteinHashFunctionCIS((void const *)arg1,arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_String_BernsteinHashFunctionCIS__SWIG_1(void * jarg1, size_t jarg2) {
  size_t jresult ;
  void *arg1 = (void *) 0 ;
  OVR::UPInt arg2 ;
  OVR::UPInt result;
  
  arg1 = (void *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  result = OVR::String::BernsteinHashFunctionCIS((void const *)arg1,arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_String_BernsteinHashFunction__SWIG_0(void * jarg1, size_t jarg2, size_t jarg3) {
  size_t jresult ;
  void *arg1 = (void *) 0 ;
  OVR::UPInt arg2 ;
  OVR::UPInt arg3 ;
  OVR::UPInt result;
  
  arg1 = (void *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  arg3 = (OVR::UPInt)jarg3;
  result = OVR::String::BernsteinHashFunction((void const *)arg1,arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_String_BernsteinHashFunction__SWIG_1(void * jarg1, size_t jarg2) {
  size_t jresult ;
  void *arg1 = (void *) 0 ;
  OVR::UPInt arg2 ;
  OVR::UPInt result;
  
  arg1 = (void *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  result = OVR::String::BernsteinHashFunction((void const *)arg1,arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_String_HasAbsolutePath__SWIG_0(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)OVR::String::HasAbsolutePath((char const *)arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_String_HasExtension__SWIG_0(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)OVR::String::HasExtension((char const *)arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_String_HasProtocol__SWIG_0(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)OVR::String::HasProtocol((char const *)arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_String_HasAbsolutePath__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  bool result;
  
  arg1 = (OVR::String *)jarg1;
  result = (bool)((OVR::String const *)arg1)->HasAbsolutePath();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_String_HasExtension__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  bool result;
  
  arg1 = (OVR::String *)jarg1;
  result = (bool)((OVR::String const *)arg1)->HasExtension();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_String_HasProtocol__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  bool result;
  
  arg1 = (OVR::String *)jarg1;
  result = (bool)((OVR::String const *)arg1)->HasProtocol();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_String_GetProtocol(void * jarg1) {
  void * jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::String result;
  
  arg1 = (OVR::String *)jarg1;
  result = ((OVR::String const *)arg1)->GetProtocol();
  jresult = new OVR::String((const OVR::String &)result); 
  return jresult;
}


SWIGEXPORT void * D_String_GetPath(void * jarg1) {
  void * jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::String result;
  
  arg1 = (OVR::String *)jarg1;
  result = ((OVR::String const *)arg1)->GetPath();
  jresult = new OVR::String((const OVR::String &)result); 
  return jresult;
}


SWIGEXPORT void * D_String_GetFilename(void * jarg1) {
  void * jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::String result;
  
  arg1 = (OVR::String *)jarg1;
  result = ((OVR::String const *)arg1)->GetFilename();
  jresult = new OVR::String((const OVR::String &)result); 
  return jresult;
}


SWIGEXPORT void * D_String_GetExtension(void * jarg1) {
  void * jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::String result;
  
  arg1 = (OVR::String *)jarg1;
  result = ((OVR::String const *)arg1)->GetExtension();
  jresult = new OVR::String((const OVR::String &)result); 
  return jresult;
}


SWIGEXPORT void D_String_StripProtocol(void * jarg1) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  
  arg1 = (OVR::String *)jarg1;
  (arg1)->StripProtocol();
}


SWIGEXPORT void D_String_StripExtension(void * jarg1) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  
  arg1 = (OVR::String *)jarg1;
  (arg1)->StripExtension();
}


SWIGEXPORT void D_String_swigOpAddAssign__SWIG_0(void * jarg1, void * jarg2) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::String *arg2 = 0 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::String *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::String const & type is null");
    return ;
  } 
  (arg1)->operator +=((OVR::String const &)*arg2);
}


SWIGEXPORT void D_String_swigOpAddAssign__SWIG_1(void * jarg1, char * jarg2) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (char *)jarg2; 
  (arg1)->operator +=((char const *)arg2);
}


SWIGEXPORT void D_String_swigOpAddAssign__SWIG_2(void * jarg1, void * jarg2) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (wchar_t *)jarg2;
  (arg1)->operator +=((wchar_t const *)arg2);
}


SWIGEXPORT void D_String_swigOpAddAssign__SWIG_3(void * jarg1, char jarg2) {
  OVR::String *arg1 = (OVR::String *) 0 ;
  char arg2 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (char)jarg2;
  (arg1)->operator +=(arg2);
}


SWIGEXPORT void * D_String_swigOpAdd__SWIG_0(void * jarg1, char * jarg2) {
  void * jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  char *arg2 = (char *) 0 ;
  OVR::String result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (char *)jarg2; 
  result = ((OVR::String const *)arg1)->operator +((char const *)arg2);
  jresult = new OVR::String((const OVR::String &)result); 
  return jresult;
}


SWIGEXPORT void * D_String_swigOpAdd__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::String *arg2 = 0 ;
  OVR::String result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::String *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::String const & type is null");
    return 0;
  } 
  result = ((OVR::String const *)arg1)->operator +((OVR::String const &)*arg2);
  jresult = new OVR::String((const OVR::String &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_String_swigOpEquals__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::String *arg2 = 0 ;
  bool result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::String *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::String const & type is null");
    return 0;
  } 
  result = (bool)((OVR::String const *)arg1)->operator ==((OVR::String const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_String_swigOpEquals__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (char *)jarg2; 
  result = (bool)((OVR::String const *)arg1)->operator ==((char const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_String_swigOpLt__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (char *)jarg2; 
  result = (bool)((OVR::String const *)arg1)->operator <((char const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_String_swigOpLt__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::String *arg2 = 0 ;
  bool result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::String *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::String const & type is null");
    return 0;
  } 
  result = (bool)((OVR::String const *)arg1)->operator <((OVR::String const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_String_swigOpGt__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (char *)jarg2; 
  result = (bool)((OVR::String const *)arg1)->operator >((char const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_String_swigOpGt__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::String *arg2 = 0 ;
  bool result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::String *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::String const & type is null");
    return 0;
  } 
  result = (bool)((OVR::String const *)arg1)->operator >((OVR::String const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_String_CompareNoCase__SWIG_2(void * jarg1, char * jarg2) {
  int jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (char *)jarg2; 
  result = (int)((OVR::String const *)arg1)->CompareNoCase((char const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_String_CompareNoCase__SWIG_3(void * jarg1, void * jarg2) {
  int jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::String *arg2 = 0 ;
  int result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::String *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::String const & type is null");
    return 0;
  } 
  result = (int)((OVR::String const *)arg1)->CompareNoCase((OVR::String const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char D_String_opIndex__SWIG_0(void * jarg1, int jarg2) {
  char jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (int)jarg2;
  result = (char *) &((OVR::String const *)arg1)->operator [](arg2);
  jresult = *result;
  return jresult;
}


SWIGEXPORT char D_String_opIndex__SWIG_1(void * jarg1, size_t jarg2) {
  char jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::UPInt arg2 ;
  char *result = 0 ;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  result = (char *) &((OVR::String const *)arg1)->operator [](arg2);
  jresult = *result;
  return jresult;
}


SWIGEXPORT unsigned int D_String_swigOpEquals__SWIG_2(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::String *arg1 = (OVR::String *) 0 ;
  OVR::String::NoCaseKey *arg2 = 0 ;
  bool result;
  
  arg1 = (OVR::String *)jarg1;
  arg2 = (OVR::String::NoCaseKey *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::String::NoCaseKey const & type is null");
    return 0;
  } 
  result = (bool)((OVR::String const *)arg1)->operator ==((OVR::String::NoCaseKey const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_StringBuffer__SWIG_0() {
  void * jresult ;
  OVR::StringBuffer *result = 0 ;
  
  result = (OVR::StringBuffer *)new OVR::StringBuffer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_StringBuffer__SWIG_1(size_t jarg1) {
  void * jresult ;
  OVR::UPInt arg1 ;
  OVR::StringBuffer *result = 0 ;
  
  arg1 = (OVR::UPInt)jarg1;
  result = (OVR::StringBuffer *)new OVR::StringBuffer(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_StringBuffer__SWIG_2(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  OVR::StringBuffer *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (OVR::StringBuffer *)new OVR::StringBuffer((char const *)arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_StringBuffer__SWIG_3(char * jarg1, size_t jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  OVR::UPInt arg2 ;
  OVR::StringBuffer *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (OVR::UPInt)jarg2;
  result = (OVR::StringBuffer *)new OVR::StringBuffer((char const *)arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_StringBuffer__SWIG_4(void * jarg1) {
  void * jresult ;
  OVR::String *arg1 = 0 ;
  OVR::StringBuffer *result = 0 ;
  
  arg1 = (OVR::String *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::String const & type is null");
    return 0;
  } 
  result = (OVR::StringBuffer *)new OVR::StringBuffer((OVR::String const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_StringBuffer__SWIG_5(void * jarg1) {
  void * jresult ;
  OVR::StringBuffer *arg1 = 0 ;
  OVR::StringBuffer *result = 0 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::StringBuffer const & type is null");
    return 0;
  } 
  result = (OVR::StringBuffer *)new OVR::StringBuffer((OVR::StringBuffer const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_StringBuffer__SWIG_6(void * jarg1) {
  void * jresult ;
  wchar_t *arg1 = (wchar_t *) 0 ;
  OVR::StringBuffer *result = 0 ;
  
  arg1 = (wchar_t *)jarg1;
  result = (OVR::StringBuffer *)new OVR::StringBuffer((wchar_t const *)arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_StringBuffer(void * jarg1) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  delete arg1;
}


SWIGEXPORT size_t D_StringBuffer_GetGrowSize(void * jarg1) {
  size_t jresult ;
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  OVR::UPInt result;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  result = ((OVR::StringBuffer const *)arg1)->GetGrowSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_StringBuffer_SetGrowSize(void * jarg1, size_t jarg2) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  OVR::UPInt arg2 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  (arg1)->SetGrowSize(arg2);
}


SWIGEXPORT void D_StringBuffer_Clear(void * jarg1) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  (arg1)->Clear();
}


SWIGEXPORT char * D_StringBuffer_ToCStr(void * jarg1) {
  char * jresult ;
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  char *result = 0 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  result = (char *)((OVR::StringBuffer const *)arg1)->ToCStr();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT size_t D_StringBuffer_GetSize(void * jarg1) {
  size_t jresult ;
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  OVR::UPInt result;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  result = ((OVR::StringBuffer const *)arg1)->GetSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StringBuffer_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  bool result;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  result = (bool)((OVR::StringBuffer const *)arg1)->IsEmpty();
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_StringBuffer_GetLength(void * jarg1) {
  size_t jresult ;
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  OVR::UPInt result;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  result = ((OVR::StringBuffer const *)arg1)->GetLength();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned long D_StringBuffer_GetCharAt(void * jarg1, size_t jarg2) {
  unsigned long jresult ;
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  OVR::UPInt arg2 ;
  OVR::UInt32 result;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  result = (OVR::UInt32)((OVR::StringBuffer const *)arg1)->GetCharAt(arg2);
  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT unsigned long D_StringBuffer_GetFirstCharAt(void * jarg1, size_t jarg2, void * jarg3) {
  unsigned long jresult ;
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  OVR::UPInt arg2 ;
  char **arg3 = (char **) 0 ;
  OVR::UInt32 result;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  arg3 = (char **)jarg3;
  result = (OVR::UInt32)((OVR::StringBuffer const *)arg1)->GetFirstCharAt(arg2,(char const **)arg3);
  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT unsigned long D_StringBuffer_GetNextChar(void * jarg1, void * jarg2) {
  unsigned long jresult ;
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  char **arg2 = (char **) 0 ;
  OVR::UInt32 result;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (char **)jarg2;
  result = (OVR::UInt32)((OVR::StringBuffer const *)arg1)->GetNextChar((char const **)arg2);
  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void D_StringBuffer_Resize(void * jarg1, size_t jarg2) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  OVR::UPInt arg2 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  (arg1)->Resize(arg2);
}


SWIGEXPORT void D_StringBuffer_Reserve(void * jarg1, size_t jarg2) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  OVR::UPInt arg2 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  (arg1)->Reserve(arg2);
}


SWIGEXPORT void D_StringBuffer_AppendChar(void * jarg1, unsigned long jarg2) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  OVR::UInt32 arg2 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (OVR::UInt32)jarg2;
  (arg1)->AppendChar(arg2);
}


SWIGEXPORT void D_StringBuffer_AppendString__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  OVR::SPInt arg3 ;
  OVR::SPInt *argp3 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (wchar_t *)jarg2;
  argp3 = (OVR::SPInt *)jarg3;
  if (!argp3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null OVR::SPInt");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->AppendString((wchar_t const *)arg2,arg3);
}


SWIGEXPORT void D_StringBuffer_AppendString__SWIG_1(void * jarg1, void * jarg2) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (wchar_t *)jarg2;
  (arg1)->AppendString((wchar_t const *)arg2);
}


SWIGEXPORT void D_StringBuffer_AppendString__SWIG_2(void * jarg1, char * jarg2, void * jarg3) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  OVR::SPInt arg3 ;
  OVR::SPInt *argp3 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (char *)jarg2; 
  argp3 = (OVR::SPInt *)jarg3;
  if (!argp3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null OVR::SPInt");
    return ;
  }
  arg3 = *argp3; 
  (arg1)->AppendString((char const *)arg2,arg3);
}


SWIGEXPORT void D_StringBuffer_AppendString__SWIG_3(void * jarg1, char * jarg2) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (char *)jarg2; 
  (arg1)->AppendString((char const *)arg2);
}


SWIGEXPORT void D_StringBuffer_AppendFormat(void * jarg1, char * jarg2) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (char *)jarg2; 
  (arg1)->AppendFormat((char const *)arg2,arg3);
}


SWIGEXPORT void D_StringBuffer_Insert__SWIG_0(void * jarg1, char * jarg2, size_t jarg3, void * jarg4) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  OVR::UPInt arg3 ;
  OVR::SPInt arg4 ;
  OVR::SPInt *argp4 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = (OVR::UPInt)jarg3;
  argp4 = (OVR::SPInt *)jarg4;
  if (!argp4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null OVR::SPInt");
    return ;
  }
  arg4 = *argp4; 
  (arg1)->Insert((char const *)arg2,arg3,arg4);
}


SWIGEXPORT void D_StringBuffer_Insert__SWIG_1(void * jarg1, char * jarg2, size_t jarg3) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  OVR::UPInt arg3 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = (OVR::UPInt)jarg3;
  (arg1)->Insert((char const *)arg2,arg3);
}


SWIGEXPORT size_t D_StringBuffer_InsertCharAt(void * jarg1, unsigned long jarg2, size_t jarg3) {
  size_t jresult ;
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  OVR::UInt32 arg2 ;
  OVR::UPInt arg3 ;
  OVR::UPInt result;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (OVR::UInt32)jarg2;
  arg3 = (OVR::UPInt)jarg3;
  result = (arg1)->InsertCharAt(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_StringBuffer_swigOpAddAssign__SWIG_0(void * jarg1, void * jarg2) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  OVR::String *arg2 = 0 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (OVR::String *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::String const & type is null");
    return ;
  } 
  (arg1)->operator +=((OVR::String const &)*arg2);
}


SWIGEXPORT void D_StringBuffer_swigOpAddAssign__SWIG_1(void * jarg1, char * jarg2) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (char *)jarg2; 
  (arg1)->operator +=((char const *)arg2);
}


SWIGEXPORT void D_StringBuffer_swigOpAddAssign__SWIG_2(void * jarg1, void * jarg2) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (wchar_t *)jarg2;
  (arg1)->operator +=((wchar_t const *)arg2);
}


SWIGEXPORT void D_StringBuffer_swigOpAddAssign__SWIG_3(void * jarg1, char jarg2) {
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  char arg2 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (char)jarg2;
  (arg1)->operator +=(arg2);
}


SWIGEXPORT void * D_StringBuffer_opIndex__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (int)jarg2;
  result = (char *) &(arg1)->operator [](arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_StringBuffer_opIndex__SWIG_1(void * jarg1, size_t jarg2) {
  void * jresult ;
  OVR::StringBuffer *arg1 = (OVR::StringBuffer *) 0 ;
  OVR::UPInt arg2 ;
  char *result = 0 ;
  
  arg1 = (OVR::StringBuffer *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  result = (char *) &(arg1)->operator [](arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_StringDataPtr__SWIG_0() {
  void * jresult ;
  OVR::StringDataPtr *result = 0 ;
  
  result = (OVR::StringDataPtr *)new OVR::StringDataPtr();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_StringDataPtr__SWIG_1(void * jarg1) {
  void * jresult ;
  OVR::StringDataPtr *arg1 = 0 ;
  OVR::StringDataPtr *result = 0 ;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::StringDataPtr const & type is null");
    return 0;
  } 
  result = (OVR::StringDataPtr *)new OVR::StringDataPtr((OVR::StringDataPtr const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_StringDataPtr__SWIG_2(char * jarg1, size_t jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  OVR::UPInt arg2 ;
  OVR::StringDataPtr *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (OVR::UPInt)jarg2;
  result = (OVR::StringDataPtr *)new OVR::StringDataPtr((char const *)arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_StringDataPtr__SWIG_3(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  OVR::StringDataPtr *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (OVR::StringDataPtr *)new OVR::StringDataPtr((char const *)arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_StringDataPtr__SWIG_4(void * jarg1) {
  void * jresult ;
  OVR::String *arg1 = 0 ;
  OVR::StringDataPtr *result = 0 ;
  
  arg1 = (OVR::String *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::String const & type is null");
    return 0;
  } 
  result = (OVR::StringDataPtr *)new OVR::StringDataPtr((OVR::String const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * D_StringDataPtr_ToCStr(void * jarg1) {
  char * jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  char *result = 0 ;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  result = (char *)((OVR::StringDataPtr const *)arg1)->ToCStr();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT size_t D_StringDataPtr_GetSize(void * jarg1) {
  size_t jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  OVR::UPInt result;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  result = ((OVR::StringDataPtr const *)arg1)->GetSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StringDataPtr_IsEmpty(void * jarg1) {
  unsigned int jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  bool result;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  result = (bool)((OVR::StringDataPtr const *)arg1)->IsEmpty();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StringDataPtr_IsPrefix(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  OVR::StringDataPtr *arg2 = 0 ;
  bool result;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  arg2 = (OVR::StringDataPtr *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::StringDataPtr const & type is null");
    return 0;
  } 
  result = (bool)((OVR::StringDataPtr const *)arg1)->IsPrefix((OVR::StringDataPtr const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StringDataPtr_IsSuffix(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  OVR::StringDataPtr *arg2 = 0 ;
  bool result;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  arg2 = (OVR::StringDataPtr *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::StringDataPtr const & type is null");
    return 0;
  } 
  result = (bool)((OVR::StringDataPtr const *)arg1)->IsSuffix((OVR::StringDataPtr const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_StringDataPtr_FindChar__SWIG_0(void * jarg1, char jarg2, size_t jarg3) {
  void * jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  char arg2 ;
  OVR::UPInt arg3 ;
  OVR::SPInt result;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  arg2 = (char)jarg2;
  arg3 = (OVR::UPInt)jarg3;
  result = ((OVR::StringDataPtr const *)arg1)->FindChar(arg2,arg3);
  jresult = new OVR::SPInt((const OVR::SPInt &)result); 
  return jresult;
}


SWIGEXPORT void * D_StringDataPtr_FindChar__SWIG_1(void * jarg1, char jarg2) {
  void * jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  char arg2 ;
  OVR::SPInt result;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  arg2 = (char)jarg2;
  result = ((OVR::StringDataPtr const *)arg1)->FindChar(arg2);
  jresult = new OVR::SPInt((const OVR::SPInt &)result); 
  return jresult;
}


SWIGEXPORT void * D_StringDataPtr_FindLastChar__SWIG_0(void * jarg1, char jarg2, size_t jarg3) {
  void * jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  char arg2 ;
  OVR::UPInt arg3 ;
  OVR::SPInt result;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  arg2 = (char)jarg2;
  arg3 = (OVR::UPInt)jarg3;
  result = ((OVR::StringDataPtr const *)arg1)->FindLastChar(arg2,arg3);
  jresult = new OVR::SPInt((const OVR::SPInt &)result); 
  return jresult;
}


SWIGEXPORT void * D_StringDataPtr_FindLastChar__SWIG_1(void * jarg1, char jarg2) {
  void * jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  char arg2 ;
  OVR::SPInt result;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  arg2 = (char)jarg2;
  result = ((OVR::StringDataPtr const *)arg1)->FindLastChar(arg2);
  jresult = new OVR::SPInt((const OVR::SPInt &)result); 
  return jresult;
}


SWIGEXPORT void * D_StringDataPtr_GetTrimLeft(void * jarg1, size_t jarg2) {
  void * jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  OVR::UPInt arg2 ;
  OVR::StringDataPtr result;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  result = ((OVR::StringDataPtr const *)arg1)->GetTrimLeft(arg2);
  jresult = new OVR::StringDataPtr((const OVR::StringDataPtr &)result); 
  return jresult;
}


SWIGEXPORT void * D_StringDataPtr_GetTrimRight(void * jarg1, size_t jarg2) {
  void * jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  OVR::UPInt arg2 ;
  OVR::StringDataPtr result;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  result = ((OVR::StringDataPtr const *)arg1)->GetTrimRight(arg2);
  jresult = new OVR::StringDataPtr((const OVR::StringDataPtr &)result); 
  return jresult;
}


SWIGEXPORT void * D_StringDataPtr_GetNextToken__SWIG_0(void * jarg1, char jarg2) {
  void * jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  char arg2 ;
  OVR::StringDataPtr result;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  arg2 = (char)jarg2;
  result = ((OVR::StringDataPtr const *)arg1)->GetNextToken(arg2);
  jresult = new OVR::StringDataPtr((const OVR::StringDataPtr &)result); 
  return jresult;
}


SWIGEXPORT void * D_StringDataPtr_GetNextToken__SWIG_1(void * jarg1) {
  void * jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  OVR::StringDataPtr result;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  result = ((OVR::StringDataPtr const *)arg1)->GetNextToken();
  jresult = new OVR::StringDataPtr((const OVR::StringDataPtr &)result); 
  return jresult;
}


SWIGEXPORT void * D_StringDataPtr_TrimLeft(void * jarg1, size_t jarg2) {
  void * jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  OVR::UPInt arg2 ;
  OVR::StringDataPtr *result = 0 ;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  result = (OVR::StringDataPtr *) &(arg1)->TrimLeft(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_StringDataPtr_TrimRight(void * jarg1, size_t jarg2) {
  void * jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  OVR::UPInt arg2 ;
  OVR::StringDataPtr *result = 0 ;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  arg2 = (OVR::UPInt)jarg2;
  result = (OVR::StringDataPtr *) &(arg1)->TrimRight(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * D_StringDataPtr_Begin(void * jarg1) {
  char * jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  char *result = 0 ;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  result = (char *)((OVR::StringDataPtr const *)arg1)->Begin();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * D_StringDataPtr_End(void * jarg1) {
  char * jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  char *result = 0 ;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  result = (char *)((OVR::StringDataPtr const *)arg1)->End();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_StringDataPtr_swigOpEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  OVR::StringDataPtr *arg2 = 0 ;
  bool result;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  arg2 = (OVR::StringDataPtr *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::StringDataPtr const & type is null");
    return 0;
  } 
  result = (bool)((OVR::StringDataPtr const *)arg1)->operator ==((OVR::StringDataPtr const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_StringDataPtr(void * jarg1) {
  OVR::StringDataPtr *arg1 = (OVR::StringDataPtr *) 0 ;
  
  arg1 = (OVR::StringDataPtr *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_DeviceHandle__SWIG_0() {
  void * jresult ;
  OVR::DeviceHandle *result = 0 ;
  
  result = (OVR::DeviceHandle *)new OVR::DeviceHandle();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_DeviceHandle__SWIG_1(void * jarg1) {
  void * jresult ;
  OVR::DeviceHandle *arg1 = 0 ;
  OVR::DeviceHandle *result = 0 ;
  
  arg1 = (OVR::DeviceHandle *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::DeviceHandle const & type is null");
    return 0;
  } 
  result = (OVR::DeviceHandle *)new OVR::DeviceHandle((OVR::DeviceHandle const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_DeviceHandle(void * jarg1) {
  OVR::DeviceHandle *arg1 = (OVR::DeviceHandle *) 0 ;
  
  arg1 = (OVR::DeviceHandle *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_DeviceHandle_swigOpEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::DeviceHandle *arg1 = (OVR::DeviceHandle *) 0 ;
  OVR::DeviceHandle *arg2 = 0 ;
  bool result;
  
  arg1 = (OVR::DeviceHandle *)jarg1;
  arg2 = (OVR::DeviceHandle *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::DeviceHandle const & type is null");
    return 0;
  } 
  result = (bool)((OVR::DeviceHandle const *)arg1)->operator ==((OVR::DeviceHandle const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_DeviceHandle_GetDevice_AddRef(void * jarg1) {
  void * jresult ;
  OVR::DeviceHandle *arg1 = (OVR::DeviceHandle *) 0 ;
  OVR::DeviceBase *result = 0 ;
  
  arg1 = (OVR::DeviceHandle *)jarg1;
  result = (OVR::DeviceBase *)((OVR::DeviceHandle const *)arg1)->GetDevice_AddRef();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_DeviceHandle_GetType(void * jarg1) {
  int jresult ;
  OVR::DeviceHandle *arg1 = (OVR::DeviceHandle *) 0 ;
  OVR::DeviceType result;
  
  arg1 = (OVR::DeviceHandle *)jarg1;
  result = (OVR::DeviceType)((OVR::DeviceHandle const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int D_DeviceHandle_GetDeviceInfo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::DeviceHandle *arg1 = (OVR::DeviceHandle *) 0 ;
  OVR::DeviceInfo *arg2 = (OVR::DeviceInfo *) 0 ;
  bool result;
  
  arg1 = (OVR::DeviceHandle *)jarg1;
  arg2 = (OVR::DeviceInfo *)jarg2;
  result = (bool)((OVR::DeviceHandle const *)arg1)->GetDeviceInfo(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_DeviceHandle_IsAvailable(void * jarg1) {
  unsigned int jresult ;
  OVR::DeviceHandle *arg1 = (OVR::DeviceHandle *) 0 ;
  bool result;
  
  arg1 = (OVR::DeviceHandle *)jarg1;
  result = (bool)((OVR::DeviceHandle const *)arg1)->IsAvailable();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_DeviceHandle_IsCreated(void * jarg1) {
  unsigned int jresult ;
  OVR::DeviceHandle *arg1 = (OVR::DeviceHandle *) 0 ;
  bool result;
  
  arg1 = (OVR::DeviceHandle *)jarg1;
  result = (bool)((OVR::DeviceHandle const *)arg1)->IsCreated();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_DeviceHandle_IsDevice(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::DeviceHandle *arg1 = (OVR::DeviceHandle *) 0 ;
  OVR::DeviceBase *arg2 = (OVR::DeviceBase *) 0 ;
  bool result;
  
  arg1 = (OVR::DeviceHandle *)jarg1;
  arg2 = (OVR::DeviceBase *)jarg2;
  result = (bool)((OVR::DeviceHandle const *)arg1)->IsDevice(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_DeviceHandle_CreateDevice(void * jarg1) {
  void * jresult ;
  OVR::DeviceHandle *arg1 = (OVR::DeviceHandle *) 0 ;
  OVR::DeviceBase *result = 0 ;
  
  arg1 = (OVR::DeviceHandle *)jarg1;
  result = (OVR::DeviceBase *)(arg1)->CreateDevice();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_DeviceHandle_Clear(void * jarg1) {
  OVR::DeviceHandle *arg1 = (OVR::DeviceHandle *) 0 ;
  
  arg1 = (OVR::DeviceHandle *)jarg1;
  (arg1)->Clear();
}


SWIGEXPORT void * D_new_Message__SWIG_0(int jarg1, void * jarg2) {
  void * jresult ;
  OVR::MessageType arg1 ;
  OVR::DeviceBase *arg2 = (OVR::DeviceBase *) 0 ;
  OVR::Message *result = 0 ;
  
  arg1 = (OVR::MessageType)jarg1; 
  arg2 = (OVR::DeviceBase *)jarg2;
  result = (OVR::Message *)new OVR::Message(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Message__SWIG_1(int jarg1) {
  void * jresult ;
  OVR::MessageType arg1 ;
  OVR::Message *result = 0 ;
  
  arg1 = (OVR::MessageType)jarg1; 
  result = (OVR::Message *)new OVR::Message(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Message__SWIG_2() {
  void * jresult ;
  OVR::Message *result = 0 ;
  
  result = (OVR::Message *)new OVR::Message();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_Message_Type_set(void * jarg1, int jarg2) {
  OVR::Message *arg1 = (OVR::Message *) 0 ;
  OVR::MessageType arg2 ;
  
  arg1 = (OVR::Message *)jarg1;
  arg2 = (OVR::MessageType)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int D_Message_Type_get(void * jarg1) {
  int jresult ;
  OVR::Message *arg1 = (OVR::Message *) 0 ;
  OVR::MessageType result;
  
  arg1 = (OVR::Message *)jarg1;
  result = (OVR::MessageType) ((arg1)->Type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_Message_pDevice_set(void * jarg1, void * jarg2) {
  OVR::Message *arg1 = (OVR::Message *) 0 ;
  OVR::DeviceBase *arg2 = (OVR::DeviceBase *) 0 ;
  
  arg1 = (OVR::Message *)jarg1;
  arg2 = (OVR::DeviceBase *)jarg2;
  if (arg1) (arg1)->pDevice = arg2;
}


SWIGEXPORT void * D_Message_pDevice_get(void * jarg1) {
  void * jresult ;
  OVR::Message *arg1 = (OVR::Message *) 0 ;
  OVR::DeviceBase *result = 0 ;
  
  arg1 = (OVR::Message *)jarg1;
  result = (OVR::DeviceBase *) ((arg1)->pDevice);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Message(void * jarg1) {
  OVR::Message *arg1 = (OVR::Message *) 0 ;
  
  arg1 = (OVR::Message *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_MessageBodyFrame(void * jarg1) {
  void * jresult ;
  OVR::DeviceBase *arg1 = (OVR::DeviceBase *) 0 ;
  OVR::MessageBodyFrame *result = 0 ;
  
  arg1 = (OVR::DeviceBase *)jarg1;
  result = (OVR::MessageBodyFrame *)new OVR::MessageBodyFrame(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_MessageBodyFrame_Acceleration_set(void * jarg1, void * jarg2) {
  OVR::MessageBodyFrame *arg1 = (OVR::MessageBodyFrame *) 0 ;
  OVR::Vector3f *arg2 = (OVR::Vector3f *) 0 ;
  
  arg1 = (OVR::MessageBodyFrame *)jarg1;
  arg2 = (OVR::Vector3f *)jarg2;
  if (arg1) (arg1)->Acceleration = *arg2;
}


SWIGEXPORT void * D_MessageBodyFrame_Acceleration_get(void * jarg1) {
  void * jresult ;
  OVR::MessageBodyFrame *arg1 = (OVR::MessageBodyFrame *) 0 ;
  OVR::Vector3f *result = 0 ;
  
  arg1 = (OVR::MessageBodyFrame *)jarg1;
  result = (OVR::Vector3f *)& ((arg1)->Acceleration);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_MessageBodyFrame_RotationRate_set(void * jarg1, void * jarg2) {
  OVR::MessageBodyFrame *arg1 = (OVR::MessageBodyFrame *) 0 ;
  OVR::Vector3f *arg2 = (OVR::Vector3f *) 0 ;
  
  arg1 = (OVR::MessageBodyFrame *)jarg1;
  arg2 = (OVR::Vector3f *)jarg2;
  if (arg1) (arg1)->RotationRate = *arg2;
}


SWIGEXPORT void * D_MessageBodyFrame_RotationRate_get(void * jarg1) {
  void * jresult ;
  OVR::MessageBodyFrame *arg1 = (OVR::MessageBodyFrame *) 0 ;
  OVR::Vector3f *result = 0 ;
  
  arg1 = (OVR::MessageBodyFrame *)jarg1;
  result = (OVR::Vector3f *)& ((arg1)->RotationRate);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_MessageBodyFrame_MagneticField_set(void * jarg1, void * jarg2) {
  OVR::MessageBodyFrame *arg1 = (OVR::MessageBodyFrame *) 0 ;
  OVR::Vector3f *arg2 = (OVR::Vector3f *) 0 ;
  
  arg1 = (OVR::MessageBodyFrame *)jarg1;
  arg2 = (OVR::Vector3f *)jarg2;
  if (arg1) (arg1)->MagneticField = *arg2;
}


SWIGEXPORT void * D_MessageBodyFrame_MagneticField_get(void * jarg1) {
  void * jresult ;
  OVR::MessageBodyFrame *arg1 = (OVR::MessageBodyFrame *) 0 ;
  OVR::Vector3f *result = 0 ;
  
  arg1 = (OVR::MessageBodyFrame *)jarg1;
  result = (OVR::Vector3f *)& ((arg1)->MagneticField);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_MessageBodyFrame_Temperature_set(void * jarg1, float jarg2) {
  OVR::MessageBodyFrame *arg1 = (OVR::MessageBodyFrame *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::MessageBodyFrame *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->Temperature = arg2;
}


SWIGEXPORT float D_MessageBodyFrame_Temperature_get(void * jarg1) {
  float jresult ;
  OVR::MessageBodyFrame *arg1 = (OVR::MessageBodyFrame *) 0 ;
  float result;
  
  arg1 = (OVR::MessageBodyFrame *)jarg1;
  result = (float) ((arg1)->Temperature);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_MessageBodyFrame_TimeDelta_set(void * jarg1, float jarg2) {
  OVR::MessageBodyFrame *arg1 = (OVR::MessageBodyFrame *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::MessageBodyFrame *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->TimeDelta = arg2;
}


SWIGEXPORT float D_MessageBodyFrame_TimeDelta_get(void * jarg1) {
  float jresult ;
  OVR::MessageBodyFrame *arg1 = (OVR::MessageBodyFrame *) 0 ;
  float result;
  
  arg1 = (OVR::MessageBodyFrame *)jarg1;
  result = (float) ((arg1)->TimeDelta);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_MessageBodyFrame(void * jarg1) {
  OVR::MessageBodyFrame *arg1 = (OVR::MessageBodyFrame *) 0 ;
  
  arg1 = (OVR::MessageBodyFrame *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_MessageDeviceStatus(int jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  OVR::MessageType arg1 ;
  OVR::DeviceBase *arg2 = (OVR::DeviceBase *) 0 ;
  OVR::DeviceHandle *arg3 = 0 ;
  OVR::MessageDeviceStatus *result = 0 ;
  
  arg1 = (OVR::MessageType)jarg1; 
  arg2 = (OVR::DeviceBase *)jarg2;
  arg3 = (OVR::DeviceHandle *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::DeviceHandle const & type is null");
    return 0;
  } 
  result = (OVR::MessageDeviceStatus *)new OVR::MessageDeviceStatus(arg1,arg2,(OVR::DeviceHandle const &)*arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_MessageDeviceStatus_Handle_set(void * jarg1, void * jarg2) {
  OVR::MessageDeviceStatus *arg1 = (OVR::MessageDeviceStatus *) 0 ;
  OVR::DeviceHandle *arg2 = (OVR::DeviceHandle *) 0 ;
  
  arg1 = (OVR::MessageDeviceStatus *)jarg1;
  arg2 = (OVR::DeviceHandle *)jarg2;
  if (arg1) (arg1)->Handle = *arg2;
}


SWIGEXPORT void * D_MessageDeviceStatus_Handle_get(void * jarg1) {
  void * jresult ;
  OVR::MessageDeviceStatus *arg1 = (OVR::MessageDeviceStatus *) 0 ;
  OVR::DeviceHandle *result = 0 ;
  
  arg1 = (OVR::MessageDeviceStatus *)jarg1;
  result = (OVR::DeviceHandle *)& ((arg1)->Handle);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_MessageDeviceStatus(void * jarg1) {
  OVR::MessageDeviceStatus *arg1 = (OVR::MessageDeviceStatus *) 0 ;
  
  arg1 = (OVR::MessageDeviceStatus *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_MessageLatencyTestSamples(void * jarg1) {
  void * jresult ;
  OVR::DeviceBase *arg1 = (OVR::DeviceBase *) 0 ;
  OVR::MessageLatencyTestSamples *result = 0 ;
  
  arg1 = (OVR::DeviceBase *)jarg1;
  result = (OVR::MessageLatencyTestSamples *)new OVR::MessageLatencyTestSamples(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_MessageLatencyTestSamples_Samples_set(void * jarg1, void * jarg2) {
  OVR::MessageLatencyTestSamples *arg1 = (OVR::MessageLatencyTestSamples *) 0 ;
  Array< Color > arg2 ;
  Array< Color > *argp2 ;
  
  arg1 = (OVR::MessageLatencyTestSamples *)jarg1;
  argp2 = (Array< Color > *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null Array< Color >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Samples = arg2;
}


SWIGEXPORT void * D_MessageLatencyTestSamples_Samples_get(void * jarg1) {
  void * jresult ;
  OVR::MessageLatencyTestSamples *arg1 = (OVR::MessageLatencyTestSamples *) 0 ;
  Array< Color > result;
  
  arg1 = (OVR::MessageLatencyTestSamples *)jarg1;
  result =  ((arg1)->Samples);
  jresult = new Array< Color >((const Array< Color > &)result); 
  return jresult;
}


SWIGEXPORT void D_delete_MessageLatencyTestSamples(void * jarg1) {
  OVR::MessageLatencyTestSamples *arg1 = (OVR::MessageLatencyTestSamples *) 0 ;
  
  arg1 = (OVR::MessageLatencyTestSamples *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_MessageLatencyTestColorDetected(void * jarg1) {
  void * jresult ;
  OVR::DeviceBase *arg1 = (OVR::DeviceBase *) 0 ;
  OVR::MessageLatencyTestColorDetected *result = 0 ;
  
  arg1 = (OVR::DeviceBase *)jarg1;
  result = (OVR::MessageLatencyTestColorDetected *)new OVR::MessageLatencyTestColorDetected(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_MessageLatencyTestColorDetected_Elapsed_set(void * jarg1, unsigned short jarg2) {
  OVR::MessageLatencyTestColorDetected *arg1 = (OVR::MessageLatencyTestColorDetected *) 0 ;
  OVR::UInt16 arg2 ;
  
  arg1 = (OVR::MessageLatencyTestColorDetected *)jarg1;
  arg2 = (OVR::UInt16)jarg2;
  if (arg1) (arg1)->Elapsed = arg2;
}


SWIGEXPORT unsigned short D_MessageLatencyTestColorDetected_Elapsed_get(void * jarg1) {
  unsigned short jresult ;
  OVR::MessageLatencyTestColorDetected *arg1 = (OVR::MessageLatencyTestColorDetected *) 0 ;
  OVR::UInt16 result;
  
  arg1 = (OVR::MessageLatencyTestColorDetected *)jarg1;
  result = (OVR::UInt16) ((arg1)->Elapsed);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_MessageLatencyTestColorDetected_DetectedValue_set(void * jarg1, void * jarg2) {
  OVR::MessageLatencyTestColorDetected *arg1 = (OVR::MessageLatencyTestColorDetected *) 0 ;
  Color arg2 ;
  Color *argp2 ;
  
  arg1 = (OVR::MessageLatencyTestColorDetected *)jarg1;
  argp2 = (Color *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null Color");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->DetectedValue = arg2;
}


SWIGEXPORT void * D_MessageLatencyTestColorDetected_DetectedValue_get(void * jarg1) {
  void * jresult ;
  OVR::MessageLatencyTestColorDetected *arg1 = (OVR::MessageLatencyTestColorDetected *) 0 ;
  Color result;
  
  arg1 = (OVR::MessageLatencyTestColorDetected *)jarg1;
  result =  ((arg1)->DetectedValue);
  jresult = new Color((const Color &)result); 
  return jresult;
}


SWIGEXPORT void D_MessageLatencyTestColorDetected_TargetValue_set(void * jarg1, void * jarg2) {
  OVR::MessageLatencyTestColorDetected *arg1 = (OVR::MessageLatencyTestColorDetected *) 0 ;
  Color arg2 ;
  Color *argp2 ;
  
  arg1 = (OVR::MessageLatencyTestColorDetected *)jarg1;
  argp2 = (Color *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null Color");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TargetValue = arg2;
}


SWIGEXPORT void * D_MessageLatencyTestColorDetected_TargetValue_get(void * jarg1) {
  void * jresult ;
  OVR::MessageLatencyTestColorDetected *arg1 = (OVR::MessageLatencyTestColorDetected *) 0 ;
  Color result;
  
  arg1 = (OVR::MessageLatencyTestColorDetected *)jarg1;
  result =  ((arg1)->TargetValue);
  jresult = new Color((const Color &)result); 
  return jresult;
}


SWIGEXPORT void D_delete_MessageLatencyTestColorDetected(void * jarg1) {
  OVR::MessageLatencyTestColorDetected *arg1 = (OVR::MessageLatencyTestColorDetected *) 0 ;
  
  arg1 = (OVR::MessageLatencyTestColorDetected *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_MessageLatencyTestStarted(void * jarg1) {
  void * jresult ;
  OVR::DeviceBase *arg1 = (OVR::DeviceBase *) 0 ;
  OVR::MessageLatencyTestStarted *result = 0 ;
  
  arg1 = (OVR::DeviceBase *)jarg1;
  result = (OVR::MessageLatencyTestStarted *)new OVR::MessageLatencyTestStarted(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_MessageLatencyTestStarted_TargetValue_set(void * jarg1, void * jarg2) {
  OVR::MessageLatencyTestStarted *arg1 = (OVR::MessageLatencyTestStarted *) 0 ;
  Color arg2 ;
  Color *argp2 ;
  
  arg1 = (OVR::MessageLatencyTestStarted *)jarg1;
  argp2 = (Color *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null Color");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->TargetValue = arg2;
}


SWIGEXPORT void * D_MessageLatencyTestStarted_TargetValue_get(void * jarg1) {
  void * jresult ;
  OVR::MessageLatencyTestStarted *arg1 = (OVR::MessageLatencyTestStarted *) 0 ;
  Color result;
  
  arg1 = (OVR::MessageLatencyTestStarted *)jarg1;
  result =  ((arg1)->TargetValue);
  jresult = new Color((const Color &)result); 
  return jresult;
}


SWIGEXPORT void D_delete_MessageLatencyTestStarted(void * jarg1) {
  OVR::MessageLatencyTestStarted *arg1 = (OVR::MessageLatencyTestStarted *) 0 ;
  
  arg1 = (OVR::MessageLatencyTestStarted *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_MessageLatencyTestButton(void * jarg1) {
  void * jresult ;
  OVR::DeviceBase *arg1 = (OVR::DeviceBase *) 0 ;
  OVR::MessageLatencyTestButton *result = 0 ;
  
  arg1 = (OVR::DeviceBase *)jarg1;
  result = (OVR::MessageLatencyTestButton *)new OVR::MessageLatencyTestButton(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_MessageLatencyTestButton(void * jarg1) {
  OVR::MessageLatencyTestButton *arg1 = (OVR::MessageLatencyTestButton *) 0 ;
  
  arg1 = (OVR::MessageLatencyTestButton *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_SensorFusion__SWIG_0(void * jarg1) {
  void * jresult ;
  SensorDevice *arg1 = (SensorDevice *) 0 ;
  OVR::SensorFusion *result = 0 ;
  
  arg1 = (SensorDevice *)jarg1;
  result = (OVR::SensorFusion *)new OVR::SensorFusion(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_SensorFusion__SWIG_1() {
  void * jresult ;
  OVR::SensorFusion *result = 0 ;
  
  result = (OVR::SensorFusion *)new OVR::SensorFusion();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_SensorFusion(void * jarg1) {
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_SensorFusion_AttachToSensor(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  SensorDevice *arg2 = (SensorDevice *) 0 ;
  bool result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  arg2 = (SensorDevice *)jarg2;
  result = (bool)(arg1)->AttachToSensor(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_SensorFusion_IsAttachedToSensor(void * jarg1) {
  unsigned int jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  bool result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = (bool)((OVR::SensorFusion const *)arg1)->IsAttachedToSensor();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_SensorFusion_GetOrientation(void * jarg1) {
  void * jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  SwigValueWrapper< OVR::Quat< float > > result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = ((OVR::SensorFusion const *)arg1)->GetOrientation();
  jresult = new OVR::Quatf((const OVR::Quatf &)result); 
  return jresult;
}


SWIGEXPORT void * D_SensorFusion_GetPredictedOrientation__SWIG_0(void * jarg1, float jarg2) {
  void * jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  float arg2 ;
  SwigValueWrapper< OVR::Quat< float > > result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  arg2 = (float)jarg2;
  result = (arg1)->GetPredictedOrientation(arg2);
  jresult = new OVR::Quatf((const OVR::Quatf &)result); 
  return jresult;
}


SWIGEXPORT void * D_SensorFusion_GetPredictedOrientation__SWIG_1(void * jarg1) {
  void * jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  SwigValueWrapper< OVR::Quat< float > > result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = (arg1)->GetPredictedOrientation();
  jresult = new OVR::Quatf((const OVR::Quatf &)result); 
  return jresult;
}


SWIGEXPORT void * D_SensorFusion_GetAcceleration(void * jarg1) {
  void * jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  SwigValueWrapper< OVR::Vector3< float > > result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = ((OVR::SensorFusion const *)arg1)->GetAcceleration();
  jresult = new OVR::Vector3f((const OVR::Vector3f &)result); 
  return jresult;
}


SWIGEXPORT void * D_SensorFusion_GetAngularVelocity(void * jarg1) {
  void * jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  SwigValueWrapper< OVR::Vector3< float > > result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = ((OVR::SensorFusion const *)arg1)->GetAngularVelocity();
  jresult = new OVR::Vector3f((const OVR::Vector3f &)result); 
  return jresult;
}


SWIGEXPORT void * D_SensorFusion_GetMagnetometer(void * jarg1) {
  void * jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  SwigValueWrapper< OVR::Vector3< float > > result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = ((OVR::SensorFusion const *)arg1)->GetMagnetometer();
  jresult = new OVR::Vector3f((const OVR::Vector3f &)result); 
  return jresult;
}


SWIGEXPORT void * D_SensorFusion_GetCalibratedMagnetometer(void * jarg1) {
  void * jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  SwigValueWrapper< OVR::Vector3< float > > result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = ((OVR::SensorFusion const *)arg1)->GetCalibratedMagnetometer();
  jresult = new OVR::Vector3f((const OVR::Vector3f &)result); 
  return jresult;
}


SWIGEXPORT void D_SensorFusion_Reset(void * jarg1) {
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  (arg1)->Reset();
}


SWIGEXPORT void D_SensorFusion_EnableMotionTracking__SWIG_0(void * jarg1, unsigned int jarg2) {
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  bool arg2 ;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->EnableMotionTracking(arg2);
}


SWIGEXPORT void D_SensorFusion_EnableMotionTracking__SWIG_1(void * jarg1) {
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  (arg1)->EnableMotionTracking();
}


SWIGEXPORT unsigned int D_SensorFusion_IsMotionTrackingEnabled(void * jarg1) {
  unsigned int jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  bool result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = (bool)((OVR::SensorFusion const *)arg1)->IsMotionTrackingEnabled();
  jresult = result;
  return jresult;
}


SWIGEXPORT float D_SensorFusion_GetPredictionDelta(void * jarg1) {
  float jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  float result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = (float)((OVR::SensorFusion const *)arg1)->GetPredictionDelta();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SensorFusion_SetPrediction__SWIG_0(void * jarg1, float jarg2, unsigned int jarg3) {
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  float arg2 ;
  bool arg3 ;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  arg2 = (float)jarg2;
  arg3 = jarg3 ? true : false;
  (arg1)->SetPrediction(arg2,arg3);
}


SWIGEXPORT void D_SensorFusion_SetPrediction__SWIG_1(void * jarg1, float jarg2) {
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  arg2 = (float)jarg2;
  (arg1)->SetPrediction(arg2);
}


SWIGEXPORT void D_SensorFusion_SetPredictionEnabled__SWIG_0(void * jarg1, unsigned int jarg2) {
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  bool arg2 ;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->SetPredictionEnabled(arg2);
}


SWIGEXPORT void D_SensorFusion_SetPredictionEnabled__SWIG_1(void * jarg1) {
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  (arg1)->SetPredictionEnabled();
}


SWIGEXPORT unsigned int D_SensorFusion_IsPredictionEnabled(void * jarg1) {
  unsigned int jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  bool result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = (bool)(arg1)->IsPredictionEnabled();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SensorFusion_SetGravityEnabled(void * jarg1, unsigned int jarg2) {
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  bool arg2 ;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->SetGravityEnabled(arg2);
}


SWIGEXPORT unsigned int D_SensorFusion_IsGravityEnabled(void * jarg1) {
  unsigned int jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  bool result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = (bool)((OVR::SensorFusion const *)arg1)->IsGravityEnabled();
  jresult = result;
  return jresult;
}


SWIGEXPORT float D_SensorFusion_GetAccelGain(void * jarg1) {
  float jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  float result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = (float)((OVR::SensorFusion const *)arg1)->GetAccelGain();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SensorFusion_SetAccelGain(void * jarg1, float jarg2) {
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  arg2 = (float)jarg2;
  (arg1)->SetAccelGain(arg2);
}


SWIGEXPORT unsigned int D_SensorFusion_SaveMagCalibration__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  arg2 = (char *)jarg2; 
  result = (bool)((OVR::SensorFusion const *)arg1)->SaveMagCalibration((char const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_SensorFusion_SaveMagCalibration__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  bool result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = (bool)((OVR::SensorFusion const *)arg1)->SaveMagCalibration();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_SensorFusion_LoadMagCalibration__SWIG_0(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->LoadMagCalibration((char const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_SensorFusion_LoadMagCalibration__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  bool result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = (bool)(arg1)->LoadMagCalibration();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SensorFusion_SetYawCorrectionEnabled(void * jarg1, unsigned int jarg2) {
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  bool arg2 ;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->SetYawCorrectionEnabled(arg2);
}


SWIGEXPORT unsigned int D_SensorFusion_IsYawCorrectionEnabled(void * jarg1) {
  unsigned int jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  bool result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = (bool)((OVR::SensorFusion const *)arg1)->IsYawCorrectionEnabled();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SensorFusion_SetMagCalibration(void * jarg1, void * jarg2) {
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  OVR::Matrix4f *arg2 = 0 ;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  arg2 = (OVR::Matrix4f *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Matrix4f const & type is null");
    return ;
  } 
  (arg1)->SetMagCalibration((OVR::Matrix4f const &)*arg2);
}


SWIGEXPORT void * D_SensorFusion_GetMagCalibration(void * jarg1) {
  void * jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  OVR::Matrix4f result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = ((OVR::SensorFusion const *)arg1)->GetMagCalibration();
  jresult = new OVR::Matrix4f((const OVR::Matrix4f &)result); 
  return jresult;
}


SWIGEXPORT void * D_SensorFusion_GetMagCalibrationTime(void * jarg1) {
  void * jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  time_t result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = ((OVR::SensorFusion const *)arg1)->GetMagCalibrationTime();
  jresult = new time_t((const time_t &)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_SensorFusion_HasMagCalibration(void * jarg1) {
  unsigned int jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  bool result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  result = (bool)((OVR::SensorFusion const *)arg1)->HasMagCalibration();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SensorFusion_ClearMagCalibration(void * jarg1) {
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  (arg1)->ClearMagCalibration();
}


SWIGEXPORT void D_SensorFusion_ClearMagReferences(void * jarg1) {
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  (arg1)->ClearMagReferences();
}


SWIGEXPORT void * D_SensorFusion_GetCalibratedMagValue(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  OVR::Vector3f *arg2 = 0 ;
  SwigValueWrapper< OVR::Vector3< float > > result;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  arg2 = (OVR::Vector3f *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Vector3f const & type is null");
    return 0;
  } 
  result = ((OVR::SensorFusion const *)arg1)->GetCalibratedMagValue((OVR::Vector3f const &)*arg2);
  jresult = new OVR::Vector3f((const OVR::Vector3f &)result); 
  return jresult;
}


SWIGEXPORT void D_SensorFusion_OnMessage(void * jarg1, void * jarg2) {
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  OVR::MessageBodyFrame *arg2 = 0 ;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  arg2 = (OVR::MessageBodyFrame *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::MessageBodyFrame const & type is null");
    return ;
  } 
  (arg1)->OnMessage((OVR::MessageBodyFrame const &)*arg2);
}


SWIGEXPORT void D_SensorFusion_SetDelegateMessageHandler(void * jarg1, void * jarg2) {
  OVR::SensorFusion *arg1 = (OVR::SensorFusion *) 0 ;
  MessageHandler *arg2 = (MessageHandler *) 0 ;
  
  arg1 = (OVR::SensorFusion *)jarg1;
  arg2 = (MessageHandler *)jarg2;
  (arg1)->SetDelegateMessageHandler(arg2);
}


SWIGEXPORT void * D_ProfileManager_Create() {
  void * jresult ;
  OVR::ProfileManager *result = 0 ;
  
  result = (OVR::ProfileManager *)OVR::ProfileManager::Create();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_ProfileManager_GetProfileCount(void * jarg1, int jarg2) {
  int jresult ;
  OVR::ProfileManager *arg1 = (OVR::ProfileManager *) 0 ;
  OVR::ProfileType arg2 ;
  int result;
  
  arg1 = (OVR::ProfileManager *)jarg1;
  arg2 = (OVR::ProfileType)jarg2; 
  result = (int)(arg1)->GetProfileCount(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_ProfileManager_GetProfileName(void * jarg1, int jarg2, unsigned int jarg3) {
  char * jresult ;
  OVR::ProfileManager *arg1 = (OVR::ProfileManager *) 0 ;
  OVR::ProfileType arg2 ;
  unsigned int arg3 ;
  char *result = 0 ;
  
  arg1 = (OVR::ProfileManager *)jarg1;
  arg2 = (OVR::ProfileType)jarg2; 
  arg3 = (unsigned int)jarg3;
  result = (char *)(arg1)->GetProfileName(arg2,arg3);
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_ProfileManager_HasProfile(void * jarg1, int jarg2, char * jarg3) {
  unsigned int jresult ;
  OVR::ProfileManager *arg1 = (OVR::ProfileManager *) 0 ;
  OVR::ProfileType arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (OVR::ProfileManager *)jarg1;
  arg2 = (OVR::ProfileType)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->HasProfile(arg2,(char const *)arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_ProfileManager_LoadProfile__SWIG_0(void * jarg1, int jarg2, unsigned int jarg3) {
  void * jresult ;
  OVR::ProfileManager *arg1 = (OVR::ProfileManager *) 0 ;
  OVR::ProfileType arg2 ;
  unsigned int arg3 ;
  OVR::Profile *result = 0 ;
  
  arg1 = (OVR::ProfileManager *)jarg1;
  arg2 = (OVR::ProfileType)jarg2; 
  arg3 = (unsigned int)jarg3;
  result = (OVR::Profile *)(arg1)->LoadProfile(arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_ProfileManager_LoadProfile__SWIG_1(void * jarg1, int jarg2, char * jarg3) {
  void * jresult ;
  OVR::ProfileManager *arg1 = (OVR::ProfileManager *) 0 ;
  OVR::ProfileType arg2 ;
  char *arg3 = (char *) 0 ;
  OVR::Profile *result = 0 ;
  
  arg1 = (OVR::ProfileManager *)jarg1;
  arg2 = (OVR::ProfileType)jarg2; 
  arg3 = (char *)jarg3; 
  result = (OVR::Profile *)(arg1)->LoadProfile(arg2,(char const *)arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_ProfileManager_GetDeviceDefaultProfile(void * jarg1, int jarg2) {
  void * jresult ;
  OVR::ProfileManager *arg1 = (OVR::ProfileManager *) 0 ;
  OVR::ProfileType arg2 ;
  OVR::Profile *result = 0 ;
  
  arg1 = (OVR::ProfileManager *)jarg1;
  arg2 = (OVR::ProfileType)jarg2; 
  result = (OVR::Profile *)(arg1)->GetDeviceDefaultProfile(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * D_ProfileManager_GetDefaultProfileName(void * jarg1, int jarg2) {
  char * jresult ;
  OVR::ProfileManager *arg1 = (OVR::ProfileManager *) 0 ;
  OVR::ProfileType arg2 ;
  char *result = 0 ;
  
  arg1 = (OVR::ProfileManager *)jarg1;
  arg2 = (OVR::ProfileType)jarg2; 
  result = (char *)(arg1)->GetDefaultProfileName(arg2);
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_ProfileManager_SetDefaultProfileName(void * jarg1, int jarg2, char * jarg3) {
  unsigned int jresult ;
  OVR::ProfileManager *arg1 = (OVR::ProfileManager *) 0 ;
  OVR::ProfileType arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (OVR::ProfileManager *)jarg1;
  arg2 = (OVR::ProfileType)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->SetDefaultProfileName(arg2,(char const *)arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_ProfileManager_Save(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::ProfileManager *arg1 = (OVR::ProfileManager *) 0 ;
  OVR::Profile *arg2 = (OVR::Profile *) 0 ;
  bool result;
  
  arg1 = (OVR::ProfileManager *)jarg1;
  arg2 = (OVR::Profile *)jarg2;
  result = (bool)(arg1)->Save((OVR::Profile const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_ProfileManager_Delete(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::ProfileManager *arg1 = (OVR::ProfileManager *) 0 ;
  OVR::Profile *arg2 = (OVR::Profile *) 0 ;
  bool result;
  
  arg1 = (OVR::ProfileManager *)jarg1;
  arg2 = (OVR::Profile *)jarg2;
  result = (bool)(arg1)->Delete((OVR::Profile const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Profile_Type_set(void * jarg1, int jarg2) {
  OVR::Profile *arg1 = (OVR::Profile *) 0 ;
  OVR::ProfileType arg2 ;
  
  arg1 = (OVR::Profile *)jarg1;
  arg2 = (OVR::ProfileType)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int D_Profile_Type_get(void * jarg1) {
  int jresult ;
  OVR::Profile *arg1 = (OVR::Profile *) 0 ;
  OVR::ProfileType result;
  
  arg1 = (OVR::Profile *)jarg1;
  result = (OVR::ProfileType) ((arg1)->Type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_Profile_Name_set(void * jarg1, char * jarg2) {
  OVR::Profile *arg1 = (OVR::Profile *) 0 ;
  char *arg2 ;
  
  arg1 = (OVR::Profile *)jarg1;
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Name, (const char *)arg2, OVR::Profile::MaxNameLen-1);
      arg1->Name[OVR::Profile::MaxNameLen-1] = 0;
    } else {
      arg1->Name[0] = 0;
    }
  }
}


SWIGEXPORT char * D_Profile_Name_get(void * jarg1) {
  char * jresult ;
  OVR::Profile *arg1 = (OVR::Profile *) 0 ;
  char *result = 0 ;
  
  arg1 = (OVR::Profile *)jarg1;
  result = (char *)(char *) ((arg1)->Name);
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * D_Profile_Clone(void * jarg1) {
  void * jresult ;
  OVR::Profile *arg1 = (OVR::Profile *) 0 ;
  OVR::Profile *result = 0 ;
  
  arg1 = (OVR::Profile *)jarg1;
  result = (OVR::Profile *)((OVR::Profile const *)arg1)->Clone();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_Profile_GetGender(void * jarg1) {
  int jresult ;
  OVR::Profile *arg1 = (OVR::Profile *) 0 ;
  OVR::Profile::GenderType result;
  
  arg1 = (OVR::Profile *)jarg1;
  result = (OVR::Profile::GenderType)(arg1)->GetGender();
  jresult = result; 
  return jresult;
}


SWIGEXPORT float D_Profile_GetPlayerHeight(void * jarg1) {
  float jresult ;
  OVR::Profile *arg1 = (OVR::Profile *) 0 ;
  float result;
  
  arg1 = (OVR::Profile *)jarg1;
  result = (float)(arg1)->GetPlayerHeight();
  jresult = result;
  return jresult;
}


SWIGEXPORT float D_Profile_GetIPD(void * jarg1) {
  float jresult ;
  OVR::Profile *arg1 = (OVR::Profile *) 0 ;
  float result;
  
  arg1 = (OVR::Profile *)jarg1;
  result = (float)(arg1)->GetIPD();
  jresult = result;
  return jresult;
}


SWIGEXPORT float D_Profile_GetEyeHeight(void * jarg1) {
  float jresult ;
  OVR::Profile *arg1 = (OVR::Profile *) 0 ;
  float result;
  
  arg1 = (OVR::Profile *)jarg1;
  result = (float)(arg1)->GetEyeHeight();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Profile_SetGender(void * jarg1, int jarg2) {
  OVR::Profile *arg1 = (OVR::Profile *) 0 ;
  OVR::Profile::GenderType arg2 ;
  
  arg1 = (OVR::Profile *)jarg1;
  arg2 = (OVR::Profile::GenderType)jarg2; 
  (arg1)->SetGender(arg2);
}


SWIGEXPORT void D_Profile_SetPlayerHeight(void * jarg1, float jarg2) {
  OVR::Profile *arg1 = (OVR::Profile *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::Profile *)jarg1;
  arg2 = (float)jarg2;
  (arg1)->SetPlayerHeight(arg2);
}


SWIGEXPORT void D_Profile_SetIPD(void * jarg1, float jarg2) {
  OVR::Profile *arg1 = (OVR::Profile *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::Profile *)jarg1;
  arg2 = (float)jarg2;
  (arg1)->SetIPD(arg2);
}


SWIGEXPORT void D_delete_Profile(void * jarg1) {
  OVR::Profile *arg1 = (OVR::Profile *) 0 ;
  
  arg1 = (OVR::Profile *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_HMDProfile_Clone(void * jarg1) {
  void * jresult ;
  OVR::HMDProfile *arg1 = (OVR::HMDProfile *) 0 ;
  OVR::Profile *result = 0 ;
  
  arg1 = (OVR::HMDProfile *)jarg1;
  result = (OVR::Profile *)((OVR::HMDProfile const *)arg1)->Clone();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_HMDProfile_SetLL(void * jarg1, int jarg2) {
  OVR::HMDProfile *arg1 = (OVR::HMDProfile *) 0 ;
  int arg2 ;
  
  arg1 = (OVR::HMDProfile *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->SetLL(arg2);
}


SWIGEXPORT void D_HMDProfile_SetLR(void * jarg1, int jarg2) {
  OVR::HMDProfile *arg1 = (OVR::HMDProfile *) 0 ;
  int arg2 ;
  
  arg1 = (OVR::HMDProfile *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->SetLR(arg2);
}


SWIGEXPORT void D_HMDProfile_SetRL(void * jarg1, int jarg2) {
  OVR::HMDProfile *arg1 = (OVR::HMDProfile *) 0 ;
  int arg2 ;
  
  arg1 = (OVR::HMDProfile *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->SetRL(arg2);
}


SWIGEXPORT void D_HMDProfile_SetRR(void * jarg1, int jarg2) {
  OVR::HMDProfile *arg1 = (OVR::HMDProfile *) 0 ;
  int arg2 ;
  
  arg1 = (OVR::HMDProfile *)jarg1;
  arg2 = (int)jarg2;
  (arg1)->SetRR(arg2);
}


SWIGEXPORT int D_HMDProfile_GetLL(void * jarg1) {
  int jresult ;
  OVR::HMDProfile *arg1 = (OVR::HMDProfile *) 0 ;
  int result;
  
  arg1 = (OVR::HMDProfile *)jarg1;
  result = (int)(arg1)->GetLL();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_HMDProfile_GetLR(void * jarg1) {
  int jresult ;
  OVR::HMDProfile *arg1 = (OVR::HMDProfile *) 0 ;
  int result;
  
  arg1 = (OVR::HMDProfile *)jarg1;
  result = (int)(arg1)->GetLR();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_HMDProfile_GetRL(void * jarg1) {
  int jresult ;
  OVR::HMDProfile *arg1 = (OVR::HMDProfile *) 0 ;
  int result;
  
  arg1 = (OVR::HMDProfile *)jarg1;
  result = (int)(arg1)->GetRL();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_HMDProfile_GetRR(void * jarg1) {
  int jresult ;
  OVR::HMDProfile *arg1 = (OVR::HMDProfile *) 0 ;
  int result;
  
  arg1 = (OVR::HMDProfile *)jarg1;
  result = (int)(arg1)->GetRR();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_HMDProfile(void * jarg1) {
  OVR::HMDProfile *arg1 = (OVR::HMDProfile *) 0 ;
  
  arg1 = (OVR::HMDProfile *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_RiftDK1Profile_Clone(void * jarg1) {
  void * jresult ;
  OVR::RiftDK1Profile *arg1 = (OVR::RiftDK1Profile *) 0 ;
  OVR::Profile *result = 0 ;
  
  arg1 = (OVR::RiftDK1Profile *)jarg1;
  result = (OVR::Profile *)((OVR::RiftDK1Profile const *)arg1)->Clone();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_RiftDK1Profile_GetEyeCup(void * jarg1) {
  int jresult ;
  OVR::RiftDK1Profile *arg1 = (OVR::RiftDK1Profile *) 0 ;
  OVR::EyeCupType result;
  
  arg1 = (OVR::RiftDK1Profile *)jarg1;
  result = (OVR::EyeCupType)(arg1)->GetEyeCup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_RiftDK1Profile_SetEyeCup(void * jarg1, int jarg2) {
  OVR::RiftDK1Profile *arg1 = (OVR::RiftDK1Profile *) 0 ;
  OVR::EyeCupType arg2 ;
  
  arg1 = (OVR::RiftDK1Profile *)jarg1;
  arg2 = (OVR::EyeCupType)jarg2; 
  (arg1)->SetEyeCup(arg2);
}


SWIGEXPORT void D_delete_RiftDK1Profile(void * jarg1) {
  OVR::RiftDK1Profile *arg1 = (OVR::RiftDK1Profile *) 0 ;
  
  arg1 = (OVR::RiftDK1Profile *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_RiftDKHDProfile_Clone(void * jarg1) {
  void * jresult ;
  OVR::RiftDKHDProfile *arg1 = (OVR::RiftDKHDProfile *) 0 ;
  OVR::Profile *result = 0 ;
  
  arg1 = (OVR::RiftDKHDProfile *)jarg1;
  result = (OVR::Profile *)((OVR::RiftDKHDProfile const *)arg1)->Clone();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_RiftDKHDProfile_GetEyeCup(void * jarg1) {
  int jresult ;
  OVR::RiftDKHDProfile *arg1 = (OVR::RiftDKHDProfile *) 0 ;
  OVR::EyeCupType result;
  
  arg1 = (OVR::RiftDKHDProfile *)jarg1;
  result = (OVR::EyeCupType)(arg1)->GetEyeCup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_RiftDKHDProfile_SetEyeCup(void * jarg1, int jarg2) {
  OVR::RiftDKHDProfile *arg1 = (OVR::RiftDKHDProfile *) 0 ;
  OVR::EyeCupType arg2 ;
  
  arg1 = (OVR::RiftDKHDProfile *)jarg1;
  arg2 = (OVR::EyeCupType)jarg2; 
  (arg1)->SetEyeCup(arg2);
}


SWIGEXPORT void D_delete_RiftDKHDProfile(void * jarg1) {
  OVR::RiftDKHDProfile *arg1 = (OVR::RiftDKHDProfile *) 0 ;
  
  arg1 = (OVR::RiftDKHDProfile *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_GetBaseOVRPath(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  OVR::String result;
  
  arg1 = jarg1 ? true : false;
  result = OVR::GetBaseOVRPath(arg1);
  jresult = new OVR::String((const OVR::String &)result); 
  return jresult;
}


SWIGEXPORT void D_delete_HIDDeviceBase(void * jarg1) {
  OVR::HIDDeviceBase *arg1 = (OVR::HIDDeviceBase *) 0 ;
  
  arg1 = (OVR::HIDDeviceBase *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_HIDDeviceBase_SetFeatureReport(void * jarg1, void * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  OVR::HIDDeviceBase *arg1 = (OVR::HIDDeviceBase *) 0 ;
  OVR::UByte *arg2 = (OVR::UByte *) 0 ;
  OVR::UInt32 arg3 ;
  bool result;
  
  arg1 = (OVR::HIDDeviceBase *)jarg1;
  arg2 = (OVR::UByte *)jarg2;
  arg3 = (OVR::UInt32)jarg3;
  result = (bool)(arg1)->SetFeatureReport(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_HIDDeviceBase_GetFeatureReport(void * jarg1, void * jarg2, unsigned long jarg3) {
  unsigned int jresult ;
  OVR::HIDDeviceBase *arg1 = (OVR::HIDDeviceBase *) 0 ;
  OVR::UByte *arg2 = (OVR::UByte *) 0 ;
  OVR::UInt32 arg3 ;
  bool result;
  
  arg1 = (OVR::HIDDeviceBase *)jarg1;
  arg2 = (OVR::UByte *)jarg2;
  arg3 = (OVR::UInt32)jarg3;
  result = (bool)(arg1)->GetFeatureReport(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_MessageHandler() {
  void * jresult ;
  OVR::MessageHandler *result = 0 ;
  
  result = (OVR::MessageHandler *)new OVR::MessageHandler();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_MessageHandler(void * jarg1) {
  OVR::MessageHandler *arg1 = (OVR::MessageHandler *) 0 ;
  
  arg1 = (OVR::MessageHandler *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_MessageHandler_IsHandlerInstalled(void * jarg1) {
  unsigned int jresult ;
  OVR::MessageHandler *arg1 = (OVR::MessageHandler *) 0 ;
  bool result;
  
  arg1 = (OVR::MessageHandler *)jarg1;
  result = (bool)((OVR::MessageHandler const *)arg1)->IsHandlerInstalled();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_MessageHandler_RemoveHandlerFromDevices(void * jarg1) {
  OVR::MessageHandler *arg1 = (OVR::MessageHandler *) 0 ;
  
  arg1 = (OVR::MessageHandler *)jarg1;
  (arg1)->RemoveHandlerFromDevices();
}


SWIGEXPORT void * D_MessageHandler_GetHandlerLock(void * jarg1) {
  void * jresult ;
  OVR::MessageHandler *arg1 = (OVR::MessageHandler *) 0 ;
  OVR::Lock *result = 0 ;
  
  arg1 = (OVR::MessageHandler *)jarg1;
  result = (OVR::Lock *)((OVR::MessageHandler const *)arg1)->GetHandlerLock();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_MessageHandler_OnMessage(void * jarg1, void * jarg2) {
  OVR::MessageHandler *arg1 = (OVR::MessageHandler *) 0 ;
  OVR::Message *arg2 = 0 ;
  
  arg1 = (OVR::MessageHandler *)jarg1;
  arg2 = (OVR::Message *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Message const & type is null");
    return ;
  } 
  (arg1)->OnMessage((OVR::Message const &)*arg2);
}


SWIGEXPORT unsigned int D_MessageHandler_SupportsMessageType(void * jarg1, int jarg2) {
  unsigned int jresult ;
  OVR::MessageHandler *arg1 = (OVR::MessageHandler *) 0 ;
  OVR::MessageType arg2 ;
  bool result;
  
  arg1 = (OVR::MessageHandler *)jarg1;
  arg2 = (OVR::MessageType)jarg2; 
  result = (bool)((OVR::MessageHandler const *)arg1)->SupportsMessageType(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_DeviceBase(void * jarg1) {
  OVR::DeviceBase *arg1 = (OVR::DeviceBase *) 0 ;
  
  arg1 = (OVR::DeviceBase *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_DeviceBase_AddRef(void * jarg1) {
  OVR::DeviceBase *arg1 = (OVR::DeviceBase *) 0 ;
  
  arg1 = (OVR::DeviceBase *)jarg1;
  (arg1)->AddRef();
}


SWIGEXPORT void D_DeviceBase_Release(void * jarg1) {
  OVR::DeviceBase *arg1 = (OVR::DeviceBase *) 0 ;
  
  arg1 = (OVR::DeviceBase *)jarg1;
  (arg1)->Release();
}


SWIGEXPORT void * D_DeviceBase_GetParent(void * jarg1) {
  void * jresult ;
  OVR::DeviceBase *arg1 = (OVR::DeviceBase *) 0 ;
  OVR::DeviceBase *result = 0 ;
  
  arg1 = (OVR::DeviceBase *)jarg1;
  result = (OVR::DeviceBase *)((OVR::DeviceBase const *)arg1)->GetParent();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_DeviceBase_GetManager(void * jarg1) {
  void * jresult ;
  OVR::DeviceBase *arg1 = (OVR::DeviceBase *) 0 ;
  OVR::DeviceManager *result = 0 ;
  
  arg1 = (OVR::DeviceBase *)jarg1;
  result = (OVR::DeviceManager *)((OVR::DeviceBase const *)arg1)->GetManager();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_DeviceBase_SetMessageHandler(void * jarg1, void * jarg2) {
  OVR::DeviceBase *arg1 = (OVR::DeviceBase *) 0 ;
  OVR::MessageHandler *arg2 = (OVR::MessageHandler *) 0 ;
  
  arg1 = (OVR::DeviceBase *)jarg1;
  arg2 = (OVR::MessageHandler *)jarg2;
  (arg1)->SetMessageHandler(arg2);
}


SWIGEXPORT void * D_DeviceBase_GetMessageHandler(void * jarg1) {
  void * jresult ;
  OVR::DeviceBase *arg1 = (OVR::DeviceBase *) 0 ;
  OVR::MessageHandler *result = 0 ;
  
  arg1 = (OVR::DeviceBase *)jarg1;
  result = (OVR::MessageHandler *)((OVR::DeviceBase const *)arg1)->GetMessageHandler();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_DeviceBase_GetType(void * jarg1) {
  int jresult ;
  OVR::DeviceBase *arg1 = (OVR::DeviceBase *) 0 ;
  OVR::DeviceType result;
  
  arg1 = (OVR::DeviceBase *)jarg1;
  result = (OVR::DeviceType)((OVR::DeviceBase const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int D_DeviceBase_GetDeviceInfo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::DeviceBase *arg1 = (OVR::DeviceBase *) 0 ;
  OVR::DeviceInfo *arg2 = (OVR::DeviceInfo *) 0 ;
  bool result;
  
  arg1 = (OVR::DeviceBase *)jarg1;
  arg2 = (OVR::DeviceInfo *)jarg2;
  result = (bool)((OVR::DeviceBase const *)arg1)->GetDeviceInfo(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_DeviceBase_GetHandlerLock(void * jarg1) {
  void * jresult ;
  OVR::DeviceBase *arg1 = (OVR::DeviceBase *) 0 ;
  OVR::Lock *result = 0 ;
  
  arg1 = (OVR::DeviceBase *)jarg1;
  result = (OVR::Lock *)((OVR::DeviceBase const *)arg1)->GetHandlerLock();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_DeviceInfo() {
  void * jresult ;
  OVR::DeviceInfo *result = 0 ;
  
  result = (OVR::DeviceInfo *)new OVR::DeviceInfo();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_DeviceInfo_InfoClassType_get(void * jarg1) {
  int jresult ;
  OVR::DeviceInfo *arg1 = (OVR::DeviceInfo *) 0 ;
  OVR::DeviceType result;
  
  arg1 = (OVR::DeviceInfo *)jarg1;
  result = (OVR::DeviceType)(OVR::DeviceType) ((arg1)->InfoClassType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_DeviceInfo_Type_set(void * jarg1, int jarg2) {
  OVR::DeviceInfo *arg1 = (OVR::DeviceInfo *) 0 ;
  OVR::DeviceType arg2 ;
  
  arg1 = (OVR::DeviceInfo *)jarg1;
  arg2 = (OVR::DeviceType)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int D_DeviceInfo_Type_get(void * jarg1) {
  int jresult ;
  OVR::DeviceInfo *arg1 = (OVR::DeviceInfo *) 0 ;
  OVR::DeviceType result;
  
  arg1 = (OVR::DeviceInfo *)jarg1;
  result = (OVR::DeviceType) ((arg1)->Type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_DeviceInfo_ProductName_set(void * jarg1, char * jarg2) {
  OVR::DeviceInfo *arg1 = (OVR::DeviceInfo *) 0 ;
  char *arg2 ;
  
  arg1 = (OVR::DeviceInfo *)jarg1;
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->ProductName, (const char *)arg2, OVR::DeviceInfo::MaxNameLength-1);
      arg1->ProductName[OVR::DeviceInfo::MaxNameLength-1] = 0;
    } else {
      arg1->ProductName[0] = 0;
    }
  }
}


SWIGEXPORT char * D_DeviceInfo_ProductName_get(void * jarg1) {
  char * jresult ;
  OVR::DeviceInfo *arg1 = (OVR::DeviceInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (OVR::DeviceInfo *)jarg1;
  result = (char *)(char *) ((arg1)->ProductName);
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void D_DeviceInfo_Manufacturer_set(void * jarg1, char * jarg2) {
  OVR::DeviceInfo *arg1 = (OVR::DeviceInfo *) 0 ;
  char *arg2 ;
  
  arg1 = (OVR::DeviceInfo *)jarg1;
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->Manufacturer, (const char *)arg2, OVR::DeviceInfo::MaxNameLength-1);
      arg1->Manufacturer[OVR::DeviceInfo::MaxNameLength-1] = 0;
    } else {
      arg1->Manufacturer[0] = 0;
    }
  }
}


SWIGEXPORT char * D_DeviceInfo_Manufacturer_get(void * jarg1) {
  char * jresult ;
  OVR::DeviceInfo *arg1 = (OVR::DeviceInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (OVR::DeviceInfo *)jarg1;
  result = (char *)(char *) ((arg1)->Manufacturer);
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void D_DeviceInfo_Version_set(void * jarg1, unsigned int jarg2) {
  OVR::DeviceInfo *arg1 = (OVR::DeviceInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (OVR::DeviceInfo *)jarg1;
  arg2 = (unsigned int)jarg2;
  if (arg1) (arg1)->Version = arg2;
}


SWIGEXPORT unsigned int D_DeviceInfo_Version_get(void * jarg1) {
  unsigned int jresult ;
  OVR::DeviceInfo *arg1 = (OVR::DeviceInfo *) 0 ;
  unsigned int result;
  
  arg1 = (OVR::DeviceInfo *)jarg1;
  result = (unsigned int) ((arg1)->Version);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_DeviceInfo(void * jarg1) {
  OVR::DeviceInfo *arg1 = (OVR::DeviceInfo *) 0 ;
  
  arg1 = (OVR::DeviceInfo *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_DeviceEnumerationArgs(int jarg1, unsigned int jarg2) {
  void * jresult ;
  OVR::DeviceType arg1 ;
  bool arg2 ;
  OVR::DeviceEnumerationArgs *result = 0 ;
  
  arg1 = (OVR::DeviceType)jarg1; 
  arg2 = jarg2 ? true : false;
  result = (OVR::DeviceEnumerationArgs *)new OVR::DeviceEnumerationArgs(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_DeviceEnumerationArgs_MatchRule(void * jarg1, int jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  OVR::DeviceEnumerationArgs *arg1 = (OVR::DeviceEnumerationArgs *) 0 ;
  OVR::DeviceType arg2 ;
  bool arg3 ;
  bool result;
  
  arg1 = (OVR::DeviceEnumerationArgs *)jarg1;
  arg2 = (OVR::DeviceType)jarg2; 
  arg3 = jarg3 ? true : false;
  result = (bool)((OVR::DeviceEnumerationArgs const *)arg1)->MatchRule(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_DeviceEnumerationArgs(void * jarg1) {
  OVR::DeviceEnumerationArgs *arg1 = (OVR::DeviceEnumerationArgs *) 0 ;
  
  arg1 = (OVR::DeviceEnumerationArgs *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_DeviceManager_GetType(void * jarg1) {
  int jresult ;
  OVR::DeviceManager *arg1 = (OVR::DeviceManager *) 0 ;
  OVR::DeviceType result;
  
  arg1 = (OVR::DeviceManager *)jarg1;
  result = (OVR::DeviceType)((OVR::DeviceManager const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * D_DeviceManager_GetManager(void * jarg1) {
  void * jresult ;
  OVR::DeviceManager *arg1 = (OVR::DeviceManager *) 0 ;
  OVR::DeviceManager *result = 0 ;
  
  arg1 = (OVR::DeviceManager *)jarg1;
  result = (OVR::DeviceManager *)((OVR::DeviceManager const *)arg1)->GetManager();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_DeviceManager_GetProfileManager(void * jarg1) {
  void * jresult ;
  OVR::DeviceManager *arg1 = (OVR::DeviceManager *) 0 ;
  OVR::ProfileManager *result = 0 ;
  
  arg1 = (OVR::DeviceManager *)jarg1;
  result = (OVR::ProfileManager *)((OVR::DeviceManager const *)arg1)->GetProfileManager();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_DeviceManager_EnumerateDevicesEx(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::DeviceManager *arg1 = (OVR::DeviceManager *) 0 ;
  OVR::DeviceEnumerationArgs *arg2 = 0 ;
  SwigValueWrapper< OVR::DeviceEnumerator< > > result;
  
  arg1 = (OVR::DeviceManager *)jarg1;
  arg2 = (OVR::DeviceEnumerationArgs *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::DeviceEnumerationArgs const & type is null");
    return 0;
  } 
  result = (arg1)->EnumerateDevicesEx((OVR::DeviceEnumerationArgs const &)*arg2);
  jresult = new OVR::DeviceEnumerator< >((const OVR::DeviceEnumerator< > &)result); 
  return jresult;
}


SWIGEXPORT void * D_DeviceManager_Create() {
  void * jresult ;
  OVR::DeviceManager *result = 0 ;
  
  result = (OVR::DeviceManager *)OVR::DeviceManager::Create();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_DeviceManager_AddDevice_NeedsLock(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::DeviceManager *arg1 = (OVR::DeviceManager *) 0 ;
  OVR::DeviceCreateDesc *arg2 = 0 ;
  SwigValueWrapper< OVR::Ptr< OVR::DeviceCreateDesc > > result;
  
  arg1 = (OVR::DeviceManager *)jarg1;
  arg2 = (OVR::DeviceCreateDesc *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::DeviceCreateDesc const & type is null");
    return 0;
  } 
  result = (arg1)->AddDevice_NeedsLock((OVR::DeviceCreateDesc const &)*arg2);
  jresult = new OVR::Ptr< OVR::DeviceCreateDesc >((const OVR::Ptr< OVR::DeviceCreateDesc > &)result); 
  return jresult;
}


SWIGEXPORT void D_delete_DeviceManager(void * jarg1) {
  OVR::DeviceManager *arg1 = (OVR::DeviceManager *) 0 ;
  
  arg1 = (OVR::DeviceManager *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_HMDInfo_HResolution_set(void * jarg1, unsigned int jarg2) {
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  arg2 = (unsigned int)jarg2;
  if (arg1) (arg1)->HResolution = arg2;
}


SWIGEXPORT unsigned int D_HMDInfo_HResolution_get(void * jarg1) {
  unsigned int jresult ;
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  unsigned int result;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  result = (unsigned int) ((arg1)->HResolution);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_HMDInfo_VResolution_set(void * jarg1, unsigned int jarg2) {
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  arg2 = (unsigned int)jarg2;
  if (arg1) (arg1)->VResolution = arg2;
}


SWIGEXPORT unsigned int D_HMDInfo_VResolution_get(void * jarg1) {
  unsigned int jresult ;
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  unsigned int result;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  result = (unsigned int) ((arg1)->VResolution);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_HMDInfo_HScreenSize_set(void * jarg1, float jarg2) {
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->HScreenSize = arg2;
}


SWIGEXPORT float D_HMDInfo_HScreenSize_get(void * jarg1) {
  float jresult ;
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  float result;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  result = (float) ((arg1)->HScreenSize);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_HMDInfo_VScreenSize_set(void * jarg1, float jarg2) {
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->VScreenSize = arg2;
}


SWIGEXPORT float D_HMDInfo_VScreenSize_get(void * jarg1) {
  float jresult ;
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  float result;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  result = (float) ((arg1)->VScreenSize);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_HMDInfo_VScreenCenter_set(void * jarg1, float jarg2) {
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->VScreenCenter = arg2;
}


SWIGEXPORT float D_HMDInfo_VScreenCenter_get(void * jarg1) {
  float jresult ;
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  float result;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  result = (float) ((arg1)->VScreenCenter);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_HMDInfo_EyeToScreenDistance_set(void * jarg1, float jarg2) {
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->EyeToScreenDistance = arg2;
}


SWIGEXPORT float D_HMDInfo_EyeToScreenDistance_get(void * jarg1) {
  float jresult ;
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  float result;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  result = (float) ((arg1)->EyeToScreenDistance);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_HMDInfo_LensSeparationDistance_set(void * jarg1, float jarg2) {
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->LensSeparationDistance = arg2;
}


SWIGEXPORT float D_HMDInfo_LensSeparationDistance_get(void * jarg1) {
  float jresult ;
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  float result;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  result = (float) ((arg1)->LensSeparationDistance);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_HMDInfo_InterpupillaryDistance_set(void * jarg1, float jarg2) {
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->InterpupillaryDistance = arg2;
}


SWIGEXPORT float D_HMDInfo_InterpupillaryDistance_get(void * jarg1) {
  float jresult ;
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  float result;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  result = (float) ((arg1)->InterpupillaryDistance);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_HMDInfo_DistortionK_set(void * jarg1, void * jarg2) {
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  float *arg2 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->DistortionK;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * D_HMDInfo_DistortionK_get(void * jarg1) {
  void * jresult ;
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  float *result = 0 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  result = (float *)(float *) ((arg1)->DistortionK);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_HMDInfo_ChromaAbCorrection_set(void * jarg1, void * jarg2) {
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  float *arg2 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->ChromaAbCorrection;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * D_HMDInfo_ChromaAbCorrection_get(void * jarg1) {
  void * jresult ;
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  float *result = 0 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  result = (float *)(float *) ((arg1)->ChromaAbCorrection);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_HMDInfo_DesktopX_set(void * jarg1, int jarg2) {
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  int arg2 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->DesktopX = arg2;
}


SWIGEXPORT int D_HMDInfo_DesktopX_get(void * jarg1) {
  int jresult ;
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  int result;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  result = (int) ((arg1)->DesktopX);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_HMDInfo_DesktopY_set(void * jarg1, int jarg2) {
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  int arg2 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->DesktopY = arg2;
}


SWIGEXPORT int D_HMDInfo_DesktopY_get(void * jarg1) {
  int jresult ;
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  int result;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  result = (int) ((arg1)->DesktopY);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_HMDInfo_DisplayDeviceName_set(void * jarg1, char * jarg2) {
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  char *arg2 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->DisplayDeviceName, (const char *)arg2, 32-1);
      arg1->DisplayDeviceName[32-1] = 0;
    } else {
      arg1->DisplayDeviceName[0] = 0;
    }
  }
}


SWIGEXPORT char * D_HMDInfo_DisplayDeviceName_get(void * jarg1) {
  char * jresult ;
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  result = (char *)(char *) ((arg1)->DisplayDeviceName);
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void D_HMDInfo_DisplayId_set(void * jarg1, long jarg2) {
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  long arg2 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  arg2 = (long)jarg2;
  if (arg1) (arg1)->DisplayId = arg2;
}


SWIGEXPORT long D_HMDInfo_DisplayId_get(void * jarg1) {
  long jresult ;
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  long result;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  result = (long) ((arg1)->DisplayId);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_HMDInfo() {
  void * jresult ;
  OVR::HMDInfo *result = 0 ;
  
  result = (OVR::HMDInfo *)new OVR::HMDInfo();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_HMDInfo_IsSameDisplay(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  OVR::HMDInfo *arg2 = 0 ;
  bool result;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  arg2 = (OVR::HMDInfo *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::HMDInfo const & type is null");
    return 0;
  } 
  result = (bool)((OVR::HMDInfo const *)arg1)->IsSameDisplay((OVR::HMDInfo const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_HMDInfo(void * jarg1) {
  OVR::HMDInfo *arg1 = (OVR::HMDInfo *) 0 ;
  
  arg1 = (OVR::HMDInfo *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_HMDDevice_GetType(void * jarg1) {
  int jresult ;
  OVR::HMDDevice *arg1 = (OVR::HMDDevice *) 0 ;
  OVR::DeviceType result;
  
  arg1 = (OVR::HMDDevice *)jarg1;
  result = (OVR::DeviceType)((OVR::HMDDevice const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * D_HMDDevice_GetSensor(void * jarg1) {
  void * jresult ;
  OVR::HMDDevice *arg1 = (OVR::HMDDevice *) 0 ;
  OVR::SensorDevice *result = 0 ;
  
  arg1 = (OVR::HMDDevice *)jarg1;
  result = (OVR::SensorDevice *)(arg1)->GetSensor();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_HMDDevice_GetProfile(void * jarg1) {
  void * jresult ;
  OVR::HMDDevice *arg1 = (OVR::HMDDevice *) 0 ;
  OVR::Profile *result = 0 ;
  
  arg1 = (OVR::HMDDevice *)jarg1;
  result = (OVR::Profile *)((OVR::HMDDevice const *)arg1)->GetProfile();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * D_HMDDevice_GetProfileName(void * jarg1) {
  char * jresult ;
  OVR::HMDDevice *arg1 = (OVR::HMDDevice *) 0 ;
  char *result = 0 ;
  
  arg1 = (OVR::HMDDevice *)jarg1;
  result = (char *)((OVR::HMDDevice const *)arg1)->GetProfileName();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned int D_HMDDevice_SetProfileName(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  OVR::HMDDevice *arg1 = (OVR::HMDDevice *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (OVR::HMDDevice *)jarg1;
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->SetProfileName((char const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_HMDDevice_Disconnect(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::HMDDevice *arg1 = (OVR::HMDDevice *) 0 ;
  OVR::SensorDevice *arg2 = (OVR::SensorDevice *) 0 ;
  OVR::HMDDevice *result = 0 ;
  
  arg1 = (OVR::HMDDevice *)jarg1;
  arg2 = (OVR::SensorDevice *)jarg2;
  result = (OVR::HMDDevice *)(arg1)->Disconnect(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_HMDDevice_IsDisconnected(void * jarg1) {
  unsigned int jresult ;
  OVR::HMDDevice *arg1 = (OVR::HMDDevice *) 0 ;
  bool result;
  
  arg1 = (OVR::HMDDevice *)jarg1;
  result = (bool)((OVR::HMDDevice const *)arg1)->IsDisconnected();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_HMDDevice(void * jarg1) {
  OVR::HMDDevice *arg1 = (OVR::HMDDevice *) 0 ;
  
  arg1 = (OVR::HMDDevice *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_SensorRange__SWIG_0(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  OVR::SensorRange *result = 0 ;
  
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  result = (OVR::SensorRange *)new OVR::SensorRange(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_SensorRange__SWIG_1(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  OVR::SensorRange *result = 0 ;
  
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  result = (OVR::SensorRange *)new OVR::SensorRange(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_SensorRange__SWIG_2(float jarg1) {
  void * jresult ;
  float arg1 ;
  OVR::SensorRange *result = 0 ;
  
  arg1 = (float)jarg1;
  result = (OVR::SensorRange *)new OVR::SensorRange(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_SensorRange__SWIG_3() {
  void * jresult ;
  OVR::SensorRange *result = 0 ;
  
  result = (OVR::SensorRange *)new OVR::SensorRange();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_SensorRange_MaxAcceleration_set(void * jarg1, float jarg2) {
  OVR::SensorRange *arg1 = (OVR::SensorRange *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::SensorRange *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->MaxAcceleration = arg2;
}


SWIGEXPORT float D_SensorRange_MaxAcceleration_get(void * jarg1) {
  float jresult ;
  OVR::SensorRange *arg1 = (OVR::SensorRange *) 0 ;
  float result;
  
  arg1 = (OVR::SensorRange *)jarg1;
  result = (float) ((arg1)->MaxAcceleration);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SensorRange_MaxRotationRate_set(void * jarg1, float jarg2) {
  OVR::SensorRange *arg1 = (OVR::SensorRange *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::SensorRange *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->MaxRotationRate = arg2;
}


SWIGEXPORT float D_SensorRange_MaxRotationRate_get(void * jarg1) {
  float jresult ;
  OVR::SensorRange *arg1 = (OVR::SensorRange *) 0 ;
  float result;
  
  arg1 = (OVR::SensorRange *)jarg1;
  result = (float) ((arg1)->MaxRotationRate);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SensorRange_MaxMagneticField_set(void * jarg1, float jarg2) {
  OVR::SensorRange *arg1 = (OVR::SensorRange *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::SensorRange *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->MaxMagneticField = arg2;
}


SWIGEXPORT float D_SensorRange_MaxMagneticField_get(void * jarg1) {
  float jresult ;
  OVR::SensorRange *arg1 = (OVR::SensorRange *) 0 ;
  float result;
  
  arg1 = (OVR::SensorRange *)jarg1;
  result = (float) ((arg1)->MaxMagneticField);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_SensorRange(void * jarg1) {
  OVR::SensorRange *arg1 = (OVR::SensorRange *) 0 ;
  
  arg1 = (OVR::SensorRange *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_SensorInfo() {
  void * jresult ;
  OVR::SensorInfo *result = 0 ;
  
  result = (OVR::SensorInfo *)new OVR::SensorInfo();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_SensorInfo_VendorId_set(void * jarg1, unsigned short jarg2) {
  OVR::SensorInfo *arg1 = (OVR::SensorInfo *) 0 ;
  OVR::UInt16 arg2 ;
  
  arg1 = (OVR::SensorInfo *)jarg1;
  arg2 = (OVR::UInt16)jarg2;
  if (arg1) (arg1)->VendorId = arg2;
}


SWIGEXPORT unsigned short D_SensorInfo_VendorId_get(void * jarg1) {
  unsigned short jresult ;
  OVR::SensorInfo *arg1 = (OVR::SensorInfo *) 0 ;
  OVR::UInt16 result;
  
  arg1 = (OVR::SensorInfo *)jarg1;
  result = (OVR::UInt16) ((arg1)->VendorId);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SensorInfo_ProductId_set(void * jarg1, unsigned short jarg2) {
  OVR::SensorInfo *arg1 = (OVR::SensorInfo *) 0 ;
  OVR::UInt16 arg2 ;
  
  arg1 = (OVR::SensorInfo *)jarg1;
  arg2 = (OVR::UInt16)jarg2;
  if (arg1) (arg1)->ProductId = arg2;
}


SWIGEXPORT unsigned short D_SensorInfo_ProductId_get(void * jarg1) {
  unsigned short jresult ;
  OVR::SensorInfo *arg1 = (OVR::SensorInfo *) 0 ;
  OVR::UInt16 result;
  
  arg1 = (OVR::SensorInfo *)jarg1;
  result = (OVR::UInt16) ((arg1)->ProductId);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SensorInfo_MaxRanges_set(void * jarg1, void * jarg2) {
  OVR::SensorInfo *arg1 = (OVR::SensorInfo *) 0 ;
  OVR::SensorRange *arg2 = (OVR::SensorRange *) 0 ;
  
  arg1 = (OVR::SensorInfo *)jarg1;
  arg2 = (OVR::SensorRange *)jarg2;
  if (arg1) (arg1)->MaxRanges = *arg2;
}


SWIGEXPORT void * D_SensorInfo_MaxRanges_get(void * jarg1) {
  void * jresult ;
  OVR::SensorInfo *arg1 = (OVR::SensorInfo *) 0 ;
  OVR::SensorRange *result = 0 ;
  
  arg1 = (OVR::SensorInfo *)jarg1;
  result = (OVR::SensorRange *)& ((arg1)->MaxRanges);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_SensorInfo_SerialNumber_set(void * jarg1, char * jarg2) {
  OVR::SensorInfo *arg1 = (OVR::SensorInfo *) 0 ;
  char *arg2 ;
  
  arg1 = (OVR::SensorInfo *)jarg1;
  arg2 = (char *)jarg2; 
  {
    if(arg2) {
      strncpy((char*)arg1->SerialNumber, (const char *)arg2, 20-1);
      arg1->SerialNumber[20-1] = 0;
    } else {
      arg1->SerialNumber[0] = 0;
    }
  }
}


SWIGEXPORT char * D_SensorInfo_SerialNumber_get(void * jarg1) {
  char * jresult ;
  OVR::SensorInfo *arg1 = (OVR::SensorInfo *) 0 ;
  char *result = 0 ;
  
  arg1 = (OVR::SensorInfo *)jarg1;
  result = (char *)(char *) ((arg1)->SerialNumber);
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void D_delete_SensorInfo(void * jarg1) {
  OVR::SensorInfo *arg1 = (OVR::SensorInfo *) 0 ;
  
  arg1 = (OVR::SensorInfo *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_SensorDevice_GetType(void * jarg1) {
  int jresult ;
  OVR::SensorDevice *arg1 = (OVR::SensorDevice *) 0 ;
  OVR::DeviceType result;
  
  arg1 = (OVR::SensorDevice *)jarg1;
  result = (OVR::DeviceType)((OVR::SensorDevice const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_SensorDevice_SetCoordinateFrame(void * jarg1, int jarg2) {
  OVR::SensorDevice *arg1 = (OVR::SensorDevice *) 0 ;
  OVR::SensorDevice::CoordinateFrame arg2 ;
  
  arg1 = (OVR::SensorDevice *)jarg1;
  arg2 = (OVR::SensorDevice::CoordinateFrame)jarg2; 
  (arg1)->SetCoordinateFrame(arg2);
}


SWIGEXPORT int D_SensorDevice_GetCoordinateFrame(void * jarg1) {
  int jresult ;
  OVR::SensorDevice *arg1 = (OVR::SensorDevice *) 0 ;
  OVR::SensorDevice::CoordinateFrame result;
  
  arg1 = (OVR::SensorDevice *)jarg1;
  result = (OVR::SensorDevice::CoordinateFrame)((OVR::SensorDevice const *)arg1)->GetCoordinateFrame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_SensorDevice_SetReportRate(void * jarg1, unsigned int jarg2) {
  OVR::SensorDevice *arg1 = (OVR::SensorDevice *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (OVR::SensorDevice *)jarg1;
  arg2 = (unsigned int)jarg2;
  (arg1)->SetReportRate(arg2);
}


SWIGEXPORT unsigned int D_SensorDevice_GetReportRate(void * jarg1) {
  unsigned int jresult ;
  OVR::SensorDevice *arg1 = (OVR::SensorDevice *) 0 ;
  unsigned int result;
  
  arg1 = (OVR::SensorDevice *)jarg1;
  result = (unsigned int)((OVR::SensorDevice const *)arg1)->GetReportRate();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_SensorDevice_SetRange__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  OVR::SensorDevice *arg1 = (OVR::SensorDevice *) 0 ;
  OVR::SensorRange *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (OVR::SensorDevice *)jarg1;
  arg2 = (OVR::SensorRange *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::SensorRange const & type is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false;
  result = (bool)(arg1)->SetRange((OVR::SensorRange const &)*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_SensorDevice_SetRange__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::SensorDevice *arg1 = (OVR::SensorDevice *) 0 ;
  OVR::SensorRange *arg2 = 0 ;
  bool result;
  
  arg1 = (OVR::SensorDevice *)jarg1;
  arg2 = (OVR::SensorRange *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::SensorRange const & type is null");
    return 0;
  } 
  result = (bool)(arg1)->SetRange((OVR::SensorRange const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_SensorDevice_GetRange(void * jarg1, void * jarg2) {
  OVR::SensorDevice *arg1 = (OVR::SensorDevice *) 0 ;
  OVR::SensorRange *arg2 = (OVR::SensorRange *) 0 ;
  
  arg1 = (OVR::SensorDevice *)jarg1;
  arg2 = (OVR::SensorRange *)jarg2;
  ((OVR::SensorDevice const *)arg1)->GetRange(arg2);
}


SWIGEXPORT void D_delete_SensorDevice(void * jarg1) {
  OVR::SensorDevice *arg1 = (OVR::SensorDevice *) 0 ;
  
  arg1 = (OVR::SensorDevice *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_LatencyTestConfiguration__SWIG_0(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  Color *arg1 = 0 ;
  bool arg2 ;
  OVR::LatencyTestConfiguration *result = 0 ;
  
  arg1 = (Color *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Color const & type is null");
    return 0;
  } 
  arg2 = jarg2 ? true : false;
  result = (OVR::LatencyTestConfiguration *)new OVR::LatencyTestConfiguration((Color const &)*arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_LatencyTestConfiguration__SWIG_1(void * jarg1) {
  void * jresult ;
  Color *arg1 = 0 ;
  OVR::LatencyTestConfiguration *result = 0 ;
  
  arg1 = (Color *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Color const & type is null");
    return 0;
  } 
  result = (OVR::LatencyTestConfiguration *)new OVR::LatencyTestConfiguration((Color const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_LatencyTestConfiguration_Threshold_set(void * jarg1, void * jarg2) {
  OVR::LatencyTestConfiguration *arg1 = (OVR::LatencyTestConfiguration *) 0 ;
  Color arg2 ;
  Color *argp2 ;
  
  arg1 = (OVR::LatencyTestConfiguration *)jarg1;
  argp2 = (Color *)jarg2;
  if (!argp2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Attempt to dereference null Color");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Threshold = arg2;
}


SWIGEXPORT void * D_LatencyTestConfiguration_Threshold_get(void * jarg1) {
  void * jresult ;
  OVR::LatencyTestConfiguration *arg1 = (OVR::LatencyTestConfiguration *) 0 ;
  Color result;
  
  arg1 = (OVR::LatencyTestConfiguration *)jarg1;
  result =  ((arg1)->Threshold);
  jresult = new Color((const Color &)result); 
  return jresult;
}


SWIGEXPORT void D_LatencyTestConfiguration_SendSamples_set(void * jarg1, unsigned int jarg2) {
  OVR::LatencyTestConfiguration *arg1 = (OVR::LatencyTestConfiguration *) 0 ;
  bool arg2 ;
  
  arg1 = (OVR::LatencyTestConfiguration *)jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->SendSamples = arg2;
}


SWIGEXPORT unsigned int D_LatencyTestConfiguration_SendSamples_get(void * jarg1) {
  unsigned int jresult ;
  OVR::LatencyTestConfiguration *arg1 = (OVR::LatencyTestConfiguration *) 0 ;
  bool result;
  
  arg1 = (OVR::LatencyTestConfiguration *)jarg1;
  result = (bool) ((arg1)->SendSamples);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_LatencyTestConfiguration(void * jarg1) {
  OVR::LatencyTestConfiguration *arg1 = (OVR::LatencyTestConfiguration *) 0 ;
  
  arg1 = (OVR::LatencyTestConfiguration *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_LatencyTestDisplay(unsigned char jarg1, unsigned long jarg2) {
  void * jresult ;
  OVR::UByte arg1 ;
  OVR::UInt32 arg2 ;
  OVR::LatencyTestDisplay *result = 0 ;
  
  arg1 = (OVR::UByte)jarg1;
  arg2 = (OVR::UInt32)jarg2;
  result = (OVR::LatencyTestDisplay *)new OVR::LatencyTestDisplay(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_LatencyTestDisplay_Mode_set(void * jarg1, unsigned char jarg2) {
  OVR::LatencyTestDisplay *arg1 = (OVR::LatencyTestDisplay *) 0 ;
  OVR::UByte arg2 ;
  
  arg1 = (OVR::LatencyTestDisplay *)jarg1;
  arg2 = (OVR::UByte)jarg2;
  if (arg1) (arg1)->Mode = arg2;
}


SWIGEXPORT unsigned char D_LatencyTestDisplay_Mode_get(void * jarg1) {
  unsigned char jresult ;
  OVR::LatencyTestDisplay *arg1 = (OVR::LatencyTestDisplay *) 0 ;
  OVR::UByte result;
  
  arg1 = (OVR::LatencyTestDisplay *)jarg1;
  result = (OVR::UByte) ((arg1)->Mode);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_LatencyTestDisplay_Value_set(void * jarg1, unsigned long jarg2) {
  OVR::LatencyTestDisplay *arg1 = (OVR::LatencyTestDisplay *) 0 ;
  OVR::UInt32 arg2 ;
  
  arg1 = (OVR::LatencyTestDisplay *)jarg1;
  arg2 = (OVR::UInt32)jarg2;
  if (arg1) (arg1)->Value = arg2;
}


SWIGEXPORT unsigned long D_LatencyTestDisplay_Value_get(void * jarg1) {
  unsigned long jresult ;
  OVR::LatencyTestDisplay *arg1 = (OVR::LatencyTestDisplay *) 0 ;
  OVR::UInt32 result;
  
  arg1 = (OVR::LatencyTestDisplay *)jarg1;
  result = (OVR::UInt32) ((arg1)->Value);
  jresult = (unsigned long)result;
  return jresult;
}


SWIGEXPORT void D_delete_LatencyTestDisplay(void * jarg1) {
  OVR::LatencyTestDisplay *arg1 = (OVR::LatencyTestDisplay *) 0 ;
  
  arg1 = (OVR::LatencyTestDisplay *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_LatencyTestDevice_GetType(void * jarg1) {
  int jresult ;
  OVR::LatencyTestDevice *arg1 = (OVR::LatencyTestDevice *) 0 ;
  OVR::DeviceType result;
  
  arg1 = (OVR::LatencyTestDevice *)jarg1;
  result = (OVR::DeviceType)((OVR::LatencyTestDevice const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int D_LatencyTestDevice_SetConfiguration__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  OVR::LatencyTestDevice *arg1 = (OVR::LatencyTestDevice *) 0 ;
  OVR::LatencyTestConfiguration *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (OVR::LatencyTestDevice *)jarg1;
  arg2 = (OVR::LatencyTestConfiguration *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::LatencyTestConfiguration const & type is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false;
  result = (bool)(arg1)->SetConfiguration((OVR::LatencyTestConfiguration const &)*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_LatencyTestDevice_SetConfiguration__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::LatencyTestDevice *arg1 = (OVR::LatencyTestDevice *) 0 ;
  OVR::LatencyTestConfiguration *arg2 = 0 ;
  bool result;
  
  arg1 = (OVR::LatencyTestDevice *)jarg1;
  arg2 = (OVR::LatencyTestConfiguration *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::LatencyTestConfiguration const & type is null");
    return 0;
  } 
  result = (bool)(arg1)->SetConfiguration((OVR::LatencyTestConfiguration const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_LatencyTestDevice_GetConfiguration(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::LatencyTestDevice *arg1 = (OVR::LatencyTestDevice *) 0 ;
  OVR::LatencyTestConfiguration *arg2 = (OVR::LatencyTestConfiguration *) 0 ;
  bool result;
  
  arg1 = (OVR::LatencyTestDevice *)jarg1;
  arg2 = (OVR::LatencyTestConfiguration *)jarg2;
  result = (bool)(arg1)->GetConfiguration(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_LatencyTestDevice_SetCalibrate__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  OVR::LatencyTestDevice *arg1 = (OVR::LatencyTestDevice *) 0 ;
  Color *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (OVR::LatencyTestDevice *)jarg1;
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Color const & type is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false;
  result = (bool)(arg1)->SetCalibrate((Color const &)*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_LatencyTestDevice_SetCalibrate__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::LatencyTestDevice *arg1 = (OVR::LatencyTestDevice *) 0 ;
  Color *arg2 = 0 ;
  bool result;
  
  arg1 = (OVR::LatencyTestDevice *)jarg1;
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Color const & type is null");
    return 0;
  } 
  result = (bool)(arg1)->SetCalibrate((Color const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_LatencyTestDevice_SetStartTest__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  OVR::LatencyTestDevice *arg1 = (OVR::LatencyTestDevice *) 0 ;
  Color *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (OVR::LatencyTestDevice *)jarg1;
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Color const & type is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false;
  result = (bool)(arg1)->SetStartTest((Color const &)*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_LatencyTestDevice_SetStartTest__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::LatencyTestDevice *arg1 = (OVR::LatencyTestDevice *) 0 ;
  Color *arg2 = 0 ;
  bool result;
  
  arg1 = (OVR::LatencyTestDevice *)jarg1;
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Color const & type is null");
    return 0;
  } 
  result = (bool)(arg1)->SetStartTest((Color const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_LatencyTestDevice_SetDisplay__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  OVR::LatencyTestDevice *arg1 = (OVR::LatencyTestDevice *) 0 ;
  OVR::LatencyTestDisplay *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (OVR::LatencyTestDevice *)jarg1;
  arg2 = (OVR::LatencyTestDisplay *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::LatencyTestDisplay const & type is null");
    return 0;
  } 
  arg3 = jarg3 ? true : false;
  result = (bool)(arg1)->SetDisplay((OVR::LatencyTestDisplay const &)*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_LatencyTestDevice_SetDisplay__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::LatencyTestDevice *arg1 = (OVR::LatencyTestDevice *) 0 ;
  OVR::LatencyTestDisplay *arg2 = 0 ;
  bool result;
  
  arg1 = (OVR::LatencyTestDevice *)jarg1;
  arg2 = (OVR::LatencyTestDisplay *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::LatencyTestDisplay const & type is null");
    return 0;
  } 
  result = (bool)(arg1)->SetDisplay((OVR::LatencyTestDisplay const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_LatencyTestDevice_GetDevice(void * jarg1) {
  void * jresult ;
  OVR::LatencyTestDevice *arg1 = (OVR::LatencyTestDevice *) 0 ;
  OVR::DeviceBase *result = 0 ;
  
  arg1 = (OVR::LatencyTestDevice *)jarg1;
  result = (OVR::DeviceBase *)(arg1)->GetDevice();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_LatencyTestDevice(void * jarg1) {
  OVR::LatencyTestDevice *arg1 = (OVR::LatencyTestDevice *) 0 ;
  
  arg1 = (OVR::LatencyTestDevice *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_LatencyTest__SWIG_0(void * jarg1) {
  void * jresult ;
  OVR::LatencyTestDevice *arg1 = (OVR::LatencyTestDevice *) 0 ;
  OVR::Util::LatencyTest *result = 0 ;
  
  arg1 = (OVR::LatencyTestDevice *)jarg1;
  result = (OVR::Util::LatencyTest *)new OVR::Util::LatencyTest(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_LatencyTest__SWIG_1() {
  void * jresult ;
  OVR::Util::LatencyTest *result = 0 ;
  
  result = (OVR::Util::LatencyTest *)new OVR::Util::LatencyTest();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_LatencyTest(void * jarg1) {
  OVR::Util::LatencyTest *arg1 = (OVR::Util::LatencyTest *) 0 ;
  
  arg1 = (OVR::Util::LatencyTest *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_LatencyTest_SetDevice(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::Util::LatencyTest *arg1 = (OVR::Util::LatencyTest *) 0 ;
  OVR::LatencyTestDevice *arg2 = (OVR::LatencyTestDevice *) 0 ;
  bool result;
  
  arg1 = (OVR::Util::LatencyTest *)jarg1;
  arg2 = (OVR::LatencyTestDevice *)jarg2;
  result = (bool)(arg1)->SetDevice(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_LatencyTest_HasDevice(void * jarg1) {
  unsigned int jresult ;
  OVR::Util::LatencyTest *arg1 = (OVR::Util::LatencyTest *) 0 ;
  bool result;
  
  arg1 = (OVR::Util::LatencyTest *)jarg1;
  result = (bool)((OVR::Util::LatencyTest const *)arg1)->HasDevice();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_LatencyTest_ProcessInputs(void * jarg1) {
  OVR::Util::LatencyTest *arg1 = (OVR::Util::LatencyTest *) 0 ;
  
  arg1 = (OVR::Util::LatencyTest *)jarg1;
  (arg1)->ProcessInputs();
}


SWIGEXPORT unsigned int D_LatencyTest_DisplayScreenColor(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::Util::LatencyTest *arg1 = (OVR::Util::LatencyTest *) 0 ;
  Color *arg2 = 0 ;
  bool result;
  
  arg1 = (OVR::Util::LatencyTest *)jarg1;
  arg2 = (Color *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "Color & type is null");
    return 0;
  } 
  result = (bool)(arg1)->DisplayScreenColor(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_LatencyTest_GetResultsString(void * jarg1) {
  char * jresult ;
  OVR::Util::LatencyTest *arg1 = (OVR::Util::LatencyTest *) 0 ;
  char *result = 0 ;
  
  arg1 = (OVR::Util::LatencyTest *)jarg1;
  result = (char *)(arg1)->GetResultsString();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void D_LatencyTest_BeginTest(void * jarg1) {
  OVR::Util::LatencyTest *arg1 = (OVR::Util::LatencyTest *) 0 ;
  
  arg1 = (OVR::Util::LatencyTest *)jarg1;
  (arg1)->BeginTest();
}


SWIGEXPORT void D_Viewport_x_set(void * jarg1, int jarg2) {
  OVR::Util::Render::Viewport *arg1 = (OVR::Util::Render::Viewport *) 0 ;
  int arg2 ;
  
  arg1 = (OVR::Util::Render::Viewport *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int D_Viewport_x_get(void * jarg1) {
  int jresult ;
  OVR::Util::Render::Viewport *arg1 = (OVR::Util::Render::Viewport *) 0 ;
  int result;
  
  arg1 = (OVR::Util::Render::Viewport *)jarg1;
  result = (int) ((arg1)->x);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Viewport_y_set(void * jarg1, int jarg2) {
  OVR::Util::Render::Viewport *arg1 = (OVR::Util::Render::Viewport *) 0 ;
  int arg2 ;
  
  arg1 = (OVR::Util::Render::Viewport *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int D_Viewport_y_get(void * jarg1) {
  int jresult ;
  OVR::Util::Render::Viewport *arg1 = (OVR::Util::Render::Viewport *) 0 ;
  int result;
  
  arg1 = (OVR::Util::Render::Viewport *)jarg1;
  result = (int) ((arg1)->y);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Viewport_w_set(void * jarg1, int jarg2) {
  OVR::Util::Render::Viewport *arg1 = (OVR::Util::Render::Viewport *) 0 ;
  int arg2 ;
  
  arg1 = (OVR::Util::Render::Viewport *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT int D_Viewport_w_get(void * jarg1) {
  int jresult ;
  OVR::Util::Render::Viewport *arg1 = (OVR::Util::Render::Viewport *) 0 ;
  int result;
  
  arg1 = (OVR::Util::Render::Viewport *)jarg1;
  result = (int) ((arg1)->w);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_Viewport_h_set(void * jarg1, int jarg2) {
  OVR::Util::Render::Viewport *arg1 = (OVR::Util::Render::Viewport *) 0 ;
  int arg2 ;
  
  arg1 = (OVR::Util::Render::Viewport *)jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->h = arg2;
}


SWIGEXPORT int D_Viewport_h_get(void * jarg1) {
  int jresult ;
  OVR::Util::Render::Viewport *arg1 = (OVR::Util::Render::Viewport *) 0 ;
  int result;
  
  arg1 = (OVR::Util::Render::Viewport *)jarg1;
  result = (int) ((arg1)->h);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_Viewport__SWIG_0() {
  void * jresult ;
  OVR::Util::Render::Viewport *result = 0 ;
  
  result = (OVR::Util::Render::Viewport *)new OVR::Util::Render::Viewport();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_Viewport__SWIG_1(int jarg1, int jarg2, int jarg3, int jarg4) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  OVR::Util::Render::Viewport *result = 0 ;
  
  arg1 = (int)jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  result = (OVR::Util::Render::Viewport *)new OVR::Util::Render::Viewport(arg1,arg2,arg3,arg4);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_Viewport_swigOpEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OVR::Util::Render::Viewport *arg1 = (OVR::Util::Render::Viewport *) 0 ;
  OVR::Util::Render::Viewport *arg2 = 0 ;
  bool result;
  
  arg1 = (OVR::Util::Render::Viewport *)jarg1;
  arg2 = (OVR::Util::Render::Viewport *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Util::Render::Viewport const & type is null");
    return 0;
  } 
  result = (bool)((OVR::Util::Render::Viewport const *)arg1)->operator ==((OVR::Util::Render::Viewport const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_Viewport(void * jarg1) {
  OVR::Util::Render::Viewport *arg1 = (OVR::Util::Render::Viewport *) 0 ;
  
  arg1 = (OVR::Util::Render::Viewport *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_DistortionConfig__SWIG_0(float jarg1, float jarg2, float jarg3, float jarg4) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  OVR::Util::Render::DistortionConfig *result = 0 ;
  
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  result = (OVR::Util::Render::DistortionConfig *)new OVR::Util::Render::DistortionConfig(arg1,arg2,arg3,arg4);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_DistortionConfig__SWIG_1(float jarg1, float jarg2, float jarg3) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  OVR::Util::Render::DistortionConfig *result = 0 ;
  
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  result = (OVR::Util::Render::DistortionConfig *)new OVR::Util::Render::DistortionConfig(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_DistortionConfig__SWIG_2(float jarg1, float jarg2) {
  void * jresult ;
  float arg1 ;
  float arg2 ;
  OVR::Util::Render::DistortionConfig *result = 0 ;
  
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  result = (OVR::Util::Render::DistortionConfig *)new OVR::Util::Render::DistortionConfig(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_DistortionConfig__SWIG_3(float jarg1) {
  void * jresult ;
  float arg1 ;
  OVR::Util::Render::DistortionConfig *result = 0 ;
  
  arg1 = (float)jarg1;
  result = (OVR::Util::Render::DistortionConfig *)new OVR::Util::Render::DistortionConfig(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_DistortionConfig__SWIG_4() {
  void * jresult ;
  OVR::Util::Render::DistortionConfig *result = 0 ;
  
  result = (OVR::Util::Render::DistortionConfig *)new OVR::Util::Render::DistortionConfig();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_DistortionConfig_SetCoefficients__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  (arg1)->SetCoefficients(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void D_DistortionConfig_SetCoefficients__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  (arg1)->SetCoefficients(arg2,arg3,arg4);
}


SWIGEXPORT void D_DistortionConfig_SetCoefficients__SWIG_2(void * jarg1, float jarg2, float jarg3) {
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  (arg1)->SetCoefficients(arg2,arg3);
}


SWIGEXPORT void D_DistortionConfig_SetCoefficients__SWIG_3(void * jarg1, float jarg2) {
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  arg2 = (float)jarg2;
  (arg1)->SetCoefficients(arg2);
}


SWIGEXPORT void D_DistortionConfig_SetChromaticAberration__SWIG_0(void * jarg1, float jarg2, float jarg3, float jarg4, float jarg5) {
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  (arg1)->SetChromaticAberration(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void D_DistortionConfig_SetChromaticAberration__SWIG_1(void * jarg1, float jarg2, float jarg3, float jarg4) {
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  (arg1)->SetChromaticAberration(arg2,arg3,arg4);
}


SWIGEXPORT void D_DistortionConfig_SetChromaticAberration__SWIG_2(void * jarg1, float jarg2, float jarg3) {
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  (arg1)->SetChromaticAberration(arg2,arg3);
}


SWIGEXPORT void D_DistortionConfig_SetChromaticAberration__SWIG_3(void * jarg1, float jarg2) {
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  arg2 = (float)jarg2;
  (arg1)->SetChromaticAberration(arg2);
}


SWIGEXPORT void D_DistortionConfig_SetChromaticAberration__SWIG_4(void * jarg1) {
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  (arg1)->SetChromaticAberration();
}


SWIGEXPORT float D_DistortionConfig_DistortionFn(void * jarg1, float jarg2) {
  float jresult ;
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  arg2 = (float)jarg2;
  result = (float)((OVR::Util::Render::DistortionConfig const *)arg1)->DistortionFn(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT float D_DistortionConfig_DistortionFnInverse(void * jarg1, float jarg2) {
  float jresult ;
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float arg2 ;
  float result;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  arg2 = (float)jarg2;
  result = (float)(arg1)->DistortionFnInverse(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_DistortionConfig_K_set(void * jarg1, void * jarg2) {
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float *arg2 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->K;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * D_DistortionConfig_K_get(void * jarg1) {
  void * jresult ;
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float *result = 0 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  result = (float *)(float *) ((arg1)->K);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_DistortionConfig_XCenterOffset_set(void * jarg1, float jarg2) {
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->XCenterOffset = arg2;
}


SWIGEXPORT float D_DistortionConfig_XCenterOffset_get(void * jarg1) {
  float jresult ;
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float result;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  result = (float) ((arg1)->XCenterOffset);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_DistortionConfig_YCenterOffset_set(void * jarg1, float jarg2) {
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->YCenterOffset = arg2;
}


SWIGEXPORT float D_DistortionConfig_YCenterOffset_get(void * jarg1) {
  float jresult ;
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float result;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  result = (float) ((arg1)->YCenterOffset);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_DistortionConfig_Scale_set(void * jarg1, float jarg2) {
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->Scale = arg2;
}


SWIGEXPORT float D_DistortionConfig_Scale_get(void * jarg1) {
  float jresult ;
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float result;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  result = (float) ((arg1)->Scale);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_DistortionConfig_ChromaticAberration_set(void * jarg1, void * jarg2) {
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float *arg2 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  arg2 = (float *)jarg2; 
  {
    size_t ii;
    float *b = (float *) arg1->ChromaticAberration;
    for (ii = 0; ii < (size_t)4; ii++) b[ii] = *((float *) arg2 + ii);
  }
}


SWIGEXPORT void * D_DistortionConfig_ChromaticAberration_get(void * jarg1) {
  void * jresult ;
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  float *result = 0 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  result = (float *)(float *) ((arg1)->ChromaticAberration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_delete_DistortionConfig(void * jarg1) {
  OVR::Util::Render::DistortionConfig *arg1 = (OVR::Util::Render::DistortionConfig *) 0 ;
  
  arg1 = (OVR::Util::Render::DistortionConfig *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_StereoEyeParams_Eye_set(void * jarg1, int jarg2) {
  OVR::Util::Render::StereoEyeParams *arg1 = (OVR::Util::Render::StereoEyeParams *) 0 ;
  OVR::Util::Render::StereoEye arg2 ;
  
  arg1 = (OVR::Util::Render::StereoEyeParams *)jarg1;
  arg2 = (OVR::Util::Render::StereoEye)jarg2; 
  if (arg1) (arg1)->Eye = arg2;
}


SWIGEXPORT int D_StereoEyeParams_Eye_get(void * jarg1) {
  int jresult ;
  OVR::Util::Render::StereoEyeParams *arg1 = (OVR::Util::Render::StereoEyeParams *) 0 ;
  OVR::Util::Render::StereoEye result;
  
  arg1 = (OVR::Util::Render::StereoEyeParams *)jarg1;
  result = (OVR::Util::Render::StereoEye) ((arg1)->Eye);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_StereoEyeParams_VP_set(void * jarg1, void * jarg2) {
  OVR::Util::Render::StereoEyeParams *arg1 = (OVR::Util::Render::StereoEyeParams *) 0 ;
  OVR::Util::Render::Viewport *arg2 = (OVR::Util::Render::Viewport *) 0 ;
  
  arg1 = (OVR::Util::Render::StereoEyeParams *)jarg1;
  arg2 = (OVR::Util::Render::Viewport *)jarg2;
  if (arg1) (arg1)->VP = *arg2;
}


SWIGEXPORT void * D_StereoEyeParams_VP_get(void * jarg1) {
  void * jresult ;
  OVR::Util::Render::StereoEyeParams *arg1 = (OVR::Util::Render::StereoEyeParams *) 0 ;
  OVR::Util::Render::Viewport *result = 0 ;
  
  arg1 = (OVR::Util::Render::StereoEyeParams *)jarg1;
  result = (OVR::Util::Render::Viewport *)& ((arg1)->VP);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_StereoEyeParams_pDistortion_set(void * jarg1, void * jarg2) {
  OVR::Util::Render::StereoEyeParams *arg1 = (OVR::Util::Render::StereoEyeParams *) 0 ;
  OVR::Util::Render::DistortionConfig *arg2 = (OVR::Util::Render::DistortionConfig *) 0 ;
  
  arg1 = (OVR::Util::Render::StereoEyeParams *)jarg1;
  arg2 = (OVR::Util::Render::DistortionConfig *)jarg2;
  if (arg1) (arg1)->pDistortion = (OVR::Util::Render::DistortionConfig const *)arg2;
}


SWIGEXPORT void * D_StereoEyeParams_pDistortion_get(void * jarg1) {
  void * jresult ;
  OVR::Util::Render::StereoEyeParams *arg1 = (OVR::Util::Render::StereoEyeParams *) 0 ;
  OVR::Util::Render::DistortionConfig *result = 0 ;
  
  arg1 = (OVR::Util::Render::StereoEyeParams *)jarg1;
  result = (OVR::Util::Render::DistortionConfig *) ((arg1)->pDistortion);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_StereoEyeParams_ViewAdjust_set(void * jarg1, void * jarg2) {
  OVR::Util::Render::StereoEyeParams *arg1 = (OVR::Util::Render::StereoEyeParams *) 0 ;
  OVR::Matrix4f *arg2 = (OVR::Matrix4f *) 0 ;
  
  arg1 = (OVR::Util::Render::StereoEyeParams *)jarg1;
  arg2 = (OVR::Matrix4f *)jarg2;
  if (arg1) (arg1)->ViewAdjust = *arg2;
}


SWIGEXPORT void * D_StereoEyeParams_ViewAdjust_get(void * jarg1) {
  void * jresult ;
  OVR::Util::Render::StereoEyeParams *arg1 = (OVR::Util::Render::StereoEyeParams *) 0 ;
  OVR::Matrix4f *result = 0 ;
  
  arg1 = (OVR::Util::Render::StereoEyeParams *)jarg1;
  result = (OVR::Matrix4f *)& ((arg1)->ViewAdjust);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_StereoEyeParams_Projection_set(void * jarg1, void * jarg2) {
  OVR::Util::Render::StereoEyeParams *arg1 = (OVR::Util::Render::StereoEyeParams *) 0 ;
  OVR::Matrix4f *arg2 = (OVR::Matrix4f *) 0 ;
  
  arg1 = (OVR::Util::Render::StereoEyeParams *)jarg1;
  arg2 = (OVR::Matrix4f *)jarg2;
  if (arg1) (arg1)->Projection = *arg2;
}


SWIGEXPORT void * D_StereoEyeParams_Projection_get(void * jarg1) {
  void * jresult ;
  OVR::Util::Render::StereoEyeParams *arg1 = (OVR::Util::Render::StereoEyeParams *) 0 ;
  OVR::Matrix4f *result = 0 ;
  
  arg1 = (OVR::Util::Render::StereoEyeParams *)jarg1;
  result = (OVR::Matrix4f *)& ((arg1)->Projection);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_StereoEyeParams_OrthoProjection_set(void * jarg1, void * jarg2) {
  OVR::Util::Render::StereoEyeParams *arg1 = (OVR::Util::Render::StereoEyeParams *) 0 ;
  OVR::Matrix4f *arg2 = (OVR::Matrix4f *) 0 ;
  
  arg1 = (OVR::Util::Render::StereoEyeParams *)jarg1;
  arg2 = (OVR::Matrix4f *)jarg2;
  if (arg1) (arg1)->OrthoProjection = *arg2;
}


SWIGEXPORT void * D_StereoEyeParams_OrthoProjection_get(void * jarg1) {
  void * jresult ;
  OVR::Util::Render::StereoEyeParams *arg1 = (OVR::Util::Render::StereoEyeParams *) 0 ;
  OVR::Matrix4f *result = 0 ;
  
  arg1 = (OVR::Util::Render::StereoEyeParams *)jarg1;
  result = (OVR::Matrix4f *)& ((arg1)->OrthoProjection);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_StereoEyeParams_Init__SWIG_0(void * jarg1, int jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6, void * jarg7) {
  OVR::Util::Render::StereoEyeParams *arg1 = (OVR::Util::Render::StereoEyeParams *) 0 ;
  OVR::Util::Render::StereoEye arg2 ;
  OVR::Util::Render::Viewport *arg3 = 0 ;
  float arg4 ;
  OVR::Matrix4f *arg5 = 0 ;
  OVR::Matrix4f *arg6 = 0 ;
  OVR::Util::Render::DistortionConfig *arg7 = (OVR::Util::Render::DistortionConfig *) 0 ;
  
  arg1 = (OVR::Util::Render::StereoEyeParams *)jarg1;
  arg2 = (OVR::Util::Render::StereoEye)jarg2; 
  arg3 = (OVR::Util::Render::Viewport *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Util::Render::Viewport const & type is null");
    return ;
  } 
  arg4 = (float)jarg4;
  arg5 = (OVR::Matrix4f *)jarg5;
  if (!arg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Matrix4f const & type is null");
    return ;
  } 
  arg6 = (OVR::Matrix4f *)jarg6;
  if (!arg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Matrix4f const & type is null");
    return ;
  } 
  arg7 = (OVR::Util::Render::DistortionConfig *)jarg7;
  (arg1)->Init(arg2,(OVR::Util::Render::Viewport const &)*arg3,arg4,(OVR::Matrix4f const &)*arg5,(OVR::Matrix4f const &)*arg6,(OVR::Util::Render::DistortionConfig const *)arg7);
}


SWIGEXPORT void D_StereoEyeParams_Init__SWIG_1(void * jarg1, int jarg2, void * jarg3, float jarg4, void * jarg5, void * jarg6) {
  OVR::Util::Render::StereoEyeParams *arg1 = (OVR::Util::Render::StereoEyeParams *) 0 ;
  OVR::Util::Render::StereoEye arg2 ;
  OVR::Util::Render::Viewport *arg3 = 0 ;
  float arg4 ;
  OVR::Matrix4f *arg5 = 0 ;
  OVR::Matrix4f *arg6 = 0 ;
  
  arg1 = (OVR::Util::Render::StereoEyeParams *)jarg1;
  arg2 = (OVR::Util::Render::StereoEye)jarg2; 
  arg3 = (OVR::Util::Render::Viewport *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Util::Render::Viewport const & type is null");
    return ;
  } 
  arg4 = (float)jarg4;
  arg5 = (OVR::Matrix4f *)jarg5;
  if (!arg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Matrix4f const & type is null");
    return ;
  } 
  arg6 = (OVR::Matrix4f *)jarg6;
  if (!arg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Matrix4f const & type is null");
    return ;
  } 
  (arg1)->Init(arg2,(OVR::Util::Render::Viewport const &)*arg3,arg4,(OVR::Matrix4f const &)*arg5,(OVR::Matrix4f const &)*arg6);
}


SWIGEXPORT void * D_new_StereoEyeParams() {
  void * jresult ;
  OVR::Util::Render::StereoEyeParams *result = 0 ;
  
  result = (OVR::Util::Render::StereoEyeParams *)new OVR::Util::Render::StereoEyeParams();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_StereoEyeParams(void * jarg1) {
  OVR::Util::Render::StereoEyeParams *arg1 = (OVR::Util::Render::StereoEyeParams *) 0 ;
  
  arg1 = (OVR::Util::Render::StereoEyeParams *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_StereoConfig__SWIG_0(int jarg1, void * jarg2) {
  void * jresult ;
  OVR::Util::Render::StereoMode arg1 ;
  OVR::Util::Render::Viewport *arg2 = 0 ;
  OVR::Util::Render::StereoConfig *result = 0 ;
  
  arg1 = (OVR::Util::Render::StereoMode)jarg1; 
  arg2 = (OVR::Util::Render::Viewport *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Util::Render::Viewport const & type is null");
    return 0;
  } 
  result = (OVR::Util::Render::StereoConfig *)new OVR::Util::Render::StereoConfig(arg1,(OVR::Util::Render::Viewport const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_StereoConfig__SWIG_1(int jarg1) {
  void * jresult ;
  OVR::Util::Render::StereoMode arg1 ;
  OVR::Util::Render::StereoConfig *result = 0 ;
  
  arg1 = (OVR::Util::Render::StereoMode)jarg1; 
  result = (OVR::Util::Render::StereoConfig *)new OVR::Util::Render::StereoConfig(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_StereoConfig__SWIG_2() {
  void * jresult ;
  OVR::Util::Render::StereoConfig *result = 0 ;
  
  result = (OVR::Util::Render::StereoConfig *)new OVR::Util::Render::StereoConfig();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_StereoConfig_SetStereoMode(void * jarg1, int jarg2) {
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  OVR::Util::Render::StereoMode arg2 ;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  arg2 = (OVR::Util::Render::StereoMode)jarg2; 
  (arg1)->SetStereoMode(arg2);
}


SWIGEXPORT int D_StereoConfig_GetStereoMode(void * jarg1) {
  int jresult ;
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  OVR::Util::Render::StereoMode result;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  result = (OVR::Util::Render::StereoMode)((OVR::Util::Render::StereoConfig const *)arg1)->GetStereoMode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_StereoConfig_SetHMDInfo(void * jarg1, void * jarg2) {
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  OVR::HMDInfo *arg2 = 0 ;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  arg2 = (OVR::HMDInfo *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::HMDInfo const & type is null");
    return ;
  } 
  (arg1)->SetHMDInfo((OVR::HMDInfo const &)*arg2);
}


SWIGEXPORT void * D_StereoConfig_GetHMDInfo(void * jarg1) {
  void * jresult ;
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  OVR::HMDInfo *result = 0 ;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  result = (OVR::HMDInfo *) &((OVR::Util::Render::StereoConfig const *)arg1)->GetHMDInfo();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT float D_StereoConfig_GetEyeToScreenDistance(void * jarg1) {
  float jresult ;
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  float result;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  result = (float)((OVR::Util::Render::StereoConfig const *)arg1)->GetEyeToScreenDistance();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_StereoConfig_SetEyeToScreenDistance(void * jarg1, float jarg2) {
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  arg2 = (float)jarg2;
  (arg1)->SetEyeToScreenDistance(arg2);
}


SWIGEXPORT void D_StereoConfig_SetIPD(void * jarg1, float jarg2) {
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  arg2 = (float)jarg2;
  (arg1)->SetIPD(arg2);
}


SWIGEXPORT float D_StereoConfig_GetIPD(void * jarg1) {
  float jresult ;
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  float result;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  result = (float)((OVR::Util::Render::StereoConfig const *)arg1)->GetIPD();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_StereoConfig_SetFullViewport(void * jarg1, void * jarg2) {
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  OVR::Util::Render::Viewport *arg2 = 0 ;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  arg2 = (OVR::Util::Render::Viewport *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Util::Render::Viewport const & type is null");
    return ;
  } 
  (arg1)->SetFullViewport((OVR::Util::Render::Viewport const &)*arg2);
}


SWIGEXPORT void * D_StereoConfig_GetFullViewport(void * jarg1) {
  void * jresult ;
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  OVR::Util::Render::Viewport *result = 0 ;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  result = (OVR::Util::Render::Viewport *) &((OVR::Util::Render::StereoConfig const *)arg1)->GetFullViewport();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_StereoConfig_SetAspectMultiplier(void * jarg1, float jarg2) {
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  arg2 = (float)jarg2;
  (arg1)->SetAspectMultiplier(arg2);
}


SWIGEXPORT float D_StereoConfig_GetAspectMultiplier(void * jarg1) {
  float jresult ;
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  float result;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  result = (float)((OVR::Util::Render::StereoConfig const *)arg1)->GetAspectMultiplier();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_StereoConfig_SetDistortionFitPointVP(void * jarg1, float jarg2, float jarg3) {
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  (arg1)->SetDistortionFitPointVP(arg2,arg3);
}


SWIGEXPORT void D_StereoConfig_SetDistortionFitPointPixels(void * jarg1, float jarg2, float jarg3) {
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  float arg2 ;
  float arg3 ;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  (arg1)->SetDistortionFitPointPixels(arg2,arg3);
}


SWIGEXPORT void D_StereoConfig_SetDistortionConfig(void * jarg1, void * jarg2) {
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  OVR::Util::Render::DistortionConfig *arg2 = 0 ;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  arg2 = (OVR::Util::Render::DistortionConfig *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OVR::Util::Render::DistortionConfig const & type is null");
    return ;
  } 
  (arg1)->SetDistortionConfig((OVR::Util::Render::DistortionConfig const &)*arg2);
}


SWIGEXPORT void D_StereoConfig_SetDistortionK(void * jarg1, int jarg2, float jarg3) {
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  int arg2 ;
  float arg3 ;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  arg2 = (int)jarg2;
  arg3 = (float)jarg3;
  (arg1)->SetDistortionK(arg2,arg3);
}


SWIGEXPORT float D_StereoConfig_GetDistortionK(void * jarg1, int jarg2) {
  float jresult ;
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  int arg2 ;
  float result;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  arg2 = (int)jarg2;
  result = (float)((OVR::Util::Render::StereoConfig const *)arg1)->GetDistortionK(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_StereoConfig_Set2DAreaFov(void * jarg1, float jarg2) {
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  float arg2 ;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  arg2 = (float)jarg2;
  (arg1)->Set2DAreaFov(arg2);
}


SWIGEXPORT float D_StereoConfig_GetAspect(void * jarg1) {
  float jresult ;
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  float result;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  result = (float)(arg1)->GetAspect();
  jresult = result;
  return jresult;
}


SWIGEXPORT float D_StereoConfig_GetYFOVRadians(void * jarg1) {
  float jresult ;
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  float result;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  result = (float)(arg1)->GetYFOVRadians();
  jresult = result;
  return jresult;
}


SWIGEXPORT float D_StereoConfig_GetYFOVDegrees(void * jarg1) {
  float jresult ;
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  float result;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  result = (float)(arg1)->GetYFOVDegrees();
  jresult = result;
  return jresult;
}


SWIGEXPORT float D_StereoConfig_GetProjectionCenterOffset(void * jarg1) {
  float jresult ;
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  float result;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  result = (float)(arg1)->GetProjectionCenterOffset();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_StereoConfig_GetDistortionConfig(void * jarg1) {
  void * jresult ;
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  OVR::Util::Render::DistortionConfig *result = 0 ;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  result = (OVR::Util::Render::DistortionConfig *) &(arg1)->GetDistortionConfig();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT float D_StereoConfig_GetDistortionScale(void * jarg1) {
  float jresult ;
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  float result;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  result = (float)(arg1)->GetDistortionScale();
  jresult = result;
  return jresult;
}


SWIGEXPORT float D_StereoConfig_Get2DUnitPixel(void * jarg1) {
  float jresult ;
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  float result;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  result = (float)(arg1)->Get2DUnitPixel();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_StereoConfig_GetEyeRenderParams(void * jarg1, int jarg2) {
  void * jresult ;
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  OVR::Util::Render::StereoEye arg2 ;
  OVR::Util::Render::StereoEyeParams *result = 0 ;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  arg2 = (OVR::Util::Render::StereoEye)jarg2; 
  result = (OVR::Util::Render::StereoEyeParams *) &(arg1)->GetEyeRenderParams(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_StereoConfig(void * jarg1) {
  OVR::Util::Render::StereoConfig *arg1 = (OVR::Util::Render::StereoConfig *) 0 ;
  
  arg1 = (OVR::Util::Render::StereoConfig *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_JSON_Type_set(void * jarg1, int jarg2) {
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  OVR::JSONItemType arg2 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (OVR::JSONItemType)jarg2; 
  if (arg1) (arg1)->Type = arg2;
}


SWIGEXPORT int D_JSON_Type_get(void * jarg1) {
  int jresult ;
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  OVR::JSONItemType result;
  
  arg1 = (OVR::JSON *)jarg1;
  result = (OVR::JSONItemType) ((arg1)->Type);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void D_JSON_Name_set(void * jarg1, void * jarg2) {
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  OVR::String *arg2 = (OVR::String *) 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (OVR::String *)jarg2;
  if (arg1) (arg1)->Name = *arg2;
}


SWIGEXPORT void * D_JSON_Name_get(void * jarg1) {
  void * jresult ;
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  OVR::String *result = 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  result = (OVR::String *)& ((arg1)->Name);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_JSON_Value_set(void * jarg1, void * jarg2) {
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  OVR::String *arg2 = (OVR::String *) 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (OVR::String *)jarg2;
  if (arg1) (arg1)->Value = *arg2;
}


SWIGEXPORT void * D_JSON_Value_get(void * jarg1) {
  void * jresult ;
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  OVR::String *result = 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  result = (OVR::String *)& ((arg1)->Value);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_JSON_dValue_set(void * jarg1, double jarg2) {
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  double arg2 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (double)jarg2;
  if (arg1) (arg1)->dValue = arg2;
}


SWIGEXPORT double D_JSON_dValue_get(void * jarg1) {
  double jresult ;
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  double result;
  
  arg1 = (OVR::JSON *)jarg1;
  result = (double) ((arg1)->dValue);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_JSON(void * jarg1) {
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_JSON_CreateObject() {
  void * jresult ;
  OVR::JSON *result = 0 ;
  
  result = (OVR::JSON *)OVR::JSON::CreateObject();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_JSON_CreateNull() {
  void * jresult ;
  OVR::JSON *result = 0 ;
  
  result = (OVR::JSON *)OVR::JSON::CreateNull();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_JSON_CreateArray() {
  void * jresult ;
  OVR::JSON *result = 0 ;
  
  result = (OVR::JSON *)OVR::JSON::CreateArray();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_JSON_CreateBool(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  OVR::JSON *result = 0 ;
  
  arg1 = jarg1 ? true : false;
  result = (OVR::JSON *)OVR::JSON::CreateBool(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_JSON_CreateNumber(double jarg1) {
  void * jresult ;
  double arg1 ;
  OVR::JSON *result = 0 ;
  
  arg1 = (double)jarg1;
  result = (OVR::JSON *)OVR::JSON::CreateNumber(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_JSON_CreateString(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  OVR::JSON *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (OVR::JSON *)OVR::JSON::CreateString((char const *)arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_JSON_Parse__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  OVR::JSON *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char **)jarg2;
  result = (OVR::JSON *)OVR::JSON::Parse((char const *)arg1,(char const **)arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_JSON_Parse__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  OVR::JSON *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (OVR::JSON *)OVR::JSON::Parse((char const *)arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_JSON_Load__SWIG_0(char * jarg1, void * jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  char **arg2 = (char **) 0 ;
  OVR::JSON *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (char **)jarg2;
  result = (OVR::JSON *)OVR::JSON::Load((char const *)arg1,(char const **)arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_JSON_Load__SWIG_1(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  OVR::JSON *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (OVR::JSON *)OVR::JSON::Load((char const *)arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_JSON_Save(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->Save((char const *)arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_JSON_HasItems(void * jarg1) {
  unsigned int jresult ;
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  bool result;
  
  arg1 = (OVR::JSON *)jarg1;
  result = (bool)((OVR::JSON const *)arg1)->HasItems();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_JSON_GetFirstItem(void * jarg1) {
  void * jresult ;
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  OVR::JSON *result = 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  result = (OVR::JSON *)(arg1)->GetFirstItem();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_JSON_GetLastItem(void * jarg1) {
  void * jresult ;
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  OVR::JSON *result = 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  result = (OVR::JSON *)(arg1)->GetLastItem();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_JSON_GetItemCount(void * jarg1) {
  unsigned int jresult ;
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  unsigned int result;
  
  arg1 = (OVR::JSON *)jarg1;
  result = (unsigned int)((OVR::JSON const *)arg1)->GetItemCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_JSON_GetItemByIndex(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  unsigned int arg2 ;
  OVR::JSON *result = 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (unsigned int)jarg2;
  result = (OVR::JSON *)(arg1)->GetItemByIndex(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_JSON_GetItemByName(void * jarg1, char * jarg2) {
  void * jresult ;
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  char *arg2 = (char *) 0 ;
  OVR::JSON *result = 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (char *)jarg2; 
  result = (OVR::JSON *)(arg1)->GetItemByName((char const *)arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_JSON_GetNextItem(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  OVR::JSON *arg2 = (OVR::JSON *) 0 ;
  OVR::JSON *result = 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (OVR::JSON *)jarg2;
  result = (OVR::JSON *)(arg1)->GetNextItem(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_JSON_GetPrevItem(void * jarg1, void * jarg2) {
  void * jresult ;
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  OVR::JSON *arg2 = (OVR::JSON *) 0 ;
  OVR::JSON *result = 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (OVR::JSON *)jarg2;
  result = (OVR::JSON *)(arg1)->GetPrevItem(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_JSON_AddItem(void * jarg1, char * jarg2, void * jarg3) {
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  char *arg2 = (char *) 0 ;
  OVR::JSON *arg3 = (OVR::JSON *) 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = (OVR::JSON *)jarg3;
  (arg1)->AddItem((char const *)arg2,arg3);
}


SWIGEXPORT void D_JSON_AddNullItem(void * jarg1, char * jarg2) {
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (char *)jarg2; 
  (arg1)->AddNullItem((char const *)arg2);
}


SWIGEXPORT void D_JSON_AddBoolItem(void * jarg1, char * jarg2, unsigned int jarg3) {
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = jarg3 ? true : false;
  (arg1)->AddBoolItem((char const *)arg2,arg3);
}


SWIGEXPORT void D_JSON_AddNumberItem(void * jarg1, char * jarg2, double jarg3) {
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  char *arg2 = (char *) 0 ;
  double arg3 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = (double)jarg3;
  (arg1)->AddNumberItem((char const *)arg2,arg3);
}


SWIGEXPORT void D_JSON_AddStringItem(void * jarg1, char * jarg2, char * jarg3) {
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  (arg1)->AddStringItem((char const *)arg2,(char const *)arg3);
}


SWIGEXPORT void D_JSON_AddArrayElement(void * jarg1, void * jarg2) {
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  OVR::JSON *arg2 = (OVR::JSON *) 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (OVR::JSON *)jarg2;
  (arg1)->AddArrayElement(arg2);
}


SWIGEXPORT void D_JSON_AddArrayNumber(void * jarg1, double jarg2) {
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  double arg2 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (double)jarg2;
  (arg1)->AddArrayNumber(arg2);
}


SWIGEXPORT void D_JSON_AddArrayString(void * jarg1, char * jarg2) {
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  char *arg2 = (char *) 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (char *)jarg2; 
  (arg1)->AddArrayString((char const *)arg2);
}


SWIGEXPORT int D_JSON_GetArraySize(void * jarg1) {
  int jresult ;
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  int result;
  
  arg1 = (OVR::JSON *)jarg1;
  result = (int)(arg1)->GetArraySize();
  jresult = result;
  return jresult;
}


SWIGEXPORT double D_JSON_GetArrayNumber(void * jarg1, int jarg2) {
  double jresult ;
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  int arg2 ;
  double result;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (int)jarg2;
  result = (double)(arg1)->GetArrayNumber(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_JSON_GetArrayString(void * jarg1, int jarg2) {
  char * jresult ;
  OVR::JSON *arg1 = (OVR::JSON *) 0 ;
  int arg2 ;
  char *result = 0 ;
  
  arg1 = (OVR::JSON *)jarg1;
  arg2 = (int)jarg2;
  result = (char *)(arg1)->GetArrayString(arg2);
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT OVR::AtomicOpsRawBase * D_AtomicOpsRaw_4ByteImpl_Upcast(OVR::AtomicOpsRawBase *objectRef) {
    return (OVR::AtomicOpsRawBase *)objectRef;
}

SWIGEXPORT OVR::AtomicOpsRawBase * D_AtomicOpsRaw_8ByteImpl_Upcast(OVR::AtomicOpsRawBase *objectRef) {
    return (OVR::AtomicOpsRawBase *)objectRef;
}

SWIGEXPORT OVR::Message * D_MessageBodyFrame_Upcast(OVR::Message *objectRef) {
    return (OVR::Message *)objectRef;
}

SWIGEXPORT OVR::Message * D_MessageDeviceStatus_Upcast(OVR::Message *objectRef) {
    return (OVR::Message *)objectRef;
}

SWIGEXPORT OVR::Message * D_MessageLatencyTestSamples_Upcast(OVR::Message *objectRef) {
    return (OVR::Message *)objectRef;
}

SWIGEXPORT OVR::Message * D_MessageLatencyTestColorDetected_Upcast(OVR::Message *objectRef) {
    return (OVR::Message *)objectRef;
}

SWIGEXPORT OVR::Message * D_MessageLatencyTestStarted_Upcast(OVR::Message *objectRef) {
    return (OVR::Message *)objectRef;
}

SWIGEXPORT OVR::Message * D_MessageLatencyTestButton_Upcast(OVR::Message *objectRef) {
    return (OVR::Message *)objectRef;
}

SWIGEXPORT OVR::NewOverrideBase * D_SensorFusion_Upcast(OVR::NewOverrideBase *objectRef) {
    return (OVR::NewOverrideBase *)objectRef;
}

SWIGEXPORT OVR::Profile * D_HMDProfile_Upcast(OVR::Profile *objectRef) {
    return (OVR::Profile *)objectRef;
}

SWIGEXPORT OVR::HMDProfile * D_RiftDK1Profile_Upcast(OVR::HMDProfile *objectRef) {
    return (OVR::HMDProfile *)objectRef;
}

SWIGEXPORT OVR::HMDProfile * D_RiftDKHDProfile_Upcast(OVR::HMDProfile *objectRef) {
    return (OVR::HMDProfile *)objectRef;
}

SWIGEXPORT OVR::NewOverrideBase * D_DeviceBase_Upcast(OVR::NewOverrideBase *objectRef) {
    return (OVR::NewOverrideBase *)objectRef;
}

SWIGEXPORT OVR::DeviceBase * D_DeviceManager_Upcast(OVR::DeviceBase *objectRef) {
    return (OVR::DeviceBase *)objectRef;
}

SWIGEXPORT OVR::DeviceInfo * D_HMDInfo_Upcast(OVR::DeviceInfo *objectRef) {
    return (OVR::DeviceInfo *)objectRef;
}

SWIGEXPORT OVR::DeviceBase * D_HMDDevice_Upcast(OVR::DeviceBase *objectRef) {
    return (OVR::DeviceBase *)objectRef;
}

SWIGEXPORT OVR::DeviceInfo * D_SensorInfo_Upcast(OVR::DeviceInfo *objectRef) {
    return (OVR::DeviceInfo *)objectRef;
}

SWIGEXPORT OVR::HIDDeviceBase * D_SensorDevice_Upcast(OVR::HIDDeviceBase *objectRef) {
    return (OVR::HIDDeviceBase *)objectRef;
}

SWIGEXPORT OVR::HIDDeviceBase * D_LatencyTestDevice_Upcast(OVR::HIDDeviceBase *objectRef) {
    return (OVR::HIDDeviceBase *)objectRef;
}

SWIGEXPORT OVR::NewOverrideBase * D_LatencyTest_Upcast(OVR::NewOverrideBase *objectRef) {
    return (OVR::NewOverrideBase *)objectRef;
}

#ifdef __cplusplus
}
#endif


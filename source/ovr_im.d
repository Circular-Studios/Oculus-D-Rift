/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module ovr_im;
static import core.stdc.config;

static import std.conv;

static import std.conv;
static import std.string;


private {
  version(linux) {
    version = Nix;
  } else version(darwin) {
    version = Nix;
  } else version(OSX) {
    version = Nix;
  } else version(FreeBSD) {
    version = Nix;
    version = freebsd;
  } else version(freebsd) {
    version = Nix;
  } else version(Unix) {
    version = Nix;
  } else version(Posix) {
    version = Nix;
  }

  version(Tango) {
    static import tango.stdc.string;
    static import tango.stdc.stringz;

    version (PhobosCompatibility) {
    } else {
      alias char[] string;
      alias wchar[] wstring;
      alias dchar[] dstring;
    }
  } else {
    version(D_Version2) {
      static import std.conv;
    }
    static import std.string;
    static import std.c.string;
  }

  version(D_Version2) {
    mixin("alias const(char)* CCPTR;");
  } else {
    alias char* CCPTR;
  }

  CCPTR swigToCString(string str) {
    version(Tango) {
      return tango.stdc.stringz.toStringz(str);
    } else {
      return std.string.toStringz(str);
    }
  }

  string swigToDString(CCPTR cstr) {
    version(Tango) {
      return tango.stdc.stringz.fromStringz(cstr);
    } else {
      version(D_Version2) {
        mixin("return std.conv.to!string(cstr);");
      } else {
        return std.c.string.toString(cstr);
      }
    }
  }
}

class SwigSwigSharedLibLoadException : Exception {
  this(in string[] libNames, in string[] reasons) {
    string msg = "Failed to load one or more shared libraries:";
    foreach(i, n; libNames) {
      msg ~= "\n\t" ~ n ~ " - ";
      if(i < reasons.length)
        msg ~= reasons[i];
      else
        msg ~= "Unknown";
    }
    super(msg);
  }
}

class SwigSymbolLoadException : Exception {
  this(string SwigSharedLibName, string symbolName) {
    super("Failed to load symbol " ~ symbolName ~ " from shared library " ~ SwigSharedLibName);
    _symbolName = symbolName;
  }

  string symbolName() {
    return _symbolName;
  }

private:
  string _symbolName;
}

private {
  version(Nix) {
    version(freebsd) {
      // the dl* functions are in libc on FreeBSD
    }
    else {
      pragma(lib, "dl");
    }

    version(Tango) {
      import tango.sys.Common;
    } else version(linux) {
      import std.c.linux.linux;
    } else {
      extern(C) {
        const RTLD_NOW = 2;

        void *dlopen(CCPTR file, int mode);
        int dlclose(void* handle);
        void *dlsym(void* handle, CCPTR name);
        CCPTR dlerror();
      }
    }

    alias void* SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return dlopen(swigToCString(libName), RTLD_NOW);
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      dlclose(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return dlsym(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      CCPTR err = dlerror();
      if (err is null) {
        return "Unknown Error";
      }
      return swigToDString(err);
    }
  } else version(Windows) {
    alias ushort WORD;
    alias uint DWORD;
    alias CCPTR LPCSTR;
    alias void* HMODULE;
    alias void* HLOCAL;
    alias int function() FARPROC;
    struct VA_LIST {}

    extern (Windows) {
      HMODULE LoadLibraryA(LPCSTR);
      FARPROC GetProcAddress(HMODULE, LPCSTR);
      void FreeLibrary(HMODULE);
      DWORD GetLastError();
      DWORD FormatMessageA(DWORD, in void*, DWORD, DWORD, LPCSTR, DWORD, VA_LIST*);
      HLOCAL LocalFree(HLOCAL);
    }

    DWORD MAKELANGID(WORD p, WORD s) {
      return (((cast(WORD)s) << 10) | cast(WORD)p);
    }

    enum {
      LANG_NEUTRAL                    = 0,
      SUBLANG_DEFAULT                 = 1,
      FORMAT_MESSAGE_ALLOCATE_BUFFER  = 256,
      FORMAT_MESSAGE_IGNORE_INSERTS   = 512,
      FORMAT_MESSAGE_FROM_SYSTEM      = 4096
    }

    alias HMODULE SwigSharedLibHandle;

    SwigSharedLibHandle swigLoadSharedLib(string libName) {
      return LoadLibraryA(swigToCString(libName));
    }

    void swigUnloadSharedLib(SwigSharedLibHandle hlib) {
      FreeLibrary(hlib);
    }

    void* swigGetSymbol(SwigSharedLibHandle hlib, string symbolName) {
      return GetProcAddress(hlib, swigToCString(symbolName));
    }

    string swigGetErrorStr() {
      DWORD errcode = GetLastError();

      LPCSTR msgBuf;
      DWORD i = FormatMessageA(
        FORMAT_MESSAGE_ALLOCATE_BUFFER |
        FORMAT_MESSAGE_FROM_SYSTEM |
        FORMAT_MESSAGE_IGNORE_INSERTS,
        null,
        errcode,
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        cast(LPCSTR)&msgBuf,
        0,
        null);

      string text = swigToDString(msgBuf);
      LocalFree(cast(HLOCAL)msgBuf);

      if (i >= 2) {
        i -= 2;
      }
      return text[0 .. i];
    }
  } else {
    static assert(0, "Operating system not supported by the wrapper loading code.");
  }

  final class SwigSharedLib {
    void load(string[] names) {
      if (_hlib !is null) return;

      string[] failedLibs;
      string[] reasons;

      foreach(n; names) {
        _hlib = swigLoadSharedLib(n);
        if (_hlib is null) {
          failedLibs ~= n;
          reasons ~= swigGetErrorStr();
          continue;
        }
        _name = n;
        break;
      }

      if (_hlib is null) {
        throw new SwigSwigSharedLibLoadException(failedLibs, reasons);
      }
    }

    void* loadSymbol(string symbolName, bool doThrow = true) {
      void* sym = swigGetSymbol(_hlib, symbolName);
      if(doThrow && (sym is null)) {
        throw new SwigSymbolLoadException(_name, symbolName);
      }
      return sym;
    }

    void unload() {
      if(_hlib !is null) {
        swigUnloadSharedLib(_hlib);
        _hlib = null;
      }
    }

  private:
    string _name;
    SwigSharedLibHandle _hlib;
  }
}

static this() {
  string[] possibleFileNames;
  version (Posix) {
    version (OSX) {
      possibleFileNames ~= ["libovr_wrap.dylib", "libovr_wrap.bundle"];
    }
    possibleFileNames ~= ["libovr_wrap.so"];
  } else version (Windows) {
    possibleFileNames ~= ["ovr_wrap.dll", "libovr_wrap.so"];
  } else {
    static assert(false, "Operating system not supported by the wrapper loading code.");
  }

  auto library = new SwigSharedLib;
  library.load(possibleFileNames);

  string bindCode(string functionPointer, string symbol) {
    return functionPointer ~ " = cast(typeof(" ~ functionPointer ~
      "))library.loadSymbol(`" ~ symbol ~ "`);";
  }

  //#if !defined(SWIG_D_NO_EXCEPTION_HELPER)
  mixin(bindCode("swigRegisterExceptionCallbacksovr", "SWIGRegisterExceptionCallbacks_ovr"));
  //#endif // SWIG_D_NO_EXCEPTION_HELPER
  //#if !defined(SWIG_D_NO_STRING_HELPER)
  mixin(bindCode("swigRegisterStringCallbackovr", "SWIGRegisterStringCallback_ovr"));
  //#endif // SWIG_D_NO_STRING_HELPER
  
  mixin(bindCode("OVR_LITTLE_ENDIAN_get", "D_OVR_LITTLE_ENDIAN_get"));
  mixin(bindCode("OVR_BIG_ENDIAN_get", "D_OVR_BIG_ENDIAN_get"));
  mixin(bindCode("OVR_BYTE_ORDER_get", "D_OVR_BYTE_ORDER_get"));
  mixin(bindCode("OVR_BUILD_STRING_get", "D_OVR_BUILD_STRING_get"));
  mixin(bindCode("UpperBitTable_get", "D_UpperBitTable_get"));
  mixin(bindCode("LowerBitTable_get", "D_LowerBitTable_get"));
  mixin(bindCode("UpperBit", "D_UpperBit"));
  mixin(bindCode("LowerBit", "D_LowerBit"));
  mixin(bindCode("MemUtil_Cmp", "D_MemUtil_Cmp"));
  mixin(bindCode("MemUtil_Cmp16", "D_MemUtil_Cmp16"));
  mixin(bindCode("MemUtil_Cmp32", "D_MemUtil_Cmp32"));
  mixin(bindCode("MemUtil_Cmp64", "D_MemUtil_Cmp64"));
  mixin(bindCode("new_MemUtil", "D_new_MemUtil"));
  mixin(bindCode("delete_MemUtil", "D_delete_MemUtil"));
  mixin(bindCode("SwapOrder__SWIG_0", "D_SwapOrder__SWIG_0"));
  mixin(bindCode("SwapOrder__SWIG_1", "D_SwapOrder__SWIG_1"));
  mixin(bindCode("SwapOrder__SWIG_2", "D_SwapOrder__SWIG_2"));
  mixin(bindCode("SwapOrder__SWIG_3", "D_SwapOrder__SWIG_3"));
  mixin(bindCode("SwapOrder__SWIG_4", "D_SwapOrder__SWIG_4"));
  mixin(bindCode("SwapOrder__SWIG_5", "D_SwapOrder__SWIG_5"));
  mixin(bindCode("SwapOrder__SWIG_6", "D_SwapOrder__SWIG_6"));
  mixin(bindCode("SwapOrder__SWIG_7", "D_SwapOrder__SWIG_7"));
  mixin(bindCode("SwapOrder__SWIG_8", "D_SwapOrder__SWIG_8"));
  mixin(bindCode("SwapOrder__SWIG_9", "D_SwapOrder__SWIG_9"));
  mixin(bindCode("SwapOrder__SWIG_10", "D_SwapOrder__SWIG_10"));
  mixin(bindCode("LEToSystem__SWIG_0", "D_LEToSystem__SWIG_0"));
  mixin(bindCode("LEToSystem__SWIG_1", "D_LEToSystem__SWIG_1"));
  mixin(bindCode("LEToSystem__SWIG_2", "D_LEToSystem__SWIG_2"));
  mixin(bindCode("LEToSystem__SWIG_3", "D_LEToSystem__SWIG_3"));
  mixin(bindCode("LEToSystem__SWIG_4", "D_LEToSystem__SWIG_4"));
  mixin(bindCode("LEToSystem__SWIG_5", "D_LEToSystem__SWIG_5"));
  mixin(bindCode("LEToSystem__SWIG_6", "D_LEToSystem__SWIG_6"));
  mixin(bindCode("LEToSystem__SWIG_7", "D_LEToSystem__SWIG_7"));
  mixin(bindCode("LEToSystem__SWIG_8", "D_LEToSystem__SWIG_8"));
  mixin(bindCode("LEToSystem__SWIG_9", "D_LEToSystem__SWIG_9"));
  mixin(bindCode("BEToSystem__SWIG_0", "D_BEToSystem__SWIG_0"));
  mixin(bindCode("BEToSystem__SWIG_1", "D_BEToSystem__SWIG_1"));
  mixin(bindCode("BEToSystem__SWIG_2", "D_BEToSystem__SWIG_2"));
  mixin(bindCode("BEToSystem__SWIG_3", "D_BEToSystem__SWIG_3"));
  mixin(bindCode("BEToSystem__SWIG_4", "D_BEToSystem__SWIG_4"));
  mixin(bindCode("BEToSystem__SWIG_5", "D_BEToSystem__SWIG_5"));
  mixin(bindCode("BEToSystem__SWIG_6", "D_BEToSystem__SWIG_6"));
  mixin(bindCode("BEToSystem__SWIG_7", "D_BEToSystem__SWIG_7"));
  mixin(bindCode("BEToSystem__SWIG_8", "D_BEToSystem__SWIG_8"));
  mixin(bindCode("BEToSystem__SWIG_9", "D_BEToSystem__SWIG_9"));
  mixin(bindCode("SystemToLE__SWIG_0", "D_SystemToLE__SWIG_0"));
  mixin(bindCode("SystemToLE__SWIG_1", "D_SystemToLE__SWIG_1"));
  mixin(bindCode("SystemToLE__SWIG_2", "D_SystemToLE__SWIG_2"));
  mixin(bindCode("SystemToLE__SWIG_3", "D_SystemToLE__SWIG_3"));
  mixin(bindCode("SystemToLE__SWIG_4", "D_SystemToLE__SWIG_4"));
  mixin(bindCode("SystemToLE__SWIG_5", "D_SystemToLE__SWIG_5"));
  mixin(bindCode("SystemToLE__SWIG_6", "D_SystemToLE__SWIG_6"));
  mixin(bindCode("SystemToLE__SWIG_7", "D_SystemToLE__SWIG_7"));
  mixin(bindCode("SystemToLE__SWIG_8", "D_SystemToLE__SWIG_8"));
  mixin(bindCode("SystemToLE__SWIG_9", "D_SystemToLE__SWIG_9"));
  mixin(bindCode("SystemToBE__SWIG_0", "D_SystemToBE__SWIG_0"));
  mixin(bindCode("SystemToBE__SWIG_1", "D_SystemToBE__SWIG_1"));
  mixin(bindCode("SystemToBE__SWIG_2", "D_SystemToBE__SWIG_2"));
  mixin(bindCode("SystemToBE__SWIG_3", "D_SystemToBE__SWIG_3"));
  mixin(bindCode("SystemToBE__SWIG_4", "D_SystemToBE__SWIG_4"));
  mixin(bindCode("SystemToBE__SWIG_5", "D_SystemToBE__SWIG_5"));
  mixin(bindCode("SystemToBE__SWIG_6", "D_SystemToBE__SWIG_6"));
  mixin(bindCode("SystemToBE__SWIG_7", "D_SystemToBE__SWIG_7"));
  mixin(bindCode("SystemToBE__SWIG_8", "D_SystemToBE__SWIG_8"));
  mixin(bindCode("SystemToBE__SWIG_9", "D_SystemToBE__SWIG_9"));
  mixin(bindCode("GetLength__SWIG_0", "D_GetLength__SWIG_0"));
  mixin(bindCode("GetLength__SWIG_1", "D_GetLength__SWIG_1"));
  mixin(bindCode("GetCharAt__SWIG_0", "D_GetCharAt__SWIG_0"));
  mixin(bindCode("GetCharAt__SWIG_1", "D_GetCharAt__SWIG_1"));
  mixin(bindCode("GetByteIndex__SWIG_0", "D_GetByteIndex__SWIG_0"));
  mixin(bindCode("GetByteIndex__SWIG_1", "D_GetByteIndex__SWIG_1"));
  mixin(bindCode("GetEncodeStringSize__SWIG_0", "D_GetEncodeStringSize__SWIG_0"));
  mixin(bindCode("GetEncodeStringSize__SWIG_1", "D_GetEncodeStringSize__SWIG_1"));
  mixin(bindCode("EncodeString__SWIG_0", "D_EncodeString__SWIG_0"));
  mixin(bindCode("EncodeString__SWIG_1", "D_EncodeString__SWIG_1"));
  mixin(bindCode("DecodeString__SWIG_0", "D_DecodeString__SWIG_0"));
  mixin(bindCode("DecodeString__SWIG_1", "D_DecodeString__SWIG_1"));
  mixin(bindCode("GetEncodeCharSize", "D_GetEncodeCharSize"));
  mixin(bindCode("EncodeChar", "D_EncodeChar"));
  mixin(bindCode("DecodeNextChar_Advance0", "D_DecodeNextChar_Advance0"));
  mixin(bindCode("DecodeNextChar", "D_DecodeNextChar"));
  mixin(bindCode("new_Log__SWIG_0", "D_new_Log__SWIG_0"));
  mixin(bindCode("new_Log__SWIG_1", "D_new_Log__SWIG_1"));
  mixin(bindCode("delete_Log", "D_delete_Log"));
  mixin(bindCode("Log_GetLoggingMask", "D_Log_GetLoggingMask"));
  mixin(bindCode("Log_SetLoggingMask", "D_Log_SetLoggingMask"));
  mixin(bindCode("Log_LogMessageVarg", "D_Log_LogMessageVarg"));
  mixin(bindCode("Log_LogMessage", "D_Log_LogMessage"));
  mixin(bindCode("Log_FormatLog", "D_Log_FormatLog"));
  mixin(bindCode("Log_DefaultLogOutput", "D_Log_DefaultLogOutput"));
  mixin(bindCode("Log_IsDebugMessage", "D_Log_IsDebugMessage"));
  mixin(bindCode("Log_SetGlobalLog", "D_Log_SetGlobalLog"));
  mixin(bindCode("Log_GetGlobalLog", "D_Log_GetGlobalLog"));
  mixin(bindCode("Log_GetDefaultLog", "D_Log_GetDefaultLog"));
  mixin(bindCode("Log_ConfigureDefaultLog__SWIG_0", "D_Log_ConfigureDefaultLog__SWIG_0"));
  mixin(bindCode("Log_ConfigureDefaultLog__SWIG_1", "D_Log_ConfigureDefaultLog__SWIG_1"));
  mixin(bindCode("LogText", "D_LogText"));
  mixin(bindCode("LogError", "D_LogError"));
  mixin(bindCode("Allocator_Alloc", "D_Allocator_Alloc"));
  mixin(bindCode("Allocator_AllocDebug", "D_Allocator_AllocDebug"));
  mixin(bindCode("Allocator_Realloc", "D_Allocator_Realloc"));
  mixin(bindCode("Allocator_Free", "D_Allocator_Free"));
  mixin(bindCode("Allocator_AllocAligned", "D_Allocator_AllocAligned"));
  mixin(bindCode("Allocator_FreeAligned", "D_Allocator_FreeAligned"));
  mixin(bindCode("Allocator_GetInstance", "D_Allocator_GetInstance"));
  mixin(bindCode("Allocator_setInstance", "D_Allocator_setInstance"));
  mixin(bindCode("delete_Allocator", "D_delete_Allocator"));
  mixin(bindCode("DefaultAllocator_Alloc", "D_DefaultAllocator_Alloc"));
  mixin(bindCode("DefaultAllocator_AllocDebug", "D_DefaultAllocator_AllocDebug"));
  mixin(bindCode("DefaultAllocator_Realloc", "D_DefaultAllocator_Realloc"));
  mixin(bindCode("DefaultAllocator_Free", "D_DefaultAllocator_Free"));
  mixin(bindCode("new_DefaultAllocator", "D_new_DefaultAllocator"));
  mixin(bindCode("delete_DefaultAllocator", "D_delete_DefaultAllocator"));
  mixin(bindCode("new_NewOverrideBase", "D_new_NewOverrideBase"));
  mixin(bindCode("delete_NewOverrideBase", "D_delete_NewOverrideBase"));
  mixin(bindCode("new_System__SWIG_0", "D_new_System__SWIG_0"));
  mixin(bindCode("new_System__SWIG_1", "D_new_System__SWIG_1"));
  mixin(bindCode("new_System__SWIG_2", "D_new_System__SWIG_2"));
  mixin(bindCode("delete_System", "D_delete_System"));
  mixin(bindCode("System_IsInitialized", "D_System_IsInitialized"));
  mixin(bindCode("System_Init__SWIG_0", "D_System_Init__SWIG_0"));
  mixin(bindCode("System_Init__SWIG_1", "D_System_Init__SWIG_1"));
  mixin(bindCode("System_Init__SWIG_2", "D_System_Init__SWIG_2"));
  mixin(bindCode("System_Destroy", "D_System_Destroy"));
  mixin(bindCode("new_RefCountImplCore", "D_new_RefCountImplCore"));
  mixin(bindCode("delete_RefCountImplCore", "D_delete_RefCountImplCore"));
  mixin(bindCode("RefCountImplCore_GetRefCount", "D_RefCountImplCore_GetRefCount"));
  mixin(bindCode("RefCountImplCore_checkInvalidDelete", "D_RefCountImplCore_checkInvalidDelete"));
  mixin(bindCode("new_RefCountNTSImplCore", "D_new_RefCountNTSImplCore"));
  mixin(bindCode("delete_RefCountNTSImplCore", "D_delete_RefCountNTSImplCore"));
  mixin(bindCode("RefCountNTSImplCore_GetRefCount", "D_RefCountNTSImplCore_GetRefCount"));
  mixin(bindCode("RefCountNTSImplCore_checkInvalidDelete", "D_RefCountNTSImplCore_checkInvalidDelete"));
  mixin(bindCode("RefCountImpl_AddRef", "D_RefCountImpl_AddRef"));
  mixin(bindCode("RefCountImpl_Release", "D_RefCountImpl_Release"));
  mixin(bindCode("new_RefCountImpl", "D_new_RefCountImpl"));
  mixin(bindCode("delete_RefCountImpl", "D_delete_RefCountImpl"));
  mixin(bindCode("RefCountImpl_Upcast", "D_RefCountImpl_Upcast"));
  mixin(bindCode("RefCountVImpl_AddRef", "D_RefCountVImpl_AddRef"));
  mixin(bindCode("RefCountVImpl_Release", "D_RefCountVImpl_Release"));
  mixin(bindCode("new_RefCountVImpl", "D_new_RefCountVImpl"));
  mixin(bindCode("delete_RefCountVImpl", "D_delete_RefCountVImpl"));
  mixin(bindCode("RefCountVImpl_Upcast", "D_RefCountVImpl_Upcast"));
  mixin(bindCode("RefCountNTSImpl_AddRef", "D_RefCountNTSImpl_AddRef"));
  mixin(bindCode("RefCountNTSImpl_Release", "D_RefCountNTSImpl_Release"));
  mixin(bindCode("new_RefCountNTSImpl", "D_new_RefCountNTSImpl"));
  mixin(bindCode("delete_RefCountNTSImpl", "D_delete_RefCountNTSImpl"));
  mixin(bindCode("RefCountNTSImpl_Upcast", "D_RefCountNTSImpl_Upcast"));
  mixin(bindCode("ReturnArg0", "D_ReturnArg0"));
  mixin(bindCode("OVR_itoa", "D_OVR_itoa"));
  mixin(bindCode("OVR_strlen", "D_OVR_strlen"));
  mixin(bindCode("OVR_strcpy", "D_OVR_strcpy"));
  mixin(bindCode("OVR_strncpy", "D_OVR_strncpy"));
  mixin(bindCode("OVR_strcat", "D_OVR_strcat"));
  mixin(bindCode("OVR_strcmp", "D_OVR_strcmp"));
  mixin(bindCode("OVR_strchr__SWIG_0", "D_OVR_strchr__SWIG_0"));
  mixin(bindCode("OVR_strrchr__SWIG_0", "D_OVR_strrchr__SWIG_0"));
  mixin(bindCode("OVR_memrchr", "D_OVR_memrchr"));
  mixin(bindCode("OVR_strtod", "D_OVR_strtod"));
  mixin(bindCode("OVR_strtol", "D_OVR_strtol"));
  mixin(bindCode("OVR_strtoul", "D_OVR_strtoul"));
  mixin(bindCode("OVR_strncmp", "D_OVR_strncmp"));
  mixin(bindCode("OVR_strtouq", "D_OVR_strtouq"));
  mixin(bindCode("OVR_strtoq", "D_OVR_strtoq"));
  mixin(bindCode("OVR_atoq", "D_OVR_atoq"));
  mixin(bindCode("OVR_atouq", "D_OVR_atouq"));
  mixin(bindCode("OVR_stricmp", "D_OVR_stricmp"));
  mixin(bindCode("OVR_strnicmp", "D_OVR_strnicmp"));
  mixin(bindCode("OVR_sprintf", "D_OVR_sprintf"));
  mixin(bindCode("OVR_vsprintf", "D_OVR_vsprintf"));
  mixin(bindCode("OVR_vscprintf", "D_OVR_vscprintf"));
  mixin(bindCode("OVR_wcscpy", "D_OVR_wcscpy"));
  mixin(bindCode("OVR_wcsncpy", "D_OVR_wcsncpy"));
  mixin(bindCode("OVR_wcscat", "D_OVR_wcscat"));
  mixin(bindCode("OVR_wcslen", "D_OVR_wcslen"));
  mixin(bindCode("OVR_wcscmp", "D_OVR_wcscmp"));
  mixin(bindCode("OVR_wcsicmp", "D_OVR_wcsicmp"));
  mixin(bindCode("OVR_wcsicoll", "D_OVR_wcsicoll"));
  mixin(bindCode("OVR_wcscoll", "D_OVR_wcscoll"));
  mixin(bindCode("UnicodeCharIs", "D_UnicodeCharIs"));
  mixin(bindCode("UnicodeAlnumBits_get", "D_UnicodeAlnumBits_get"));
  mixin(bindCode("UnicodeAlphaBits_get", "D_UnicodeAlphaBits_get"));
  mixin(bindCode("UnicodeDigitBits_get", "D_UnicodeDigitBits_get"));
  mixin(bindCode("UnicodeSpaceBits_get", "D_UnicodeSpaceBits_get"));
  mixin(bindCode("UnicodeXDigitBits_get", "D_UnicodeXDigitBits_get"));
  mixin(bindCode("OVR_iswalnum", "D_OVR_iswalnum"));
  mixin(bindCode("OVR_iswalpha", "D_OVR_iswalpha"));
  mixin(bindCode("OVR_iswdigit", "D_OVR_iswdigit"));
  mixin(bindCode("OVR_iswspace", "D_OVR_iswspace"));
  mixin(bindCode("OVR_iswxdigit", "D_OVR_iswxdigit"));
  mixin(bindCode("OVR_towupper", "D_OVR_towupper"));
  mixin(bindCode("OVR_towlower", "D_OVR_towlower"));
  mixin(bindCode("OVR_tolower", "D_OVR_tolower"));
  mixin(bindCode("OVR_toupper", "D_OVR_toupper"));
  mixin(bindCode("OVR_wcstod", "D_OVR_wcstod"));
  mixin(bindCode("OVR_wcstol", "D_OVR_wcstol"));
  mixin(bindCode("WorldAxes_XAxis_set", "D_WorldAxes_XAxis_set"));
  mixin(bindCode("WorldAxes_XAxis_get", "D_WorldAxes_XAxis_get"));
  mixin(bindCode("WorldAxes_YAxis_set", "D_WorldAxes_YAxis_set"));
  mixin(bindCode("WorldAxes_YAxis_get", "D_WorldAxes_YAxis_get"));
  mixin(bindCode("WorldAxes_ZAxis_set", "D_WorldAxes_ZAxis_set"));
  mixin(bindCode("WorldAxes_ZAxis_get", "D_WorldAxes_ZAxis_get"));
  mixin(bindCode("new_WorldAxes", "D_new_WorldAxes"));
  mixin(bindCode("delete_WorldAxes", "D_delete_WorldAxes"));
  mixin(bindCode("Matrix4f_M_set", "D_Matrix4f_M_set"));
  mixin(bindCode("Matrix4f_M_get", "D_Matrix4f_M_get"));
  mixin(bindCode("new_Matrix4f__SWIG_0", "D_new_Matrix4f__SWIG_0"));
  mixin(bindCode("new_Matrix4f__SWIG_1", "D_new_Matrix4f__SWIG_1"));
  mixin(bindCode("new_Matrix4f__SWIG_2", "D_new_Matrix4f__SWIG_2"));
  mixin(bindCode("new_Matrix4f__SWIG_3", "D_new_Matrix4f__SWIG_3"));
  mixin(bindCode("Matrix4f_ToString", "D_Matrix4f_ToString"));
  mixin(bindCode("Matrix4f_FromString", "D_Matrix4f_FromString"));
  mixin(bindCode("Matrix4f_Identity", "D_Matrix4f_Identity"));
  mixin(bindCode("Matrix4f_SetIdentity", "D_Matrix4f_SetIdentity"));
  mixin(bindCode("Matrix4f_swigOpAdd", "D_Matrix4f_swigOpAdd"));
  mixin(bindCode("Matrix4f_swigOpAddAssign", "D_Matrix4f_swigOpAddAssign"));
  mixin(bindCode("Matrix4f_swigOpSub", "D_Matrix4f_swigOpSub"));
  mixin(bindCode("Matrix4f_swigOpSubAssign", "D_Matrix4f_swigOpSubAssign"));
  mixin(bindCode("Matrix4f_Multiply", "D_Matrix4f_Multiply"));
  mixin(bindCode("Matrix4f_swigOpMul__SWIG_0", "D_Matrix4f_swigOpMul__SWIG_0"));
  mixin(bindCode("Matrix4f_swigOpMulAssign__SWIG_0", "D_Matrix4f_swigOpMulAssign__SWIG_0"));
  mixin(bindCode("Matrix4f_swigOpMul__SWIG_1", "D_Matrix4f_swigOpMul__SWIG_1"));
  mixin(bindCode("Matrix4f_swigOpMulAssign__SWIG_1", "D_Matrix4f_swigOpMulAssign__SWIG_1"));
  mixin(bindCode("Matrix4f_swigOpDiv", "D_Matrix4f_swigOpDiv"));
  mixin(bindCode("Matrix4f_swigOpDivAssign", "D_Matrix4f_swigOpDivAssign"));
  mixin(bindCode("Matrix4f_Transform", "D_Matrix4f_Transform"));
  mixin(bindCode("Matrix4f_Transposed", "D_Matrix4f_Transposed"));
  mixin(bindCode("Matrix4f_Transpose", "D_Matrix4f_Transpose"));
  mixin(bindCode("Matrix4f_SubDet", "D_Matrix4f_SubDet"));
  mixin(bindCode("Matrix4f_Cofactor", "D_Matrix4f_Cofactor"));
  mixin(bindCode("Matrix4f_Determinant", "D_Matrix4f_Determinant"));
  mixin(bindCode("Matrix4f_Adjugated", "D_Matrix4f_Adjugated"));
  mixin(bindCode("Matrix4f_Inverted", "D_Matrix4f_Inverted"));
  mixin(bindCode("Matrix4f_Invert", "D_Matrix4f_Invert"));
  mixin(bindCode("Matrix4f_InvertedHomogeneousTransform", "D_Matrix4f_InvertedHomogeneousTransform"));
  mixin(bindCode("Matrix4f_InvertHomogeneousTransform", "D_Matrix4f_InvertHomogeneousTransform"));
  mixin(bindCode("Matrix4f_AxisConversion", "D_Matrix4f_AxisConversion"));
  mixin(bindCode("Matrix4f_Translation__SWIG_0", "D_Matrix4f_Translation__SWIG_0"));
  mixin(bindCode("Matrix4f_Translation__SWIG_1", "D_Matrix4f_Translation__SWIG_1"));
  mixin(bindCode("Matrix4f_Translation__SWIG_2", "D_Matrix4f_Translation__SWIG_2"));
  mixin(bindCode("Matrix4f_Scaling__SWIG_0", "D_Matrix4f_Scaling__SWIG_0"));
  mixin(bindCode("Matrix4f_Scaling__SWIG_1", "D_Matrix4f_Scaling__SWIG_1"));
  mixin(bindCode("Matrix4f_Scaling__SWIG_2", "D_Matrix4f_Scaling__SWIG_2"));
  mixin(bindCode("Matrix4f_RotationAxis", "D_Matrix4f_RotationAxis"));
  mixin(bindCode("Matrix4f_RotationX", "D_Matrix4f_RotationX"));
  mixin(bindCode("Matrix4f_RotationY", "D_Matrix4f_RotationY"));
  mixin(bindCode("Matrix4f_RotationZ", "D_Matrix4f_RotationZ"));
  mixin(bindCode("Matrix4f_LookAtRH", "D_Matrix4f_LookAtRH"));
  mixin(bindCode("Matrix4f_LookAtLH", "D_Matrix4f_LookAtLH"));
  mixin(bindCode("Matrix4f_PerspectiveRH", "D_Matrix4f_PerspectiveRH"));
  mixin(bindCode("Matrix4f_PerspectiveLH", "D_Matrix4f_PerspectiveLH"));
  mixin(bindCode("Matrix4f_Ortho2D", "D_Matrix4f_Ortho2D"));
  mixin(bindCode("delete_Matrix4f", "D_delete_Matrix4f"));
  mixin(bindCode("new_AtomicOpsRawBase", "D_new_AtomicOpsRawBase"));
  mixin(bindCode("delete_AtomicOpsRawBase", "D_delete_AtomicOpsRawBase"));
  mixin(bindCode("AtomicOpsRaw_4ByteImpl_Exchange_NoSync", "D_AtomicOpsRaw_4ByteImpl_Exchange_NoSync"));
  mixin(bindCode("AtomicOpsRaw_4ByteImpl_ExchangeAdd_NoSync", "D_AtomicOpsRaw_4ByteImpl_ExchangeAdd_NoSync"));
  mixin(bindCode("AtomicOpsRaw_4ByteImpl_CompareAndSet_NoSync", "D_AtomicOpsRaw_4ByteImpl_CompareAndSet_NoSync"));
  mixin(bindCode("new_AtomicOpsRaw_4ByteImpl", "D_new_AtomicOpsRaw_4ByteImpl"));
  mixin(bindCode("delete_AtomicOpsRaw_4ByteImpl", "D_delete_AtomicOpsRaw_4ByteImpl"));
  mixin(bindCode("AtomicOpsRaw_4ByteImpl_Upcast", "D_AtomicOpsRaw_4ByteImpl_Upcast"));
  mixin(bindCode("new_AtomicOpsRaw_8ByteImpl", "D_new_AtomicOpsRaw_8ByteImpl"));
  mixin(bindCode("delete_AtomicOpsRaw_8ByteImpl", "D_delete_AtomicOpsRaw_8ByteImpl"));
  mixin(bindCode("AtomicOpsRaw_8ByteImpl_Upcast", "D_AtomicOpsRaw_8ByteImpl_Upcast"));
  mixin(bindCode("new_Lock__SWIG_0", "D_new_Lock__SWIG_0"));
  mixin(bindCode("new_Lock__SWIG_1", "D_new_Lock__SWIG_1"));
  mixin(bindCode("delete_Lock", "D_delete_Lock"));
  mixin(bindCode("Lock_DoLock", "D_Lock_DoLock"));
  mixin(bindCode("Lock_Unlock", "D_Lock_Unlock"));
  mixin(bindCode("new_String__SWIG_1", "D_new_String__SWIG_1"));
  mixin(bindCode("new_String__SWIG_2", "D_new_String__SWIG_2"));
  mixin(bindCode("new_String__SWIG_3", "D_new_String__SWIG_3"));
  mixin(bindCode("new_String__SWIG_4", "D_new_String__SWIG_4"));
  mixin(bindCode("new_String__SWIG_5", "D_new_String__SWIG_5"));
  mixin(bindCode("new_String__SWIG_6", "D_new_String__SWIG_6"));
  mixin(bindCode("new_String__SWIG_7", "D_new_String__SWIG_7"));
  mixin(bindCode("new_String__SWIG_8", "D_new_String__SWIG_8"));
  mixin(bindCode("new_String__SWIG_9", "D_new_String__SWIG_9"));
  mixin(bindCode("delete_String", "D_delete_String"));
  mixin(bindCode("String_NullData_set", "D_String_NullData_set"));
  mixin(bindCode("String_NullData_get", "D_String_NullData_get"));
  mixin(bindCode("String_Clear", "D_String_Clear"));
  mixin(bindCode("String_ToCStr", "D_String_ToCStr"));
  mixin(bindCode("String_GetSize", "D_String_GetSize"));
  mixin(bindCode("String_IsEmpty", "D_String_IsEmpty"));
  mixin(bindCode("String_GetLength", "D_String_GetLength"));
  mixin(bindCode("String_GetCharAt", "D_String_GetCharAt"));
  mixin(bindCode("String_GetFirstCharAt", "D_String_GetFirstCharAt"));
  mixin(bindCode("String_GetNextChar", "D_String_GetNextChar"));
  mixin(bindCode("String_AppendChar", "D_String_AppendChar"));
  mixin(bindCode("String_AppendString__SWIG_0", "D_String_AppendString__SWIG_0"));
  mixin(bindCode("String_AppendString__SWIG_1", "D_String_AppendString__SWIG_1"));
  mixin(bindCode("String_AppendString__SWIG_2", "D_String_AppendString__SWIG_2"));
  mixin(bindCode("String_AppendString__SWIG_3", "D_String_AppendString__SWIG_3"));
  mixin(bindCode("String_AssignString__SWIG_0", "D_String_AssignString__SWIG_0"));
  mixin(bindCode("String_AssignString__SWIG_1", "D_String_AssignString__SWIG_1"));
  mixin(bindCode("String_Remove__SWIG_0", "D_String_Remove__SWIG_0"));
  mixin(bindCode("String_Remove__SWIG_1", "D_String_Remove__SWIG_1"));
  mixin(bindCode("String_Substring", "D_String_Substring"));
  mixin(bindCode("String_ToUpper", "D_String_ToUpper"));
  mixin(bindCode("String_ToLower", "D_String_ToLower"));
  mixin(bindCode("String_Insert__SWIG_0", "D_String_Insert__SWIG_0"));
  mixin(bindCode("String_Insert__SWIG_1", "D_String_Insert__SWIG_1"));
  mixin(bindCode("String_InsertCharAt", "D_String_InsertCharAt"));
  mixin(bindCode("String_GetByteIndex", "D_String_GetByteIndex"));
  mixin(bindCode("String_CompareNoCase__SWIG_0", "D_String_CompareNoCase__SWIG_0"));
  mixin(bindCode("String_CompareNoCase__SWIG_1", "D_String_CompareNoCase__SWIG_1"));
  mixin(bindCode("String_BernsteinHashFunctionCIS__SWIG_0", "D_String_BernsteinHashFunctionCIS__SWIG_0"));
  mixin(bindCode("String_BernsteinHashFunctionCIS__SWIG_1", "D_String_BernsteinHashFunctionCIS__SWIG_1"));
  mixin(bindCode("String_BernsteinHashFunction__SWIG_0", "D_String_BernsteinHashFunction__SWIG_0"));
  mixin(bindCode("String_BernsteinHashFunction__SWIG_1", "D_String_BernsteinHashFunction__SWIG_1"));
  mixin(bindCode("String_HasAbsolutePath__SWIG_0", "D_String_HasAbsolutePath__SWIG_0"));
  mixin(bindCode("String_HasExtension__SWIG_0", "D_String_HasExtension__SWIG_0"));
  mixin(bindCode("String_HasProtocol__SWIG_0", "D_String_HasProtocol__SWIG_0"));
  mixin(bindCode("String_HasAbsolutePath__SWIG_1", "D_String_HasAbsolutePath__SWIG_1"));
  mixin(bindCode("String_HasExtension__SWIG_1", "D_String_HasExtension__SWIG_1"));
  mixin(bindCode("String_HasProtocol__SWIG_1", "D_String_HasProtocol__SWIG_1"));
  mixin(bindCode("String_GetProtocol", "D_String_GetProtocol"));
  mixin(bindCode("String_GetPath", "D_String_GetPath"));
  mixin(bindCode("String_GetFilename", "D_String_GetFilename"));
  mixin(bindCode("String_GetExtension", "D_String_GetExtension"));
  mixin(bindCode("String_StripProtocol", "D_String_StripProtocol"));
  mixin(bindCode("String_StripExtension", "D_String_StripExtension"));
  mixin(bindCode("String_swigOpAddAssign__SWIG_0", "D_String_swigOpAddAssign__SWIG_0"));
  mixin(bindCode("String_swigOpAddAssign__SWIG_1", "D_String_swigOpAddAssign__SWIG_1"));
  mixin(bindCode("String_swigOpAddAssign__SWIG_2", "D_String_swigOpAddAssign__SWIG_2"));
  mixin(bindCode("String_swigOpAddAssign__SWIG_3", "D_String_swigOpAddAssign__SWIG_3"));
  mixin(bindCode("String_swigOpAdd__SWIG_0", "D_String_swigOpAdd__SWIG_0"));
  mixin(bindCode("String_swigOpAdd__SWIG_1", "D_String_swigOpAdd__SWIG_1"));
  mixin(bindCode("String_swigOpEquals__SWIG_0", "D_String_swigOpEquals__SWIG_0"));
  mixin(bindCode("String_swigOpEquals__SWIG_1", "D_String_swigOpEquals__SWIG_1"));
  mixin(bindCode("String_swigOpLt__SWIG_0", "D_String_swigOpLt__SWIG_0"));
  mixin(bindCode("String_swigOpLt__SWIG_1", "D_String_swigOpLt__SWIG_1"));
  mixin(bindCode("String_swigOpGt__SWIG_0", "D_String_swigOpGt__SWIG_0"));
  mixin(bindCode("String_swigOpGt__SWIG_1", "D_String_swigOpGt__SWIG_1"));
  mixin(bindCode("String_CompareNoCase__SWIG_2", "D_String_CompareNoCase__SWIG_2"));
  mixin(bindCode("String_CompareNoCase__SWIG_3", "D_String_CompareNoCase__SWIG_3"));
  mixin(bindCode("String_opIndex__SWIG_0", "D_String_opIndex__SWIG_0"));
  mixin(bindCode("String_opIndex__SWIG_1", "D_String_opIndex__SWIG_1"));
  mixin(bindCode("String_swigOpEquals__SWIG_2", "D_String_swigOpEquals__SWIG_2"));
  mixin(bindCode("new_StringBuffer__SWIG_0", "D_new_StringBuffer__SWIG_0"));
  mixin(bindCode("new_StringBuffer__SWIG_1", "D_new_StringBuffer__SWIG_1"));
  mixin(bindCode("new_StringBuffer__SWIG_2", "D_new_StringBuffer__SWIG_2"));
  mixin(bindCode("new_StringBuffer__SWIG_3", "D_new_StringBuffer__SWIG_3"));
  mixin(bindCode("new_StringBuffer__SWIG_4", "D_new_StringBuffer__SWIG_4"));
  mixin(bindCode("new_StringBuffer__SWIG_5", "D_new_StringBuffer__SWIG_5"));
  mixin(bindCode("new_StringBuffer__SWIG_6", "D_new_StringBuffer__SWIG_6"));
  mixin(bindCode("delete_StringBuffer", "D_delete_StringBuffer"));
  mixin(bindCode("StringBuffer_GetGrowSize", "D_StringBuffer_GetGrowSize"));
  mixin(bindCode("StringBuffer_SetGrowSize", "D_StringBuffer_SetGrowSize"));
  mixin(bindCode("StringBuffer_Clear", "D_StringBuffer_Clear"));
  mixin(bindCode("StringBuffer_ToCStr", "D_StringBuffer_ToCStr"));
  mixin(bindCode("StringBuffer_GetSize", "D_StringBuffer_GetSize"));
  mixin(bindCode("StringBuffer_IsEmpty", "D_StringBuffer_IsEmpty"));
  mixin(bindCode("StringBuffer_GetLength", "D_StringBuffer_GetLength"));
  mixin(bindCode("StringBuffer_GetCharAt", "D_StringBuffer_GetCharAt"));
  mixin(bindCode("StringBuffer_GetFirstCharAt", "D_StringBuffer_GetFirstCharAt"));
  mixin(bindCode("StringBuffer_GetNextChar", "D_StringBuffer_GetNextChar"));
  mixin(bindCode("StringBuffer_Resize", "D_StringBuffer_Resize"));
  mixin(bindCode("StringBuffer_Reserve", "D_StringBuffer_Reserve"));
  mixin(bindCode("StringBuffer_AppendChar", "D_StringBuffer_AppendChar"));
  mixin(bindCode("StringBuffer_AppendString__SWIG_0", "D_StringBuffer_AppendString__SWIG_0"));
  mixin(bindCode("StringBuffer_AppendString__SWIG_1", "D_StringBuffer_AppendString__SWIG_1"));
  mixin(bindCode("StringBuffer_AppendString__SWIG_2", "D_StringBuffer_AppendString__SWIG_2"));
  mixin(bindCode("StringBuffer_AppendString__SWIG_3", "D_StringBuffer_AppendString__SWIG_3"));
  mixin(bindCode("StringBuffer_AppendFormat", "D_StringBuffer_AppendFormat"));
  mixin(bindCode("StringBuffer_Insert__SWIG_0", "D_StringBuffer_Insert__SWIG_0"));
  mixin(bindCode("StringBuffer_Insert__SWIG_1", "D_StringBuffer_Insert__SWIG_1"));
  mixin(bindCode("StringBuffer_InsertCharAt", "D_StringBuffer_InsertCharAt"));
  mixin(bindCode("StringBuffer_swigOpAddAssign__SWIG_0", "D_StringBuffer_swigOpAddAssign__SWIG_0"));
  mixin(bindCode("StringBuffer_swigOpAddAssign__SWIG_1", "D_StringBuffer_swigOpAddAssign__SWIG_1"));
  mixin(bindCode("StringBuffer_swigOpAddAssign__SWIG_2", "D_StringBuffer_swigOpAddAssign__SWIG_2"));
  mixin(bindCode("StringBuffer_swigOpAddAssign__SWIG_3", "D_StringBuffer_swigOpAddAssign__SWIG_3"));
  mixin(bindCode("StringBuffer_opIndex__SWIG_0", "D_StringBuffer_opIndex__SWIG_0"));
  mixin(bindCode("StringBuffer_opIndex__SWIG_1", "D_StringBuffer_opIndex__SWIG_1"));
  mixin(bindCode("new_StringDataPtr__SWIG_0", "D_new_StringDataPtr__SWIG_0"));
  mixin(bindCode("new_StringDataPtr__SWIG_1", "D_new_StringDataPtr__SWIG_1"));
  mixin(bindCode("new_StringDataPtr__SWIG_2", "D_new_StringDataPtr__SWIG_2"));
  mixin(bindCode("new_StringDataPtr__SWIG_3", "D_new_StringDataPtr__SWIG_3"));
  mixin(bindCode("new_StringDataPtr__SWIG_4", "D_new_StringDataPtr__SWIG_4"));
  mixin(bindCode("StringDataPtr_ToCStr", "D_StringDataPtr_ToCStr"));
  mixin(bindCode("StringDataPtr_GetSize", "D_StringDataPtr_GetSize"));
  mixin(bindCode("StringDataPtr_IsEmpty", "D_StringDataPtr_IsEmpty"));
  mixin(bindCode("StringDataPtr_IsPrefix", "D_StringDataPtr_IsPrefix"));
  mixin(bindCode("StringDataPtr_IsSuffix", "D_StringDataPtr_IsSuffix"));
  mixin(bindCode("StringDataPtr_FindChar__SWIG_0", "D_StringDataPtr_FindChar__SWIG_0"));
  mixin(bindCode("StringDataPtr_FindChar__SWIG_1", "D_StringDataPtr_FindChar__SWIG_1"));
  mixin(bindCode("StringDataPtr_FindLastChar__SWIG_0", "D_StringDataPtr_FindLastChar__SWIG_0"));
  mixin(bindCode("StringDataPtr_FindLastChar__SWIG_1", "D_StringDataPtr_FindLastChar__SWIG_1"));
  mixin(bindCode("StringDataPtr_GetTrimLeft", "D_StringDataPtr_GetTrimLeft"));
  mixin(bindCode("StringDataPtr_GetTrimRight", "D_StringDataPtr_GetTrimRight"));
  mixin(bindCode("StringDataPtr_GetNextToken__SWIG_0", "D_StringDataPtr_GetNextToken__SWIG_0"));
  mixin(bindCode("StringDataPtr_GetNextToken__SWIG_1", "D_StringDataPtr_GetNextToken__SWIG_1"));
  mixin(bindCode("StringDataPtr_TrimLeft", "D_StringDataPtr_TrimLeft"));
  mixin(bindCode("StringDataPtr_TrimRight", "D_StringDataPtr_TrimRight"));
  mixin(bindCode("StringDataPtr_Begin", "D_StringDataPtr_Begin"));
  mixin(bindCode("StringDataPtr_End", "D_StringDataPtr_End"));
  mixin(bindCode("StringDataPtr_swigOpEquals", "D_StringDataPtr_swigOpEquals"));
  mixin(bindCode("delete_StringDataPtr", "D_delete_StringDataPtr"));
  mixin(bindCode("new_DeviceHandle__SWIG_0", "D_new_DeviceHandle__SWIG_0"));
  mixin(bindCode("new_DeviceHandle__SWIG_1", "D_new_DeviceHandle__SWIG_1"));
  mixin(bindCode("delete_DeviceHandle", "D_delete_DeviceHandle"));
  mixin(bindCode("DeviceHandle_swigOpEquals", "D_DeviceHandle_swigOpEquals"));
  mixin(bindCode("DeviceHandle_GetDevice_AddRef", "D_DeviceHandle_GetDevice_AddRef"));
  mixin(bindCode("DeviceHandle_GetType", "D_DeviceHandle_GetType"));
  mixin(bindCode("DeviceHandle_GetDeviceInfo", "D_DeviceHandle_GetDeviceInfo"));
  mixin(bindCode("DeviceHandle_IsAvailable", "D_DeviceHandle_IsAvailable"));
  mixin(bindCode("DeviceHandle_IsCreated", "D_DeviceHandle_IsCreated"));
  mixin(bindCode("DeviceHandle_IsDevice", "D_DeviceHandle_IsDevice"));
  mixin(bindCode("DeviceHandle_CreateDevice", "D_DeviceHandle_CreateDevice"));
  mixin(bindCode("DeviceHandle_Clear", "D_DeviceHandle_Clear"));
  mixin(bindCode("new_Message__SWIG_0", "D_new_Message__SWIG_0"));
  mixin(bindCode("new_Message__SWIG_1", "D_new_Message__SWIG_1"));
  mixin(bindCode("new_Message__SWIG_2", "D_new_Message__SWIG_2"));
  mixin(bindCode("Message_Type_set", "D_Message_Type_set"));
  mixin(bindCode("Message_Type_get", "D_Message_Type_get"));
  mixin(bindCode("Message_pDevice_set", "D_Message_pDevice_set"));
  mixin(bindCode("Message_pDevice_get", "D_Message_pDevice_get"));
  mixin(bindCode("delete_Message", "D_delete_Message"));
  mixin(bindCode("new_MessageBodyFrame", "D_new_MessageBodyFrame"));
  mixin(bindCode("MessageBodyFrame_Acceleration_set", "D_MessageBodyFrame_Acceleration_set"));
  mixin(bindCode("MessageBodyFrame_Acceleration_get", "D_MessageBodyFrame_Acceleration_get"));
  mixin(bindCode("MessageBodyFrame_RotationRate_set", "D_MessageBodyFrame_RotationRate_set"));
  mixin(bindCode("MessageBodyFrame_RotationRate_get", "D_MessageBodyFrame_RotationRate_get"));
  mixin(bindCode("MessageBodyFrame_MagneticField_set", "D_MessageBodyFrame_MagneticField_set"));
  mixin(bindCode("MessageBodyFrame_MagneticField_get", "D_MessageBodyFrame_MagneticField_get"));
  mixin(bindCode("MessageBodyFrame_Temperature_set", "D_MessageBodyFrame_Temperature_set"));
  mixin(bindCode("MessageBodyFrame_Temperature_get", "D_MessageBodyFrame_Temperature_get"));
  mixin(bindCode("MessageBodyFrame_TimeDelta_set", "D_MessageBodyFrame_TimeDelta_set"));
  mixin(bindCode("MessageBodyFrame_TimeDelta_get", "D_MessageBodyFrame_TimeDelta_get"));
  mixin(bindCode("delete_MessageBodyFrame", "D_delete_MessageBodyFrame"));
  mixin(bindCode("MessageBodyFrame_Upcast", "D_MessageBodyFrame_Upcast"));
  mixin(bindCode("new_MessageDeviceStatus", "D_new_MessageDeviceStatus"));
  mixin(bindCode("MessageDeviceStatus_Handle_set", "D_MessageDeviceStatus_Handle_set"));
  mixin(bindCode("MessageDeviceStatus_Handle_get", "D_MessageDeviceStatus_Handle_get"));
  mixin(bindCode("delete_MessageDeviceStatus", "D_delete_MessageDeviceStatus"));
  mixin(bindCode("MessageDeviceStatus_Upcast", "D_MessageDeviceStatus_Upcast"));
  mixin(bindCode("new_MessageLatencyTestSamples", "D_new_MessageLatencyTestSamples"));
  mixin(bindCode("MessageLatencyTestSamples_Samples_set", "D_MessageLatencyTestSamples_Samples_set"));
  mixin(bindCode("MessageLatencyTestSamples_Samples_get", "D_MessageLatencyTestSamples_Samples_get"));
  mixin(bindCode("delete_MessageLatencyTestSamples", "D_delete_MessageLatencyTestSamples"));
  mixin(bindCode("MessageLatencyTestSamples_Upcast", "D_MessageLatencyTestSamples_Upcast"));
  mixin(bindCode("new_MessageLatencyTestColorDetected", "D_new_MessageLatencyTestColorDetected"));
  mixin(bindCode("MessageLatencyTestColorDetected_Elapsed_set", "D_MessageLatencyTestColorDetected_Elapsed_set"));
  mixin(bindCode("MessageLatencyTestColorDetected_Elapsed_get", "D_MessageLatencyTestColorDetected_Elapsed_get"));
  mixin(bindCode("MessageLatencyTestColorDetected_DetectedValue_set", "D_MessageLatencyTestColorDetected_DetectedValue_set"));
  mixin(bindCode("MessageLatencyTestColorDetected_DetectedValue_get", "D_MessageLatencyTestColorDetected_DetectedValue_get"));
  mixin(bindCode("MessageLatencyTestColorDetected_TargetValue_set", "D_MessageLatencyTestColorDetected_TargetValue_set"));
  mixin(bindCode("MessageLatencyTestColorDetected_TargetValue_get", "D_MessageLatencyTestColorDetected_TargetValue_get"));
  mixin(bindCode("delete_MessageLatencyTestColorDetected", "D_delete_MessageLatencyTestColorDetected"));
  mixin(bindCode("MessageLatencyTestColorDetected_Upcast", "D_MessageLatencyTestColorDetected_Upcast"));
  mixin(bindCode("new_MessageLatencyTestStarted", "D_new_MessageLatencyTestStarted"));
  mixin(bindCode("MessageLatencyTestStarted_TargetValue_set", "D_MessageLatencyTestStarted_TargetValue_set"));
  mixin(bindCode("MessageLatencyTestStarted_TargetValue_get", "D_MessageLatencyTestStarted_TargetValue_get"));
  mixin(bindCode("delete_MessageLatencyTestStarted", "D_delete_MessageLatencyTestStarted"));
  mixin(bindCode("MessageLatencyTestStarted_Upcast", "D_MessageLatencyTestStarted_Upcast"));
  mixin(bindCode("new_MessageLatencyTestButton", "D_new_MessageLatencyTestButton"));
  mixin(bindCode("delete_MessageLatencyTestButton", "D_delete_MessageLatencyTestButton"));
  mixin(bindCode("MessageLatencyTestButton_Upcast", "D_MessageLatencyTestButton_Upcast"));
  mixin(bindCode("new_SensorFusion__SWIG_0", "D_new_SensorFusion__SWIG_0"));
  mixin(bindCode("new_SensorFusion__SWIG_1", "D_new_SensorFusion__SWIG_1"));
  mixin(bindCode("delete_SensorFusion", "D_delete_SensorFusion"));
  mixin(bindCode("SensorFusion_AttachToSensor", "D_SensorFusion_AttachToSensor"));
  mixin(bindCode("SensorFusion_IsAttachedToSensor", "D_SensorFusion_IsAttachedToSensor"));
  mixin(bindCode("SensorFusion_GetOrientation", "D_SensorFusion_GetOrientation"));
  mixin(bindCode("SensorFusion_GetPredictedOrientation__SWIG_0", "D_SensorFusion_GetPredictedOrientation__SWIG_0"));
  mixin(bindCode("SensorFusion_GetPredictedOrientation__SWIG_1", "D_SensorFusion_GetPredictedOrientation__SWIG_1"));
  mixin(bindCode("SensorFusion_GetAcceleration", "D_SensorFusion_GetAcceleration"));
  mixin(bindCode("SensorFusion_GetAngularVelocity", "D_SensorFusion_GetAngularVelocity"));
  mixin(bindCode("SensorFusion_GetMagnetometer", "D_SensorFusion_GetMagnetometer"));
  mixin(bindCode("SensorFusion_GetCalibratedMagnetometer", "D_SensorFusion_GetCalibratedMagnetometer"));
  mixin(bindCode("SensorFusion_Reset", "D_SensorFusion_Reset"));
  mixin(bindCode("SensorFusion_EnableMotionTracking__SWIG_0", "D_SensorFusion_EnableMotionTracking__SWIG_0"));
  mixin(bindCode("SensorFusion_EnableMotionTracking__SWIG_1", "D_SensorFusion_EnableMotionTracking__SWIG_1"));
  mixin(bindCode("SensorFusion_IsMotionTrackingEnabled", "D_SensorFusion_IsMotionTrackingEnabled"));
  mixin(bindCode("SensorFusion_GetPredictionDelta", "D_SensorFusion_GetPredictionDelta"));
  mixin(bindCode("SensorFusion_SetPrediction__SWIG_0", "D_SensorFusion_SetPrediction__SWIG_0"));
  mixin(bindCode("SensorFusion_SetPrediction__SWIG_1", "D_SensorFusion_SetPrediction__SWIG_1"));
  mixin(bindCode("SensorFusion_SetPredictionEnabled__SWIG_0", "D_SensorFusion_SetPredictionEnabled__SWIG_0"));
  mixin(bindCode("SensorFusion_SetPredictionEnabled__SWIG_1", "D_SensorFusion_SetPredictionEnabled__SWIG_1"));
  mixin(bindCode("SensorFusion_IsPredictionEnabled", "D_SensorFusion_IsPredictionEnabled"));
  mixin(bindCode("SensorFusion_SetGravityEnabled", "D_SensorFusion_SetGravityEnabled"));
  mixin(bindCode("SensorFusion_IsGravityEnabled", "D_SensorFusion_IsGravityEnabled"));
  mixin(bindCode("SensorFusion_GetAccelGain", "D_SensorFusion_GetAccelGain"));
  mixin(bindCode("SensorFusion_SetAccelGain", "D_SensorFusion_SetAccelGain"));
  mixin(bindCode("SensorFusion_SaveMagCalibration__SWIG_0", "D_SensorFusion_SaveMagCalibration__SWIG_0"));
  mixin(bindCode("SensorFusion_SaveMagCalibration__SWIG_1", "D_SensorFusion_SaveMagCalibration__SWIG_1"));
  mixin(bindCode("SensorFusion_LoadMagCalibration__SWIG_0", "D_SensorFusion_LoadMagCalibration__SWIG_0"));
  mixin(bindCode("SensorFusion_LoadMagCalibration__SWIG_1", "D_SensorFusion_LoadMagCalibration__SWIG_1"));
  mixin(bindCode("SensorFusion_SetYawCorrectionEnabled", "D_SensorFusion_SetYawCorrectionEnabled"));
  mixin(bindCode("SensorFusion_IsYawCorrectionEnabled", "D_SensorFusion_IsYawCorrectionEnabled"));
  mixin(bindCode("SensorFusion_SetMagCalibration", "D_SensorFusion_SetMagCalibration"));
  mixin(bindCode("SensorFusion_GetMagCalibration", "D_SensorFusion_GetMagCalibration"));
  mixin(bindCode("SensorFusion_GetMagCalibrationTime", "D_SensorFusion_GetMagCalibrationTime"));
  mixin(bindCode("SensorFusion_HasMagCalibration", "D_SensorFusion_HasMagCalibration"));
  mixin(bindCode("SensorFusion_ClearMagCalibration", "D_SensorFusion_ClearMagCalibration"));
  mixin(bindCode("SensorFusion_ClearMagReferences", "D_SensorFusion_ClearMagReferences"));
  mixin(bindCode("SensorFusion_GetCalibratedMagValue", "D_SensorFusion_GetCalibratedMagValue"));
  mixin(bindCode("SensorFusion_OnMessage", "D_SensorFusion_OnMessage"));
  mixin(bindCode("SensorFusion_SetDelegateMessageHandler", "D_SensorFusion_SetDelegateMessageHandler"));
  mixin(bindCode("SensorFusion_Upcast", "D_SensorFusion_Upcast"));
  mixin(bindCode("ProfileManager_Create", "D_ProfileManager_Create"));
  mixin(bindCode("ProfileManager_GetProfileCount", "D_ProfileManager_GetProfileCount"));
  mixin(bindCode("ProfileManager_GetProfileName", "D_ProfileManager_GetProfileName"));
  mixin(bindCode("ProfileManager_HasProfile", "D_ProfileManager_HasProfile"));
  mixin(bindCode("ProfileManager_LoadProfile__SWIG_0", "D_ProfileManager_LoadProfile__SWIG_0"));
  mixin(bindCode("ProfileManager_LoadProfile__SWIG_1", "D_ProfileManager_LoadProfile__SWIG_1"));
  mixin(bindCode("ProfileManager_GetDeviceDefaultProfile", "D_ProfileManager_GetDeviceDefaultProfile"));
  mixin(bindCode("ProfileManager_GetDefaultProfileName", "D_ProfileManager_GetDefaultProfileName"));
  mixin(bindCode("ProfileManager_SetDefaultProfileName", "D_ProfileManager_SetDefaultProfileName"));
  mixin(bindCode("ProfileManager_Save", "D_ProfileManager_Save"));
  mixin(bindCode("ProfileManager_Delete", "D_ProfileManager_Delete"));
  mixin(bindCode("Profile_Type_set", "D_Profile_Type_set"));
  mixin(bindCode("Profile_Type_get", "D_Profile_Type_get"));
  mixin(bindCode("Profile_Name_set", "D_Profile_Name_set"));
  mixin(bindCode("Profile_Name_get", "D_Profile_Name_get"));
  mixin(bindCode("Profile_Clone", "D_Profile_Clone"));
  mixin(bindCode("Profile_GetGender", "D_Profile_GetGender"));
  mixin(bindCode("Profile_GetPlayerHeight", "D_Profile_GetPlayerHeight"));
  mixin(bindCode("Profile_GetIPD", "D_Profile_GetIPD"));
  mixin(bindCode("Profile_GetEyeHeight", "D_Profile_GetEyeHeight"));
  mixin(bindCode("Profile_SetGender", "D_Profile_SetGender"));
  mixin(bindCode("Profile_SetPlayerHeight", "D_Profile_SetPlayerHeight"));
  mixin(bindCode("Profile_SetIPD", "D_Profile_SetIPD"));
  mixin(bindCode("delete_Profile", "D_delete_Profile"));
  mixin(bindCode("HMDProfile_Clone", "D_HMDProfile_Clone"));
  mixin(bindCode("HMDProfile_SetLL", "D_HMDProfile_SetLL"));
  mixin(bindCode("HMDProfile_SetLR", "D_HMDProfile_SetLR"));
  mixin(bindCode("HMDProfile_SetRL", "D_HMDProfile_SetRL"));
  mixin(bindCode("HMDProfile_SetRR", "D_HMDProfile_SetRR"));
  mixin(bindCode("HMDProfile_GetLL", "D_HMDProfile_GetLL"));
  mixin(bindCode("HMDProfile_GetLR", "D_HMDProfile_GetLR"));
  mixin(bindCode("HMDProfile_GetRL", "D_HMDProfile_GetRL"));
  mixin(bindCode("HMDProfile_GetRR", "D_HMDProfile_GetRR"));
  mixin(bindCode("delete_HMDProfile", "D_delete_HMDProfile"));
  mixin(bindCode("HMDProfile_Upcast", "D_HMDProfile_Upcast"));
  mixin(bindCode("RiftDK1Profile_Clone", "D_RiftDK1Profile_Clone"));
  mixin(bindCode("RiftDK1Profile_GetEyeCup", "D_RiftDK1Profile_GetEyeCup"));
  mixin(bindCode("RiftDK1Profile_SetEyeCup", "D_RiftDK1Profile_SetEyeCup"));
  mixin(bindCode("delete_RiftDK1Profile", "D_delete_RiftDK1Profile"));
  mixin(bindCode("RiftDK1Profile_Upcast", "D_RiftDK1Profile_Upcast"));
  mixin(bindCode("RiftDKHDProfile_Clone", "D_RiftDKHDProfile_Clone"));
  mixin(bindCode("RiftDKHDProfile_GetEyeCup", "D_RiftDKHDProfile_GetEyeCup"));
  mixin(bindCode("RiftDKHDProfile_SetEyeCup", "D_RiftDKHDProfile_SetEyeCup"));
  mixin(bindCode("delete_RiftDKHDProfile", "D_delete_RiftDKHDProfile"));
  mixin(bindCode("RiftDKHDProfile_Upcast", "D_RiftDKHDProfile_Upcast"));
  mixin(bindCode("GetBaseOVRPath", "D_GetBaseOVRPath"));
  mixin(bindCode("delete_HIDDeviceBase", "D_delete_HIDDeviceBase"));
  mixin(bindCode("HIDDeviceBase_SetFeatureReport", "D_HIDDeviceBase_SetFeatureReport"));
  mixin(bindCode("HIDDeviceBase_GetFeatureReport", "D_HIDDeviceBase_GetFeatureReport"));
  mixin(bindCode("new_MessageHandler", "D_new_MessageHandler"));
  mixin(bindCode("delete_MessageHandler", "D_delete_MessageHandler"));
  mixin(bindCode("MessageHandler_IsHandlerInstalled", "D_MessageHandler_IsHandlerInstalled"));
  mixin(bindCode("MessageHandler_RemoveHandlerFromDevices", "D_MessageHandler_RemoveHandlerFromDevices"));
  mixin(bindCode("MessageHandler_GetHandlerLock", "D_MessageHandler_GetHandlerLock"));
  mixin(bindCode("MessageHandler_OnMessage", "D_MessageHandler_OnMessage"));
  mixin(bindCode("MessageHandler_SupportsMessageType", "D_MessageHandler_SupportsMessageType"));
  mixin(bindCode("delete_DeviceBase", "D_delete_DeviceBase"));
  mixin(bindCode("DeviceBase_AddRef", "D_DeviceBase_AddRef"));
  mixin(bindCode("DeviceBase_Release", "D_DeviceBase_Release"));
  mixin(bindCode("DeviceBase_GetParent", "D_DeviceBase_GetParent"));
  mixin(bindCode("DeviceBase_GetManager", "D_DeviceBase_GetManager"));
  mixin(bindCode("DeviceBase_SetMessageHandler", "D_DeviceBase_SetMessageHandler"));
  mixin(bindCode("DeviceBase_GetMessageHandler", "D_DeviceBase_GetMessageHandler"));
  mixin(bindCode("DeviceBase_GetType", "D_DeviceBase_GetType"));
  mixin(bindCode("DeviceBase_GetDeviceInfo", "D_DeviceBase_GetDeviceInfo"));
  mixin(bindCode("DeviceBase_GetHandlerLock", "D_DeviceBase_GetHandlerLock"));
  mixin(bindCode("DeviceBase_Upcast", "D_DeviceBase_Upcast"));
  mixin(bindCode("new_DeviceInfo", "D_new_DeviceInfo"));
  mixin(bindCode("DeviceInfo_InfoClassType_get", "D_DeviceInfo_InfoClassType_get"));
  mixin(bindCode("DeviceInfo_Type_set", "D_DeviceInfo_Type_set"));
  mixin(bindCode("DeviceInfo_Type_get", "D_DeviceInfo_Type_get"));
  mixin(bindCode("DeviceInfo_ProductName_set", "D_DeviceInfo_ProductName_set"));
  mixin(bindCode("DeviceInfo_ProductName_get", "D_DeviceInfo_ProductName_get"));
  mixin(bindCode("DeviceInfo_Manufacturer_set", "D_DeviceInfo_Manufacturer_set"));
  mixin(bindCode("DeviceInfo_Manufacturer_get", "D_DeviceInfo_Manufacturer_get"));
  mixin(bindCode("DeviceInfo_Version_set", "D_DeviceInfo_Version_set"));
  mixin(bindCode("DeviceInfo_Version_get", "D_DeviceInfo_Version_get"));
  mixin(bindCode("delete_DeviceInfo", "D_delete_DeviceInfo"));
  mixin(bindCode("new_DeviceEnumerationArgs", "D_new_DeviceEnumerationArgs"));
  mixin(bindCode("DeviceEnumerationArgs_MatchRule", "D_DeviceEnumerationArgs_MatchRule"));
  mixin(bindCode("delete_DeviceEnumerationArgs", "D_delete_DeviceEnumerationArgs"));
  mixin(bindCode("DeviceManager_GetType", "D_DeviceManager_GetType"));
  mixin(bindCode("DeviceManager_GetManager", "D_DeviceManager_GetManager"));
  mixin(bindCode("DeviceManager_GetProfileManager", "D_DeviceManager_GetProfileManager"));
  mixin(bindCode("DeviceManager_EnumerateDevicesEx", "D_DeviceManager_EnumerateDevicesEx"));
  mixin(bindCode("DeviceManager_Create", "D_DeviceManager_Create"));
  mixin(bindCode("DeviceManager_AddDevice_NeedsLock", "D_DeviceManager_AddDevice_NeedsLock"));
  mixin(bindCode("delete_DeviceManager", "D_delete_DeviceManager"));
  mixin(bindCode("DeviceManager_Upcast", "D_DeviceManager_Upcast"));
  mixin(bindCode("HMDInfo_HResolution_set", "D_HMDInfo_HResolution_set"));
  mixin(bindCode("HMDInfo_HResolution_get", "D_HMDInfo_HResolution_get"));
  mixin(bindCode("HMDInfo_VResolution_set", "D_HMDInfo_VResolution_set"));
  mixin(bindCode("HMDInfo_VResolution_get", "D_HMDInfo_VResolution_get"));
  mixin(bindCode("HMDInfo_HScreenSize_set", "D_HMDInfo_HScreenSize_set"));
  mixin(bindCode("HMDInfo_HScreenSize_get", "D_HMDInfo_HScreenSize_get"));
  mixin(bindCode("HMDInfo_VScreenSize_set", "D_HMDInfo_VScreenSize_set"));
  mixin(bindCode("HMDInfo_VScreenSize_get", "D_HMDInfo_VScreenSize_get"));
  mixin(bindCode("HMDInfo_VScreenCenter_set", "D_HMDInfo_VScreenCenter_set"));
  mixin(bindCode("HMDInfo_VScreenCenter_get", "D_HMDInfo_VScreenCenter_get"));
  mixin(bindCode("HMDInfo_EyeToScreenDistance_set", "D_HMDInfo_EyeToScreenDistance_set"));
  mixin(bindCode("HMDInfo_EyeToScreenDistance_get", "D_HMDInfo_EyeToScreenDistance_get"));
  mixin(bindCode("HMDInfo_LensSeparationDistance_set", "D_HMDInfo_LensSeparationDistance_set"));
  mixin(bindCode("HMDInfo_LensSeparationDistance_get", "D_HMDInfo_LensSeparationDistance_get"));
  mixin(bindCode("HMDInfo_InterpupillaryDistance_set", "D_HMDInfo_InterpupillaryDistance_set"));
  mixin(bindCode("HMDInfo_InterpupillaryDistance_get", "D_HMDInfo_InterpupillaryDistance_get"));
  mixin(bindCode("HMDInfo_DistortionK_set", "D_HMDInfo_DistortionK_set"));
  mixin(bindCode("HMDInfo_DistortionK_get", "D_HMDInfo_DistortionK_get"));
  mixin(bindCode("HMDInfo_ChromaAbCorrection_set", "D_HMDInfo_ChromaAbCorrection_set"));
  mixin(bindCode("HMDInfo_ChromaAbCorrection_get", "D_HMDInfo_ChromaAbCorrection_get"));
  mixin(bindCode("HMDInfo_DesktopX_set", "D_HMDInfo_DesktopX_set"));
  mixin(bindCode("HMDInfo_DesktopX_get", "D_HMDInfo_DesktopX_get"));
  mixin(bindCode("HMDInfo_DesktopY_set", "D_HMDInfo_DesktopY_set"));
  mixin(bindCode("HMDInfo_DesktopY_get", "D_HMDInfo_DesktopY_get"));
  mixin(bindCode("HMDInfo_DisplayDeviceName_set", "D_HMDInfo_DisplayDeviceName_set"));
  mixin(bindCode("HMDInfo_DisplayDeviceName_get", "D_HMDInfo_DisplayDeviceName_get"));
  mixin(bindCode("HMDInfo_DisplayId_set", "D_HMDInfo_DisplayId_set"));
  mixin(bindCode("HMDInfo_DisplayId_get", "D_HMDInfo_DisplayId_get"));
  mixin(bindCode("new_HMDInfo", "D_new_HMDInfo"));
  mixin(bindCode("HMDInfo_IsSameDisplay", "D_HMDInfo_IsSameDisplay"));
  mixin(bindCode("delete_HMDInfo", "D_delete_HMDInfo"));
  mixin(bindCode("HMDInfo_Upcast", "D_HMDInfo_Upcast"));
  mixin(bindCode("HMDDevice_GetType", "D_HMDDevice_GetType"));
  mixin(bindCode("HMDDevice_GetSensor", "D_HMDDevice_GetSensor"));
  mixin(bindCode("HMDDevice_GetProfile", "D_HMDDevice_GetProfile"));
  mixin(bindCode("HMDDevice_GetProfileName", "D_HMDDevice_GetProfileName"));
  mixin(bindCode("HMDDevice_SetProfileName", "D_HMDDevice_SetProfileName"));
  mixin(bindCode("HMDDevice_Disconnect", "D_HMDDevice_Disconnect"));
  mixin(bindCode("HMDDevice_IsDisconnected", "D_HMDDevice_IsDisconnected"));
  mixin(bindCode("delete_HMDDevice", "D_delete_HMDDevice"));
  mixin(bindCode("HMDDevice_Upcast", "D_HMDDevice_Upcast"));
  mixin(bindCode("new_SensorRange__SWIG_0", "D_new_SensorRange__SWIG_0"));
  mixin(bindCode("new_SensorRange__SWIG_1", "D_new_SensorRange__SWIG_1"));
  mixin(bindCode("new_SensorRange__SWIG_2", "D_new_SensorRange__SWIG_2"));
  mixin(bindCode("new_SensorRange__SWIG_3", "D_new_SensorRange__SWIG_3"));
  mixin(bindCode("SensorRange_MaxAcceleration_set", "D_SensorRange_MaxAcceleration_set"));
  mixin(bindCode("SensorRange_MaxAcceleration_get", "D_SensorRange_MaxAcceleration_get"));
  mixin(bindCode("SensorRange_MaxRotationRate_set", "D_SensorRange_MaxRotationRate_set"));
  mixin(bindCode("SensorRange_MaxRotationRate_get", "D_SensorRange_MaxRotationRate_get"));
  mixin(bindCode("SensorRange_MaxMagneticField_set", "D_SensorRange_MaxMagneticField_set"));
  mixin(bindCode("SensorRange_MaxMagneticField_get", "D_SensorRange_MaxMagneticField_get"));
  mixin(bindCode("delete_SensorRange", "D_delete_SensorRange"));
  mixin(bindCode("new_SensorInfo", "D_new_SensorInfo"));
  mixin(bindCode("SensorInfo_VendorId_set", "D_SensorInfo_VendorId_set"));
  mixin(bindCode("SensorInfo_VendorId_get", "D_SensorInfo_VendorId_get"));
  mixin(bindCode("SensorInfo_ProductId_set", "D_SensorInfo_ProductId_set"));
  mixin(bindCode("SensorInfo_ProductId_get", "D_SensorInfo_ProductId_get"));
  mixin(bindCode("SensorInfo_MaxRanges_set", "D_SensorInfo_MaxRanges_set"));
  mixin(bindCode("SensorInfo_MaxRanges_get", "D_SensorInfo_MaxRanges_get"));
  mixin(bindCode("SensorInfo_SerialNumber_set", "D_SensorInfo_SerialNumber_set"));
  mixin(bindCode("SensorInfo_SerialNumber_get", "D_SensorInfo_SerialNumber_get"));
  mixin(bindCode("delete_SensorInfo", "D_delete_SensorInfo"));
  mixin(bindCode("SensorInfo_Upcast", "D_SensorInfo_Upcast"));
  mixin(bindCode("SensorDevice_GetType", "D_SensorDevice_GetType"));
  mixin(bindCode("SensorDevice_SetCoordinateFrame", "D_SensorDevice_SetCoordinateFrame"));
  mixin(bindCode("SensorDevice_GetCoordinateFrame", "D_SensorDevice_GetCoordinateFrame"));
  mixin(bindCode("SensorDevice_SetReportRate", "D_SensorDevice_SetReportRate"));
  mixin(bindCode("SensorDevice_GetReportRate", "D_SensorDevice_GetReportRate"));
  mixin(bindCode("SensorDevice_SetRange__SWIG_0", "D_SensorDevice_SetRange__SWIG_0"));
  mixin(bindCode("SensorDevice_SetRange__SWIG_1", "D_SensorDevice_SetRange__SWIG_1"));
  mixin(bindCode("SensorDevice_GetRange", "D_SensorDevice_GetRange"));
  mixin(bindCode("delete_SensorDevice", "D_delete_SensorDevice"));
  mixin(bindCode("SensorDevice_Upcast", "D_SensorDevice_Upcast"));
  mixin(bindCode("new_LatencyTestConfiguration__SWIG_0", "D_new_LatencyTestConfiguration__SWIG_0"));
  mixin(bindCode("new_LatencyTestConfiguration__SWIG_1", "D_new_LatencyTestConfiguration__SWIG_1"));
  mixin(bindCode("LatencyTestConfiguration_Threshold_set", "D_LatencyTestConfiguration_Threshold_set"));
  mixin(bindCode("LatencyTestConfiguration_Threshold_get", "D_LatencyTestConfiguration_Threshold_get"));
  mixin(bindCode("LatencyTestConfiguration_SendSamples_set", "D_LatencyTestConfiguration_SendSamples_set"));
  mixin(bindCode("LatencyTestConfiguration_SendSamples_get", "D_LatencyTestConfiguration_SendSamples_get"));
  mixin(bindCode("delete_LatencyTestConfiguration", "D_delete_LatencyTestConfiguration"));
  mixin(bindCode("new_LatencyTestDisplay", "D_new_LatencyTestDisplay"));
  mixin(bindCode("LatencyTestDisplay_Mode_set", "D_LatencyTestDisplay_Mode_set"));
  mixin(bindCode("LatencyTestDisplay_Mode_get", "D_LatencyTestDisplay_Mode_get"));
  mixin(bindCode("LatencyTestDisplay_Value_set", "D_LatencyTestDisplay_Value_set"));
  mixin(bindCode("LatencyTestDisplay_Value_get", "D_LatencyTestDisplay_Value_get"));
  mixin(bindCode("delete_LatencyTestDisplay", "D_delete_LatencyTestDisplay"));
  mixin(bindCode("LatencyTestDevice_GetType", "D_LatencyTestDevice_GetType"));
  mixin(bindCode("LatencyTestDevice_SetConfiguration__SWIG_0", "D_LatencyTestDevice_SetConfiguration__SWIG_0"));
  mixin(bindCode("LatencyTestDevice_SetConfiguration__SWIG_1", "D_LatencyTestDevice_SetConfiguration__SWIG_1"));
  mixin(bindCode("LatencyTestDevice_GetConfiguration", "D_LatencyTestDevice_GetConfiguration"));
  mixin(bindCode("LatencyTestDevice_SetCalibrate__SWIG_0", "D_LatencyTestDevice_SetCalibrate__SWIG_0"));
  mixin(bindCode("LatencyTestDevice_SetCalibrate__SWIG_1", "D_LatencyTestDevice_SetCalibrate__SWIG_1"));
  mixin(bindCode("LatencyTestDevice_SetStartTest__SWIG_0", "D_LatencyTestDevice_SetStartTest__SWIG_0"));
  mixin(bindCode("LatencyTestDevice_SetStartTest__SWIG_1", "D_LatencyTestDevice_SetStartTest__SWIG_1"));
  mixin(bindCode("LatencyTestDevice_SetDisplay__SWIG_0", "D_LatencyTestDevice_SetDisplay__SWIG_0"));
  mixin(bindCode("LatencyTestDevice_SetDisplay__SWIG_1", "D_LatencyTestDevice_SetDisplay__SWIG_1"));
  mixin(bindCode("LatencyTestDevice_GetDevice", "D_LatencyTestDevice_GetDevice"));
  mixin(bindCode("delete_LatencyTestDevice", "D_delete_LatencyTestDevice"));
  mixin(bindCode("LatencyTestDevice_Upcast", "D_LatencyTestDevice_Upcast"));
  mixin(bindCode("new_LatencyTest__SWIG_0", "D_new_LatencyTest__SWIG_0"));
  mixin(bindCode("new_LatencyTest__SWIG_1", "D_new_LatencyTest__SWIG_1"));
  mixin(bindCode("delete_LatencyTest", "D_delete_LatencyTest"));
  mixin(bindCode("LatencyTest_SetDevice", "D_LatencyTest_SetDevice"));
  mixin(bindCode("LatencyTest_HasDevice", "D_LatencyTest_HasDevice"));
  mixin(bindCode("LatencyTest_ProcessInputs", "D_LatencyTest_ProcessInputs"));
  mixin(bindCode("LatencyTest_DisplayScreenColor", "D_LatencyTest_DisplayScreenColor"));
  mixin(bindCode("LatencyTest_GetResultsString", "D_LatencyTest_GetResultsString"));
  mixin(bindCode("LatencyTest_BeginTest", "D_LatencyTest_BeginTest"));
  mixin(bindCode("LatencyTest_Upcast", "D_LatencyTest_Upcast"));
  mixin(bindCode("Viewport_x_set", "D_Viewport_x_set"));
  mixin(bindCode("Viewport_x_get", "D_Viewport_x_get"));
  mixin(bindCode("Viewport_y_set", "D_Viewport_y_set"));
  mixin(bindCode("Viewport_y_get", "D_Viewport_y_get"));
  mixin(bindCode("Viewport_w_set", "D_Viewport_w_set"));
  mixin(bindCode("Viewport_w_get", "D_Viewport_w_get"));
  mixin(bindCode("Viewport_h_set", "D_Viewport_h_set"));
  mixin(bindCode("Viewport_h_get", "D_Viewport_h_get"));
  mixin(bindCode("new_Viewport__SWIG_0", "D_new_Viewport__SWIG_0"));
  mixin(bindCode("new_Viewport__SWIG_1", "D_new_Viewport__SWIG_1"));
  mixin(bindCode("Viewport_swigOpEquals", "D_Viewport_swigOpEquals"));
  mixin(bindCode("delete_Viewport", "D_delete_Viewport"));
  mixin(bindCode("new_DistortionConfig__SWIG_0", "D_new_DistortionConfig__SWIG_0"));
  mixin(bindCode("new_DistortionConfig__SWIG_1", "D_new_DistortionConfig__SWIG_1"));
  mixin(bindCode("new_DistortionConfig__SWIG_2", "D_new_DistortionConfig__SWIG_2"));
  mixin(bindCode("new_DistortionConfig__SWIG_3", "D_new_DistortionConfig__SWIG_3"));
  mixin(bindCode("new_DistortionConfig__SWIG_4", "D_new_DistortionConfig__SWIG_4"));
  mixin(bindCode("DistortionConfig_SetCoefficients__SWIG_0", "D_DistortionConfig_SetCoefficients__SWIG_0"));
  mixin(bindCode("DistortionConfig_SetCoefficients__SWIG_1", "D_DistortionConfig_SetCoefficients__SWIG_1"));
  mixin(bindCode("DistortionConfig_SetCoefficients__SWIG_2", "D_DistortionConfig_SetCoefficients__SWIG_2"));
  mixin(bindCode("DistortionConfig_SetCoefficients__SWIG_3", "D_DistortionConfig_SetCoefficients__SWIG_3"));
  mixin(bindCode("DistortionConfig_SetChromaticAberration__SWIG_0", "D_DistortionConfig_SetChromaticAberration__SWIG_0"));
  mixin(bindCode("DistortionConfig_SetChromaticAberration__SWIG_1", "D_DistortionConfig_SetChromaticAberration__SWIG_1"));
  mixin(bindCode("DistortionConfig_SetChromaticAberration__SWIG_2", "D_DistortionConfig_SetChromaticAberration__SWIG_2"));
  mixin(bindCode("DistortionConfig_SetChromaticAberration__SWIG_3", "D_DistortionConfig_SetChromaticAberration__SWIG_3"));
  mixin(bindCode("DistortionConfig_SetChromaticAberration__SWIG_4", "D_DistortionConfig_SetChromaticAberration__SWIG_4"));
  mixin(bindCode("DistortionConfig_DistortionFn", "D_DistortionConfig_DistortionFn"));
  mixin(bindCode("DistortionConfig_DistortionFnInverse", "D_DistortionConfig_DistortionFnInverse"));
  mixin(bindCode("DistortionConfig_K_set", "D_DistortionConfig_K_set"));
  mixin(bindCode("DistortionConfig_K_get", "D_DistortionConfig_K_get"));
  mixin(bindCode("DistortionConfig_XCenterOffset_set", "D_DistortionConfig_XCenterOffset_set"));
  mixin(bindCode("DistortionConfig_XCenterOffset_get", "D_DistortionConfig_XCenterOffset_get"));
  mixin(bindCode("DistortionConfig_YCenterOffset_set", "D_DistortionConfig_YCenterOffset_set"));
  mixin(bindCode("DistortionConfig_YCenterOffset_get", "D_DistortionConfig_YCenterOffset_get"));
  mixin(bindCode("DistortionConfig_Scale_set", "D_DistortionConfig_Scale_set"));
  mixin(bindCode("DistortionConfig_Scale_get", "D_DistortionConfig_Scale_get"));
  mixin(bindCode("DistortionConfig_ChromaticAberration_set", "D_DistortionConfig_ChromaticAberration_set"));
  mixin(bindCode("DistortionConfig_ChromaticAberration_get", "D_DistortionConfig_ChromaticAberration_get"));
  mixin(bindCode("delete_DistortionConfig", "D_delete_DistortionConfig"));
  mixin(bindCode("StereoEyeParams_Eye_set", "D_StereoEyeParams_Eye_set"));
  mixin(bindCode("StereoEyeParams_Eye_get", "D_StereoEyeParams_Eye_get"));
  mixin(bindCode("StereoEyeParams_VP_set", "D_StereoEyeParams_VP_set"));
  mixin(bindCode("StereoEyeParams_VP_get", "D_StereoEyeParams_VP_get"));
  mixin(bindCode("StereoEyeParams_pDistortion_set", "D_StereoEyeParams_pDistortion_set"));
  mixin(bindCode("StereoEyeParams_pDistortion_get", "D_StereoEyeParams_pDistortion_get"));
  mixin(bindCode("StereoEyeParams_ViewAdjust_set", "D_StereoEyeParams_ViewAdjust_set"));
  mixin(bindCode("StereoEyeParams_ViewAdjust_get", "D_StereoEyeParams_ViewAdjust_get"));
  mixin(bindCode("StereoEyeParams_Projection_set", "D_StereoEyeParams_Projection_set"));
  mixin(bindCode("StereoEyeParams_Projection_get", "D_StereoEyeParams_Projection_get"));
  mixin(bindCode("StereoEyeParams_OrthoProjection_set", "D_StereoEyeParams_OrthoProjection_set"));
  mixin(bindCode("StereoEyeParams_OrthoProjection_get", "D_StereoEyeParams_OrthoProjection_get"));
  mixin(bindCode("StereoEyeParams_Init__SWIG_0", "D_StereoEyeParams_Init__SWIG_0"));
  mixin(bindCode("StereoEyeParams_Init__SWIG_1", "D_StereoEyeParams_Init__SWIG_1"));
  mixin(bindCode("new_StereoEyeParams", "D_new_StereoEyeParams"));
  mixin(bindCode("delete_StereoEyeParams", "D_delete_StereoEyeParams"));
  mixin(bindCode("new_StereoConfig__SWIG_0", "D_new_StereoConfig__SWIG_0"));
  mixin(bindCode("new_StereoConfig__SWIG_1", "D_new_StereoConfig__SWIG_1"));
  mixin(bindCode("new_StereoConfig__SWIG_2", "D_new_StereoConfig__SWIG_2"));
  mixin(bindCode("StereoConfig_SetStereoMode", "D_StereoConfig_SetStereoMode"));
  mixin(bindCode("StereoConfig_GetStereoMode", "D_StereoConfig_GetStereoMode"));
  mixin(bindCode("StereoConfig_SetHMDInfo", "D_StereoConfig_SetHMDInfo"));
  mixin(bindCode("StereoConfig_GetHMDInfo", "D_StereoConfig_GetHMDInfo"));
  mixin(bindCode("StereoConfig_GetEyeToScreenDistance", "D_StereoConfig_GetEyeToScreenDistance"));
  mixin(bindCode("StereoConfig_SetEyeToScreenDistance", "D_StereoConfig_SetEyeToScreenDistance"));
  mixin(bindCode("StereoConfig_SetIPD", "D_StereoConfig_SetIPD"));
  mixin(bindCode("StereoConfig_GetIPD", "D_StereoConfig_GetIPD"));
  mixin(bindCode("StereoConfig_SetFullViewport", "D_StereoConfig_SetFullViewport"));
  mixin(bindCode("StereoConfig_GetFullViewport", "D_StereoConfig_GetFullViewport"));
  mixin(bindCode("StereoConfig_SetAspectMultiplier", "D_StereoConfig_SetAspectMultiplier"));
  mixin(bindCode("StereoConfig_GetAspectMultiplier", "D_StereoConfig_GetAspectMultiplier"));
  mixin(bindCode("StereoConfig_SetDistortionFitPointVP", "D_StereoConfig_SetDistortionFitPointVP"));
  mixin(bindCode("StereoConfig_SetDistortionFitPointPixels", "D_StereoConfig_SetDistortionFitPointPixels"));
  mixin(bindCode("StereoConfig_SetDistortionConfig", "D_StereoConfig_SetDistortionConfig"));
  mixin(bindCode("StereoConfig_SetDistortionK", "D_StereoConfig_SetDistortionK"));
  mixin(bindCode("StereoConfig_GetDistortionK", "D_StereoConfig_GetDistortionK"));
  mixin(bindCode("StereoConfig_Set2DAreaFov", "D_StereoConfig_Set2DAreaFov"));
  mixin(bindCode("StereoConfig_GetAspect", "D_StereoConfig_GetAspect"));
  mixin(bindCode("StereoConfig_GetYFOVRadians", "D_StereoConfig_GetYFOVRadians"));
  mixin(bindCode("StereoConfig_GetYFOVDegrees", "D_StereoConfig_GetYFOVDegrees"));
  mixin(bindCode("StereoConfig_GetProjectionCenterOffset", "D_StereoConfig_GetProjectionCenterOffset"));
  mixin(bindCode("StereoConfig_GetDistortionConfig", "D_StereoConfig_GetDistortionConfig"));
  mixin(bindCode("StereoConfig_GetDistortionScale", "D_StereoConfig_GetDistortionScale"));
  mixin(bindCode("StereoConfig_Get2DUnitPixel", "D_StereoConfig_Get2DUnitPixel"));
  mixin(bindCode("StereoConfig_GetEyeRenderParams", "D_StereoConfig_GetEyeRenderParams"));
  mixin(bindCode("delete_StereoConfig", "D_delete_StereoConfig"));
  mixin(bindCode("JSON_Type_set", "D_JSON_Type_set"));
  mixin(bindCode("JSON_Type_get", "D_JSON_Type_get"));
  mixin(bindCode("JSON_Name_set", "D_JSON_Name_set"));
  mixin(bindCode("JSON_Name_get", "D_JSON_Name_get"));
  mixin(bindCode("JSON_Value_set", "D_JSON_Value_set"));
  mixin(bindCode("JSON_Value_get", "D_JSON_Value_get"));
  mixin(bindCode("JSON_dValue_set", "D_JSON_dValue_set"));
  mixin(bindCode("JSON_dValue_get", "D_JSON_dValue_get"));
  mixin(bindCode("delete_JSON", "D_delete_JSON"));
  mixin(bindCode("JSON_CreateObject", "D_JSON_CreateObject"));
  mixin(bindCode("JSON_CreateNull", "D_JSON_CreateNull"));
  mixin(bindCode("JSON_CreateArray", "D_JSON_CreateArray"));
  mixin(bindCode("JSON_CreateBool", "D_JSON_CreateBool"));
  mixin(bindCode("JSON_CreateNumber", "D_JSON_CreateNumber"));
  mixin(bindCode("JSON_CreateString", "D_JSON_CreateString"));
  mixin(bindCode("JSON_Parse__SWIG_0", "D_JSON_Parse__SWIG_0"));
  mixin(bindCode("JSON_Parse__SWIG_1", "D_JSON_Parse__SWIG_1"));
  mixin(bindCode("JSON_Load__SWIG_0", "D_JSON_Load__SWIG_0"));
  mixin(bindCode("JSON_Load__SWIG_1", "D_JSON_Load__SWIG_1"));
  mixin(bindCode("JSON_Save", "D_JSON_Save"));
  mixin(bindCode("JSON_HasItems", "D_JSON_HasItems"));
  mixin(bindCode("JSON_GetFirstItem", "D_JSON_GetFirstItem"));
  mixin(bindCode("JSON_GetLastItem", "D_JSON_GetLastItem"));
  mixin(bindCode("JSON_GetItemCount", "D_JSON_GetItemCount"));
  mixin(bindCode("JSON_GetItemByIndex", "D_JSON_GetItemByIndex"));
  mixin(bindCode("JSON_GetItemByName", "D_JSON_GetItemByName"));
  mixin(bindCode("JSON_GetNextItem", "D_JSON_GetNextItem"));
  mixin(bindCode("JSON_GetPrevItem", "D_JSON_GetPrevItem"));
  mixin(bindCode("JSON_AddItem", "D_JSON_AddItem"));
  mixin(bindCode("JSON_AddNullItem", "D_JSON_AddNullItem"));
  mixin(bindCode("JSON_AddBoolItem", "D_JSON_AddBoolItem"));
  mixin(bindCode("JSON_AddNumberItem", "D_JSON_AddNumberItem"));
  mixin(bindCode("JSON_AddStringItem", "D_JSON_AddStringItem"));
  mixin(bindCode("JSON_AddArrayElement", "D_JSON_AddArrayElement"));
  mixin(bindCode("JSON_AddArrayNumber", "D_JSON_AddArrayNumber"));
  mixin(bindCode("JSON_AddArrayString", "D_JSON_AddArrayString"));
  mixin(bindCode("JSON_GetArraySize", "D_JSON_GetArraySize"));
  mixin(bindCode("JSON_GetArrayNumber", "D_JSON_GetArrayNumber"));
  mixin(bindCode("JSON_GetArrayString", "D_JSON_GetArrayString"));
}

//#if !defined(SWIG_D_NO_EXCEPTION_HELPER)
extern(C) void function(
  SwigExceptionCallback exceptionCallback,
  SwigExceptionCallback illegalArgumentCallback,
  SwigExceptionCallback illegalElementCallback,
  SwigExceptionCallback ioCallback,
  SwigExceptionCallback noSuchElementCallback) swigRegisterExceptionCallbacksovr;
//#endif // SWIG_D_NO_EXCEPTION_HELPER

//#if !defined(SWIG_D_NO_STRING_HELPER)
extern(C) void function(SwigStringCallback callback) swigRegisterStringCallbackovr;
//#endif // SWIG_D_NO_STRING_HELPER


mixin template SwigOperatorDefinitions() {
  public override bool opEquals(Object o) {
    if (auto rhs = cast(typeof(this))o) {
      if (swigCPtr == rhs.swigCPtr) return true;
      static if (is(typeof(swigOpEquals(rhs)))) {
        return swigOpEquals(rhs);
      } else {
        return false; 
      }
    }
    return super.opEquals(o);
  }

  
  public override int opCmp(Object o) {
    static if (__traits(compiles, swigOpLt(typeof(this).init) &&
        swigOpEquals(typeof(this).init))) {
      if (auto rhs = cast(typeof(this))o) {
        if (swigOpLt(rhs)) {
          return -1;
        } else if (swigOpEquals(rhs)) {
          return 0;
        } else {
          return 1;
        }
      }
    }
    return super.opCmp(o);
  }

  private template swigOpBinary(string operator, string name) {
    enum swigOpBinary = `public void opOpAssign(string op, T)(T rhs) if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `Assign(rhs))) { swigOp` ~ name ~ `Assign(rhs);}` ~
      `public auto opBinary(string op, T)(T rhs) if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `(rhs))) { return swigOp` ~ name ~ `(rhs);}`;
  }
  mixin(swigOpBinary!("+", "Add"));
  mixin(swigOpBinary!("-", "Sub"));
  mixin(swigOpBinary!("*", "Mul"));
  mixin(swigOpBinary!("/", "Div"));
  mixin(swigOpBinary!("%", "Mod"));
  mixin(swigOpBinary!("&", "And"));
  mixin(swigOpBinary!("|", "Or"));
  mixin(swigOpBinary!("^", "Xor"));
  mixin(swigOpBinary!("<<", "Shl"));
  mixin(swigOpBinary!(">>", "Shr"));
  
  private template swigOpUnary(string operator, string name) {
    enum swigOpUnary = `public auto opUnary(string op)() if (op == "` ~ operator ~
      `" && __traits(compiles, swigOp` ~ name ~ `())) { return swigOp` ~ name ~ `();}`;   
  }
  mixin(swigOpUnary!("+", "Pos"));
  mixin(swigOpUnary!("-", "Neg"));
  mixin(swigOpUnary!("~", "Com"));
  mixin(swigOpUnary!("++", "Inc"));
  mixin(swigOpUnary!("--", "Dec"));


}


private class SwigExceptionHelper {
  static this() {
	// The D1/Tango version maps C++ exceptions to multiple exception types.
    swigRegisterExceptionCallbacksovr(
      &setException,
      &setException,
      &setException,
      &setException,
      &setException
    );
  }

  static void setException(const char* message) {
    auto exception = new object.Exception(std.conv.to!string(message).idup);
    exception.next = SwigPendingException.retrieve();
    SwigPendingException.set(exception);
  }
}

package struct SwigPendingException {
public:
  static this() {
    m_sPendingCount = 0;
    m_sPendingException = null;
  }

  static bool isPending() {
    bool pending = false;
    if (m_sPendingCount > 0) {
      if (m_sPendingException !is null) {
        pending = true;
      }
    }
    return pending;
  }

  static void set(object.Exception e) {
    if (m_sPendingException !is null) {
      throw new object.Exception("FATAL: An earlier pending exception from C/C++ code " ~
        "was missed and thus not thrown (" ~ m_sPendingException.classinfo.name ~
        ": " ~ m_sPendingException.msg ~ ")!", e);
    }

    m_sPendingException = e;
    synchronized {
      ++m_sPendingCount;
    }
  }

  static object.Exception retrieve() {
    object.Exception e = null;
    if (m_sPendingCount > 0) {
      if (m_sPendingException !is null) {
        e = m_sPendingException;
        m_sPendingException = null;
        synchronized {
          --m_sPendingCount;
        }
      }
    }
    return e;
  }

private:
  // The pending exception counter is stored thread-global.
  static shared int m_sPendingCount;

  // The reference to the pending exception (if any) is stored thread-local.
  static object.Exception m_sPendingException;
}
alias void function(const char* message) SwigExceptionCallback;


private class SwigStringHelper {
  static this() {
    swigRegisterStringCallbackovr(&createString);
  }

  static const(char)* createString(const(char*) cString) {
    // We are effectively dup'ing the string here.
    // TODO: Is this also correct for D2/Phobos?
    return std.string.toStringz(std.conv.to!string(cString));
  }
}
alias const(char)* function(const(char*) cString) SwigStringCallback;


template SwigExternC(T) if (is(typeof(*(T.init)) P == function)) {
  static if (is(typeof(*(T.init)) R == return)) {
    static if (is(typeof(*(T.init)) P == function)) {
      alias extern(C) R function(P) SwigExternC;
    }
  }
}

extern(C) int function() OVR_LITTLE_ENDIAN_get;
extern(C) int function() OVR_BIG_ENDIAN_get;
extern(C) int function() OVR_BYTE_ORDER_get;
extern(C) const(char)* function() OVR_BUILD_STRING_get;
extern(C) void* function() UpperBitTable_get;
extern(C) void* function() LowerBitTable_get;
extern(C) ubyte function(size_t jarg1) UpperBit;
extern(C) ubyte function(size_t jarg1) LowerBit;
extern(C) int function(void* jarg1, void* jarg2, size_t jarg3) MemUtil_Cmp;
extern(C) int function(void* jarg1, void* jarg2, size_t jarg3) MemUtil_Cmp16;
extern(C) int function(void* jarg1, void* jarg2, size_t jarg3) MemUtil_Cmp32;
extern(C) int function(void* jarg1, void* jarg2, size_t jarg3) MemUtil_Cmp64;
extern(C) void* function() new_MemUtil;
extern(C) void function(void* jarg1) delete_MemUtil;
extern(C) void function(void* jarg1, int jarg2) SwapOrder__SWIG_0;
extern(C) ubyte function(ubyte jarg1) SwapOrder__SWIG_1;
extern(C) char function(char jarg1) SwapOrder__SWIG_2;
extern(C) ushort function(ushort jarg1) SwapOrder__SWIG_3;
extern(C) short function(short jarg1) SwapOrder__SWIG_4;
extern(C) core.stdc.config.c_ulong function(core.stdc.config.c_ulong jarg1) SwapOrder__SWIG_5;
extern(C) core.stdc.config.c_long function(core.stdc.config.c_long jarg1) SwapOrder__SWIG_6;
extern(C) void* function(void* jarg1) SwapOrder__SWIG_7;
extern(C) void* function(void* jarg1) SwapOrder__SWIG_8;
extern(C) float function(float jarg1) SwapOrder__SWIG_9;
extern(C) double function(double jarg1) SwapOrder__SWIG_10;
extern(C) ubyte function(ubyte jarg1) LEToSystem__SWIG_0;
extern(C) char function(char jarg1) LEToSystem__SWIG_1;
extern(C) ushort function(ushort jarg1) LEToSystem__SWIG_2;
extern(C) short function(short jarg1) LEToSystem__SWIG_3;
extern(C) core.stdc.config.c_ulong function(core.stdc.config.c_ulong jarg1) LEToSystem__SWIG_4;
extern(C) core.stdc.config.c_long function(core.stdc.config.c_long jarg1) LEToSystem__SWIG_5;
extern(C) void* function(void* jarg1) LEToSystem__SWIG_6;
extern(C) void* function(void* jarg1) LEToSystem__SWIG_7;
extern(C) float function(float jarg1) LEToSystem__SWIG_8;
extern(C) double function(double jarg1) LEToSystem__SWIG_9;
extern(C) ubyte function(ubyte jarg1) BEToSystem__SWIG_0;
extern(C) char function(char jarg1) BEToSystem__SWIG_1;
extern(C) ushort function(ushort jarg1) BEToSystem__SWIG_2;
extern(C) short function(short jarg1) BEToSystem__SWIG_3;
extern(C) core.stdc.config.c_ulong function(core.stdc.config.c_ulong jarg1) BEToSystem__SWIG_4;
extern(C) core.stdc.config.c_long function(core.stdc.config.c_long jarg1) BEToSystem__SWIG_5;
extern(C) void* function(void* jarg1) BEToSystem__SWIG_6;
extern(C) void* function(void* jarg1) BEToSystem__SWIG_7;
extern(C) float function(float jarg1) BEToSystem__SWIG_8;
extern(C) double function(double jarg1) BEToSystem__SWIG_9;
extern(C) ubyte function(ubyte jarg1) SystemToLE__SWIG_0;
extern(C) char function(char jarg1) SystemToLE__SWIG_1;
extern(C) ushort function(ushort jarg1) SystemToLE__SWIG_2;
extern(C) short function(short jarg1) SystemToLE__SWIG_3;
extern(C) core.stdc.config.c_ulong function(core.stdc.config.c_ulong jarg1) SystemToLE__SWIG_4;
extern(C) core.stdc.config.c_long function(core.stdc.config.c_long jarg1) SystemToLE__SWIG_5;
extern(C) void* function(void* jarg1) SystemToLE__SWIG_6;
extern(C) void* function(void* jarg1) SystemToLE__SWIG_7;
extern(C) float function(float jarg1) SystemToLE__SWIG_8;
extern(C) double function(double jarg1) SystemToLE__SWIG_9;
extern(C) ubyte function(ubyte jarg1) SystemToBE__SWIG_0;
extern(C) char function(char jarg1) SystemToBE__SWIG_1;
extern(C) ushort function(ushort jarg1) SystemToBE__SWIG_2;
extern(C) short function(short jarg1) SystemToBE__SWIG_3;
extern(C) core.stdc.config.c_ulong function(core.stdc.config.c_ulong jarg1) SystemToBE__SWIG_4;
extern(C) core.stdc.config.c_long function(core.stdc.config.c_long jarg1) SystemToBE__SWIG_5;
extern(C) void* function(void* jarg1) SystemToBE__SWIG_6;
extern(C) void* function(void* jarg1) SystemToBE__SWIG_7;
extern(C) float function(float jarg1) SystemToBE__SWIG_8;
extern(C) double function(double jarg1) SystemToBE__SWIG_9;
extern(C) void* function(const(char)* jarg1, void* jarg2) GetLength__SWIG_0;
extern(C) void* function(const(char)* jarg1) GetLength__SWIG_1;
extern(C) core.stdc.config.c_ulong function(void* jarg1, const(char)* jarg2, void* jarg3) GetCharAt__SWIG_0;
extern(C) core.stdc.config.c_ulong function(void* jarg1, const(char)* jarg2) GetCharAt__SWIG_1;
extern(C) void* function(void* jarg1, const(char)* jarg2, void* jarg3) GetByteIndex__SWIG_0;
extern(C) void* function(void* jarg1, const(char)* jarg2) GetByteIndex__SWIG_1;
extern(C) void* function(void* jarg1, void* jarg2) GetEncodeStringSize__SWIG_0;
extern(C) void* function(void* jarg1) GetEncodeStringSize__SWIG_1;
extern(C) void function(const(char)* jarg1, void* jarg2, void* jarg3) EncodeString__SWIG_0;
extern(C) void function(const(char)* jarg1, void* jarg2) EncodeString__SWIG_1;
extern(C) size_t function(void* jarg1, const(char)* jarg2, void* jarg3) DecodeString__SWIG_0;
extern(C) size_t function(void* jarg1, const(char)* jarg2) DecodeString__SWIG_1;
extern(C) int function(core.stdc.config.c_ulong jarg1) GetEncodeCharSize;
extern(C) void function(const(char)* jarg1, void* jarg2, core.stdc.config.c_ulong jarg3) EncodeChar;
extern(C) core.stdc.config.c_ulong function(void* jarg1) DecodeNextChar_Advance0;
extern(C) core.stdc.config.c_ulong function(void* jarg1) DecodeNextChar;
extern(C) void* function(uint jarg1) new_Log__SWIG_0;
extern(C) void* function() new_Log__SWIG_1;
extern(C) void function(void* jarg1) delete_Log;
extern(C) uint function(void* jarg1) Log_GetLoggingMask;
extern(C) void function(void* jarg1, uint jarg2) Log_SetLoggingMask;
extern(C) void function(void* jarg1, int jarg2, const(char)* jarg3, void* jarg4) Log_LogMessageVarg;
extern(C) void function(void* jarg1, int jarg2, const(char)* jarg3) Log_LogMessage;
extern(C) void function(const(char)* jarg1, uint jarg2, int jarg3, const(char)* jarg4, void* jarg5) Log_FormatLog;
extern(C) void function(const(char)* jarg1, uint jarg2) Log_DefaultLogOutput;
extern(C) uint function(int jarg1) Log_IsDebugMessage;
extern(C) void function(void* jarg1) Log_SetGlobalLog;
extern(C) void* function() Log_GetGlobalLog;
extern(C) void* function() Log_GetDefaultLog;
extern(C) void* function(uint jarg1) Log_ConfigureDefaultLog__SWIG_0;
extern(C) void* function() Log_ConfigureDefaultLog__SWIG_1;
extern(C) void function(const(char)* jarg1) LogText;
extern(C) void function(const(char)* jarg1) LogError;
extern(C) void* function(void* jarg1, size_t jarg2) Allocator_Alloc;
extern(C) void* function(void* jarg1, size_t jarg2, const(char)* jarg3, uint jarg4) Allocator_AllocDebug;
extern(C) void* function(void* jarg1, void* jarg2, size_t jarg3) Allocator_Realloc;
extern(C) void function(void* jarg1, void* jarg2) Allocator_Free;
extern(C) void* function(void* jarg1, size_t jarg2, size_t jarg3) Allocator_AllocAligned;
extern(C) void function(void* jarg1, void* jarg2) Allocator_FreeAligned;
extern(C) void* function() Allocator_GetInstance;
extern(C) void function(void* jarg1) Allocator_setInstance;
extern(C) void function(void* jarg1) delete_Allocator;
extern(C) void* function(void* jarg1, size_t jarg2) DefaultAllocator_Alloc;
extern(C) void* function(void* jarg1, size_t jarg2, const(char)* jarg3, uint jarg4) DefaultAllocator_AllocDebug;
extern(C) void* function(void* jarg1, void* jarg2, size_t jarg3) DefaultAllocator_Realloc;
extern(C) void function(void* jarg1, void* jarg2) DefaultAllocator_Free;
extern(C) void* function() new_DefaultAllocator;
extern(C) void function(void* jarg1) delete_DefaultAllocator;
extern(C) void* function() new_NewOverrideBase;
extern(C) void function(void* jarg1) delete_NewOverrideBase;
extern(C) void* function(void* jarg1, void* jarg2) new_System__SWIG_0;
extern(C) void* function(void* jarg1) new_System__SWIG_1;
extern(C) void* function() new_System__SWIG_2;
extern(C) void function(void* jarg1) delete_System;
extern(C) uint function() System_IsInitialized;
extern(C) void function(void* jarg1, void* jarg2) System_Init__SWIG_0;
extern(C) void function(void* jarg1) System_Init__SWIG_1;
extern(C) void function() System_Init__SWIG_2;
extern(C) void function() System_Destroy;
extern(C) void* function() new_RefCountImplCore;
extern(C) void function(void* jarg1) delete_RefCountImplCore;
extern(C) int function(void* jarg1) RefCountImplCore_GetRefCount;
extern(C) void function(void* jarg1) RefCountImplCore_checkInvalidDelete;
extern(C) void* function() new_RefCountNTSImplCore;
extern(C) void function(void* jarg1) delete_RefCountNTSImplCore;
extern(C) int function(void* jarg1) RefCountNTSImplCore_GetRefCount;
extern(C) void function(void* jarg1) RefCountNTSImplCore_checkInvalidDelete;
extern(C) void function(void* jarg1) RefCountImpl_AddRef;
extern(C) void function(void* jarg1) RefCountImpl_Release;
extern(C) void* function() new_RefCountImpl;
extern(C) void function(void* jarg1) delete_RefCountImpl;
extern(C) void* function(void* objectRef) RefCountImpl_Upcast;
extern(C) void function(void* jarg1) RefCountVImpl_AddRef;
extern(C) void function(void* jarg1) RefCountVImpl_Release;
extern(C) void* function() new_RefCountVImpl;
extern(C) void function(void* jarg1) delete_RefCountVImpl;
extern(C) void* function(void* objectRef) RefCountVImpl_Upcast;
extern(C) void function(void* jarg1) RefCountNTSImpl_AddRef;
extern(C) void function(void* jarg1) RefCountNTSImpl_Release;
extern(C) void* function() new_RefCountNTSImpl;
extern(C) void function(void* jarg1) delete_RefCountNTSImpl;
extern(C) void* function(void* objectRef) RefCountNTSImpl_Upcast;
extern(C) void* function(void* jarg1) ReturnArg0;
extern(C) const(char)* function(int jarg1, const(char)* jarg2, size_t jarg3, int jarg4) OVR_itoa;
extern(C) size_t function(const(char)* jarg1) OVR_strlen;
extern(C) const(char)* function(const(char)* jarg1, size_t jarg2, const(char)* jarg3) OVR_strcpy;
extern(C) const(char)* function(const(char)* jarg1, size_t jarg2, const(char)* jarg3, size_t jarg4) OVR_strncpy;
extern(C) const(char)* function(const(char)* jarg1, size_t jarg2, const(char)* jarg3) OVR_strcat;
extern(C) int function(const(char)* jarg1, const(char)* jarg2) OVR_strcmp;
extern(C) const(char)* function(const(char)* jarg1, char jarg2) OVR_strchr__SWIG_0;
extern(C) const(char)* function(const(char)* jarg1, char jarg2) OVR_strrchr__SWIG_0;
extern(C) void* function(void* jarg1, size_t jarg2, ubyte jarg3) OVR_memrchr;
extern(C) double function(const(char)* jarg1, void* jarg2) OVR_strtod;
extern(C) core.stdc.config.c_long function(const(char)* jarg1, void* jarg2, int jarg3) OVR_strtol;
extern(C) core.stdc.config.c_ulong function(const(char)* jarg1, void* jarg2, int jarg3) OVR_strtoul;
extern(C) int function(const(char)* jarg1, const(char)* jarg2, size_t jarg3) OVR_strncmp;
extern(C) void* function(const(char)* jarg1, void* jarg2, int jarg3) OVR_strtouq;
extern(C) void* function(const(char)* jarg1, void* jarg2, int jarg3) OVR_strtoq;
extern(C) void* function(const(char)* jarg1) OVR_atoq;
extern(C) void* function(const(char)* jarg1) OVR_atouq;
extern(C) int function(const(char)* jarg1, const(char)* jarg2) OVR_stricmp;
extern(C) int function(const(char)* jarg1, const(char)* jarg2, size_t jarg3) OVR_strnicmp;
extern(C) size_t function(const(char)* jarg1, size_t jarg2, const(char)* jarg3) OVR_sprintf;
extern(C) size_t function(const(char)* jarg1, size_t jarg2, const(char)* jarg3, void* jarg4) OVR_vsprintf;
extern(C) size_t function(const(char)* jarg1, void* jarg2) OVR_vscprintf;
extern(C) void* function(void* jarg1, size_t jarg2, void* jarg3) OVR_wcscpy;
extern(C) void* function(void* jarg1, size_t jarg2, void* jarg3, size_t jarg4) OVR_wcsncpy;
extern(C) void* function(void* jarg1, size_t jarg2, void* jarg3) OVR_wcscat;
extern(C) size_t function(void* jarg1) OVR_wcslen;
extern(C) int function(void* jarg1, void* jarg2) OVR_wcscmp;
extern(C) int function(void* jarg1, void* jarg2) OVR_wcsicmp;
extern(C) int function(void* jarg1, void* jarg2) OVR_wcsicoll;
extern(C) int function(void* jarg1, void* jarg2) OVR_wcscoll;
extern(C) int function(void* jarg1, void* jarg2) UnicodeCharIs;
extern(C) void* function() UnicodeAlnumBits_get;
extern(C) void* function() UnicodeAlphaBits_get;
extern(C) void* function() UnicodeDigitBits_get;
extern(C) void* function() UnicodeSpaceBits_get;
extern(C) void* function() UnicodeXDigitBits_get;
extern(C) int function(void* jarg1) OVR_iswalnum;
extern(C) int function(void* jarg1) OVR_iswalpha;
extern(C) int function(void* jarg1) OVR_iswdigit;
extern(C) int function(void* jarg1) OVR_iswspace;
extern(C) int function(void* jarg1) OVR_iswxdigit;
extern(C) int function(void* jarg1) OVR_towupper;
extern(C) int function(void* jarg1) OVR_towlower;
extern(C) int function(int jarg1) OVR_tolower;
extern(C) int function(int jarg1) OVR_toupper;
extern(C) double function(void* jarg1, void* jarg2) OVR_wcstod;
extern(C) core.stdc.config.c_long function(void* jarg1, void* jarg2, int jarg3) OVR_wcstol;
extern(C) void function(void* jarg1, int jarg2) WorldAxes_XAxis_set;
extern(C) int function(void* jarg1) WorldAxes_XAxis_get;
extern(C) void function(void* jarg1, int jarg2) WorldAxes_YAxis_set;
extern(C) int function(void* jarg1) WorldAxes_YAxis_get;
extern(C) void function(void* jarg1, int jarg2) WorldAxes_ZAxis_set;
extern(C) int function(void* jarg1) WorldAxes_ZAxis_get;
extern(C) void* function(int jarg1, int jarg2, int jarg3) new_WorldAxes;
extern(C) void function(void* jarg1) delete_WorldAxes;
extern(C) void function(void* jarg1, void* jarg2) Matrix4f_M_set;
extern(C) void* function(void* jarg1) Matrix4f_M_get;
extern(C) void* function(int jarg1) new_Matrix4f__SWIG_0;
extern(C) void* function() new_Matrix4f__SWIG_1;
extern(C) void* function(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9, float jarg10, float jarg11, float jarg12, float jarg13, float jarg14, float jarg15, float jarg16) new_Matrix4f__SWIG_2;
extern(C) void* function(float jarg1, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6, float jarg7, float jarg8, float jarg9) new_Matrix4f__SWIG_3;
extern(C) void function(void* jarg1, const(char)* jarg2, size_t jarg3) Matrix4f_ToString;
extern(C) void* function(const(char)* jarg1) Matrix4f_FromString;
extern(C) void* function() Matrix4f_Identity;
extern(C) void function(void* jarg1) Matrix4f_SetIdentity;
extern(C) void* function(void* jarg1, void* jarg2) Matrix4f_swigOpAdd;
extern(C) void* function(void* jarg1, void* jarg2) Matrix4f_swigOpAddAssign;
extern(C) void* function(void* jarg1, void* jarg2) Matrix4f_swigOpSub;
extern(C) void* function(void* jarg1, void* jarg2) Matrix4f_swigOpSubAssign;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3) Matrix4f_Multiply;
extern(C) void* function(void* jarg1, void* jarg2) Matrix4f_swigOpMul__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) Matrix4f_swigOpMulAssign__SWIG_0;
extern(C) void* function(void* jarg1, float jarg2) Matrix4f_swigOpMul__SWIG_1;
extern(C) void* function(void* jarg1, float jarg2) Matrix4f_swigOpMulAssign__SWIG_1;
extern(C) void* function(void* jarg1, float jarg2) Matrix4f_swigOpDiv;
extern(C) void* function(void* jarg1, float jarg2) Matrix4f_swigOpDivAssign;
extern(C) void* function(void* jarg1, void* jarg2) Matrix4f_Transform;
extern(C) void* function(void* jarg1) Matrix4f_Transposed;
extern(C) void function(void* jarg1) Matrix4f_Transpose;
extern(C) float function(void* jarg1, void* jarg2, void* jarg3) Matrix4f_SubDet;
extern(C) float function(void* jarg1, size_t jarg2, size_t jarg3) Matrix4f_Cofactor;
extern(C) float function(void* jarg1) Matrix4f_Determinant;
extern(C) void* function(void* jarg1) Matrix4f_Adjugated;
extern(C) void* function(void* jarg1) Matrix4f_Inverted;
extern(C) void function(void* jarg1) Matrix4f_Invert;
extern(C) void* function(void* jarg1) Matrix4f_InvertedHomogeneousTransform;
extern(C) void function(void* jarg1) Matrix4f_InvertHomogeneousTransform;
extern(C) void* function(void* jarg1, void* jarg2) Matrix4f_AxisConversion;
extern(C) void* function(void* jarg1) Matrix4f_Translation__SWIG_0;
extern(C) void* function(float jarg1, float jarg2, float jarg3) Matrix4f_Translation__SWIG_1;
extern(C) void* function(float jarg1, float jarg2) Matrix4f_Translation__SWIG_2;
extern(C) void* function(void* jarg1) Matrix4f_Scaling__SWIG_0;
extern(C) void* function(float jarg1, float jarg2, float jarg3) Matrix4f_Scaling__SWIG_1;
extern(C) void* function(float jarg1) Matrix4f_Scaling__SWIG_2;
extern(C) void* function(int jarg1, float jarg2, int jarg3, int jarg4) Matrix4f_RotationAxis;
extern(C) void* function(float jarg1) Matrix4f_RotationX;
extern(C) void* function(float jarg1) Matrix4f_RotationY;
extern(C) void* function(float jarg1) Matrix4f_RotationZ;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3) Matrix4f_LookAtRH;
extern(C) void* function(void* jarg1, void* jarg2, void* jarg3) Matrix4f_LookAtLH;
extern(C) void* function(float jarg1, float jarg2, float jarg3, float jarg4) Matrix4f_PerspectiveRH;
extern(C) void* function(float jarg1, float jarg2, float jarg3, float jarg4) Matrix4f_PerspectiveLH;
extern(C) void* function(float jarg1, float jarg2) Matrix4f_Ortho2D;
extern(C) void function(void* jarg1) delete_Matrix4f;
extern(C) void* function() new_AtomicOpsRawBase;
extern(C) void function(void* jarg1) delete_AtomicOpsRawBase;
extern(C) void* function(void* jarg1, void* jarg2) AtomicOpsRaw_4ByteImpl_Exchange_NoSync;
extern(C) void* function(void* jarg1, void* jarg2) AtomicOpsRaw_4ByteImpl_ExchangeAdd_NoSync;
extern(C) uint function(void* jarg1, void* jarg2, void* jarg3) AtomicOpsRaw_4ByteImpl_CompareAndSet_NoSync;
extern(C) void* function() new_AtomicOpsRaw_4ByteImpl;
extern(C) void function(void* jarg1) delete_AtomicOpsRaw_4ByteImpl;
extern(C) void* function(void* objectRef) AtomicOpsRaw_4ByteImpl_Upcast;
extern(C) void* function() new_AtomicOpsRaw_8ByteImpl;
extern(C) void function(void* jarg1) delete_AtomicOpsRaw_8ByteImpl;
extern(C) void* function(void* objectRef) AtomicOpsRaw_8ByteImpl_Upcast;
extern(C) void* function(uint jarg1) new_Lock__SWIG_0;
extern(C) void* function() new_Lock__SWIG_1;
extern(C) void function(void* jarg1) delete_Lock;
extern(C) void function(void* jarg1) Lock_DoLock;
extern(C) void function(void* jarg1) Lock_Unlock;
extern(C) void* function() new_String__SWIG_1;
extern(C) void* function(const(char)* jarg1) new_String__SWIG_2;
extern(C) void* function(const(char)* jarg1, const(char)* jarg2, const(char)* jarg3) new_String__SWIG_3;
extern(C) void* function(const(char)* jarg1, const(char)* jarg2) new_String__SWIG_4;
extern(C) void* function(const(char)* jarg1, size_t jarg2) new_String__SWIG_5;
extern(C) void* function(void* jarg1) new_String__SWIG_6;
extern(C) void* function(void* jarg1) new_String__SWIG_7;
extern(C) void* function(void* jarg1, size_t jarg2) new_String__SWIG_8;
extern(C) void* function(void* jarg1) new_String__SWIG_9;
extern(C) void function(void* jarg1) delete_String;
extern(C) void function(void* jarg1) String_NullData_set;
extern(C) void* function() String_NullData_get;
extern(C) void function(void* jarg1) String_Clear;
extern(C) const(char)* function(void* jarg1) String_ToCStr;
extern(C) size_t function(void* jarg1) String_GetSize;
extern(C) uint function(void* jarg1) String_IsEmpty;
extern(C) size_t function(void* jarg1) String_GetLength;
extern(C) core.stdc.config.c_ulong function(void* jarg1, size_t jarg2) String_GetCharAt;
extern(C) core.stdc.config.c_ulong function(void* jarg1, size_t jarg2, void* jarg3) String_GetFirstCharAt;
extern(C) core.stdc.config.c_ulong function(void* jarg1, void* jarg2) String_GetNextChar;
extern(C) void function(void* jarg1, core.stdc.config.c_ulong jarg2) String_AppendChar;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) String_AppendString__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2) String_AppendString__SWIG_1;
extern(C) void function(void* jarg1, const(char)* jarg2, void* jarg3) String_AppendString__SWIG_2;
extern(C) void function(void* jarg1, const(char)* jarg2) String_AppendString__SWIG_3;
extern(C) void function(void* jarg1, void* jarg2, size_t jarg3) String_AssignString__SWIG_0;
extern(C) void function(void* jarg1, const(char)* jarg2, size_t jarg3) String_AssignString__SWIG_1;
extern(C) void function(void* jarg1, size_t jarg2, void* jarg3) String_Remove__SWIG_0;
extern(C) void function(void* jarg1, size_t jarg2) String_Remove__SWIG_1;
extern(C) void* function(void* jarg1, size_t jarg2, size_t jarg3) String_Substring;
extern(C) void* function(void* jarg1) String_ToUpper;
extern(C) void* function(void* jarg1) String_ToLower;
extern(C) void* function(void* jarg1, const(char)* jarg2, size_t jarg3, void* jarg4) String_Insert__SWIG_0;
extern(C) void* function(void* jarg1, const(char)* jarg2, size_t jarg3) String_Insert__SWIG_1;
extern(C) size_t function(void* jarg1, core.stdc.config.c_ulong jarg2, size_t jarg3) String_InsertCharAt;
extern(C) size_t function(void* jarg1, size_t jarg2) String_GetByteIndex;
extern(C) int function(const(char)* jarg1, const(char)* jarg2) String_CompareNoCase__SWIG_0;
extern(C) int function(const(char)* jarg1, const(char)* jarg2, void* jarg3) String_CompareNoCase__SWIG_1;
extern(C) size_t function(void* jarg1, size_t jarg2, size_t jarg3) String_BernsteinHashFunctionCIS__SWIG_0;
extern(C) size_t function(void* jarg1, size_t jarg2) String_BernsteinHashFunctionCIS__SWIG_1;
extern(C) size_t function(void* jarg1, size_t jarg2, size_t jarg3) String_BernsteinHashFunction__SWIG_0;
extern(C) size_t function(void* jarg1, size_t jarg2) String_BernsteinHashFunction__SWIG_1;
extern(C) uint function(const(char)* jarg1) String_HasAbsolutePath__SWIG_0;
extern(C) uint function(const(char)* jarg1) String_HasExtension__SWIG_0;
extern(C) uint function(const(char)* jarg1) String_HasProtocol__SWIG_0;
extern(C) uint function(void* jarg1) String_HasAbsolutePath__SWIG_1;
extern(C) uint function(void* jarg1) String_HasExtension__SWIG_1;
extern(C) uint function(void* jarg1) String_HasProtocol__SWIG_1;
extern(C) void* function(void* jarg1) String_GetProtocol;
extern(C) void* function(void* jarg1) String_GetPath;
extern(C) void* function(void* jarg1) String_GetFilename;
extern(C) void* function(void* jarg1) String_GetExtension;
extern(C) void function(void* jarg1) String_StripProtocol;
extern(C) void function(void* jarg1) String_StripExtension;
extern(C) void function(void* jarg1, void* jarg2) String_swigOpAddAssign__SWIG_0;
extern(C) void function(void* jarg1, const(char)* jarg2) String_swigOpAddAssign__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2) String_swigOpAddAssign__SWIG_2;
extern(C) void function(void* jarg1, char jarg2) String_swigOpAddAssign__SWIG_3;
extern(C) void* function(void* jarg1, const(char)* jarg2) String_swigOpAdd__SWIG_0;
extern(C) void* function(void* jarg1, void* jarg2) String_swigOpAdd__SWIG_1;
extern(C) uint function(void* jarg1, void* jarg2) String_swigOpEquals__SWIG_0;
extern(C) uint function(void* jarg1, const(char)* jarg2) String_swigOpEquals__SWIG_1;
extern(C) uint function(void* jarg1, const(char)* jarg2) String_swigOpLt__SWIG_0;
extern(C) uint function(void* jarg1, void* jarg2) String_swigOpLt__SWIG_1;
extern(C) uint function(void* jarg1, const(char)* jarg2) String_swigOpGt__SWIG_0;
extern(C) uint function(void* jarg1, void* jarg2) String_swigOpGt__SWIG_1;
extern(C) int function(void* jarg1, const(char)* jarg2) String_CompareNoCase__SWIG_2;
extern(C) int function(void* jarg1, void* jarg2) String_CompareNoCase__SWIG_3;
extern(C) char function(void* jarg1, int jarg2) String_opIndex__SWIG_0;
extern(C) char function(void* jarg1, size_t jarg2) String_opIndex__SWIG_1;
extern(C) uint function(void* jarg1, void* jarg2) String_swigOpEquals__SWIG_2;
extern(C) void* function() new_StringBuffer__SWIG_0;
extern(C) void* function(size_t jarg1) new_StringBuffer__SWIG_1;
extern(C) void* function(const(char)* jarg1) new_StringBuffer__SWIG_2;
extern(C) void* function(const(char)* jarg1, size_t jarg2) new_StringBuffer__SWIG_3;
extern(C) void* function(void* jarg1) new_StringBuffer__SWIG_4;
extern(C) void* function(void* jarg1) new_StringBuffer__SWIG_5;
extern(C) void* function(void* jarg1) new_StringBuffer__SWIG_6;
extern(C) void function(void* jarg1) delete_StringBuffer;
extern(C) size_t function(void* jarg1) StringBuffer_GetGrowSize;
extern(C) void function(void* jarg1, size_t jarg2) StringBuffer_SetGrowSize;
extern(C) void function(void* jarg1) StringBuffer_Clear;
extern(C) const(char)* function(void* jarg1) StringBuffer_ToCStr;
extern(C) size_t function(void* jarg1) StringBuffer_GetSize;
extern(C) uint function(void* jarg1) StringBuffer_IsEmpty;
extern(C) size_t function(void* jarg1) StringBuffer_GetLength;
extern(C) core.stdc.config.c_ulong function(void* jarg1, size_t jarg2) StringBuffer_GetCharAt;
extern(C) core.stdc.config.c_ulong function(void* jarg1, size_t jarg2, void* jarg3) StringBuffer_GetFirstCharAt;
extern(C) core.stdc.config.c_ulong function(void* jarg1, void* jarg2) StringBuffer_GetNextChar;
extern(C) void function(void* jarg1, size_t jarg2) StringBuffer_Resize;
extern(C) void function(void* jarg1, size_t jarg2) StringBuffer_Reserve;
extern(C) void function(void* jarg1, core.stdc.config.c_ulong jarg2) StringBuffer_AppendChar;
extern(C) void function(void* jarg1, void* jarg2, void* jarg3) StringBuffer_AppendString__SWIG_0;
extern(C) void function(void* jarg1, void* jarg2) StringBuffer_AppendString__SWIG_1;
extern(C) void function(void* jarg1, const(char)* jarg2, void* jarg3) StringBuffer_AppendString__SWIG_2;
extern(C) void function(void* jarg1, const(char)* jarg2) StringBuffer_AppendString__SWIG_3;
extern(C) void function(void* jarg1, const(char)* jarg2) StringBuffer_AppendFormat;
extern(C) void function(void* jarg1, const(char)* jarg2, size_t jarg3, void* jarg4) StringBuffer_Insert__SWIG_0;
extern(C) void function(void* jarg1, const(char)* jarg2, size_t jarg3) StringBuffer_Insert__SWIG_1;
extern(C) size_t function(void* jarg1, core.stdc.config.c_ulong jarg2, size_t jarg3) StringBuffer_InsertCharAt;
extern(C) void function(void* jarg1, void* jarg2) StringBuffer_swigOpAddAssign__SWIG_0;
extern(C) void function(void* jarg1, const(char)* jarg2) StringBuffer_swigOpAddAssign__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2) StringBuffer_swigOpAddAssign__SWIG_2;
extern(C) void function(void* jarg1, char jarg2) StringBuffer_swigOpAddAssign__SWIG_3;
extern(C) void* function(void* jarg1, int jarg2) StringBuffer_opIndex__SWIG_0;
extern(C) void* function(void* jarg1, size_t jarg2) StringBuffer_opIndex__SWIG_1;
extern(C) void* function() new_StringDataPtr__SWIG_0;
extern(C) void* function(void* jarg1) new_StringDataPtr__SWIG_1;
extern(C) void* function(const(char)* jarg1, size_t jarg2) new_StringDataPtr__SWIG_2;
extern(C) void* function(const(char)* jarg1) new_StringDataPtr__SWIG_3;
extern(C) void* function(void* jarg1) new_StringDataPtr__SWIG_4;
extern(C) const(char)* function(void* jarg1) StringDataPtr_ToCStr;
extern(C) size_t function(void* jarg1) StringDataPtr_GetSize;
extern(C) uint function(void* jarg1) StringDataPtr_IsEmpty;
extern(C) uint function(void* jarg1, void* jarg2) StringDataPtr_IsPrefix;
extern(C) uint function(void* jarg1, void* jarg2) StringDataPtr_IsSuffix;
extern(C) void* function(void* jarg1, char jarg2, size_t jarg3) StringDataPtr_FindChar__SWIG_0;
extern(C) void* function(void* jarg1, char jarg2) StringDataPtr_FindChar__SWIG_1;
extern(C) void* function(void* jarg1, char jarg2, size_t jarg3) StringDataPtr_FindLastChar__SWIG_0;
extern(C) void* function(void* jarg1, char jarg2) StringDataPtr_FindLastChar__SWIG_1;
extern(C) void* function(void* jarg1, size_t jarg2) StringDataPtr_GetTrimLeft;
extern(C) void* function(void* jarg1, size_t jarg2) StringDataPtr_GetTrimRight;
extern(C) void* function(void* jarg1, char jarg2) StringDataPtr_GetNextToken__SWIG_0;
extern(C) void* function(void* jarg1) StringDataPtr_GetNextToken__SWIG_1;
extern(C) void* function(void* jarg1, size_t jarg2) StringDataPtr_TrimLeft;
extern(C) void* function(void* jarg1, size_t jarg2) StringDataPtr_TrimRight;
extern(C) const(char)* function(void* jarg1) StringDataPtr_Begin;
extern(C) const(char)* function(void* jarg1) StringDataPtr_End;
extern(C) uint function(void* jarg1, void* jarg2) StringDataPtr_swigOpEquals;
extern(C) void function(void* jarg1) delete_StringDataPtr;
extern(C) void* function() new_DeviceHandle__SWIG_0;
extern(C) void* function(void* jarg1) new_DeviceHandle__SWIG_1;
extern(C) void function(void* jarg1) delete_DeviceHandle;
extern(C) uint function(void* jarg1, void* jarg2) DeviceHandle_swigOpEquals;
extern(C) void* function(void* jarg1) DeviceHandle_GetDevice_AddRef;
extern(C) int function(void* jarg1) DeviceHandle_GetType;
extern(C) uint function(void* jarg1, void* jarg2) DeviceHandle_GetDeviceInfo;
extern(C) uint function(void* jarg1) DeviceHandle_IsAvailable;
extern(C) uint function(void* jarg1) DeviceHandle_IsCreated;
extern(C) uint function(void* jarg1, void* jarg2) DeviceHandle_IsDevice;
extern(C) void* function(void* jarg1) DeviceHandle_CreateDevice;
extern(C) void function(void* jarg1) DeviceHandle_Clear;
extern(C) void* function(int jarg1, void* jarg2) new_Message__SWIG_0;
extern(C) void* function(int jarg1) new_Message__SWIG_1;
extern(C) void* function() new_Message__SWIG_2;
extern(C) void function(void* jarg1, int jarg2) Message_Type_set;
extern(C) int function(void* jarg1) Message_Type_get;
extern(C) void function(void* jarg1, void* jarg2) Message_pDevice_set;
extern(C) void* function(void* jarg1) Message_pDevice_get;
extern(C) void function(void* jarg1) delete_Message;
extern(C) void* function(void* jarg1) new_MessageBodyFrame;
extern(C) void function(void* jarg1, void* jarg2) MessageBodyFrame_Acceleration_set;
extern(C) void* function(void* jarg1) MessageBodyFrame_Acceleration_get;
extern(C) void function(void* jarg1, void* jarg2) MessageBodyFrame_RotationRate_set;
extern(C) void* function(void* jarg1) MessageBodyFrame_RotationRate_get;
extern(C) void function(void* jarg1, void* jarg2) MessageBodyFrame_MagneticField_set;
extern(C) void* function(void* jarg1) MessageBodyFrame_MagneticField_get;
extern(C) void function(void* jarg1, float jarg2) MessageBodyFrame_Temperature_set;
extern(C) float function(void* jarg1) MessageBodyFrame_Temperature_get;
extern(C) void function(void* jarg1, float jarg2) MessageBodyFrame_TimeDelta_set;
extern(C) float function(void* jarg1) MessageBodyFrame_TimeDelta_get;
extern(C) void function(void* jarg1) delete_MessageBodyFrame;
extern(C) void* function(void* objectRef) MessageBodyFrame_Upcast;
extern(C) void* function(int jarg1, void* jarg2, void* jarg3) new_MessageDeviceStatus;
extern(C) void function(void* jarg1, void* jarg2) MessageDeviceStatus_Handle_set;
extern(C) void* function(void* jarg1) MessageDeviceStatus_Handle_get;
extern(C) void function(void* jarg1) delete_MessageDeviceStatus;
extern(C) void* function(void* objectRef) MessageDeviceStatus_Upcast;
extern(C) void* function(void* jarg1) new_MessageLatencyTestSamples;
extern(C) void function(void* jarg1, void* jarg2) MessageLatencyTestSamples_Samples_set;
extern(C) void* function(void* jarg1) MessageLatencyTestSamples_Samples_get;
extern(C) void function(void* jarg1) delete_MessageLatencyTestSamples;
extern(C) void* function(void* objectRef) MessageLatencyTestSamples_Upcast;
extern(C) void* function(void* jarg1) new_MessageLatencyTestColorDetected;
extern(C) void function(void* jarg1, ushort jarg2) MessageLatencyTestColorDetected_Elapsed_set;
extern(C) ushort function(void* jarg1) MessageLatencyTestColorDetected_Elapsed_get;
extern(C) void function(void* jarg1, void* jarg2) MessageLatencyTestColorDetected_DetectedValue_set;
extern(C) void* function(void* jarg1) MessageLatencyTestColorDetected_DetectedValue_get;
extern(C) void function(void* jarg1, void* jarg2) MessageLatencyTestColorDetected_TargetValue_set;
extern(C) void* function(void* jarg1) MessageLatencyTestColorDetected_TargetValue_get;
extern(C) void function(void* jarg1) delete_MessageLatencyTestColorDetected;
extern(C) void* function(void* objectRef) MessageLatencyTestColorDetected_Upcast;
extern(C) void* function(void* jarg1) new_MessageLatencyTestStarted;
extern(C) void function(void* jarg1, void* jarg2) MessageLatencyTestStarted_TargetValue_set;
extern(C) void* function(void* jarg1) MessageLatencyTestStarted_TargetValue_get;
extern(C) void function(void* jarg1) delete_MessageLatencyTestStarted;
extern(C) void* function(void* objectRef) MessageLatencyTestStarted_Upcast;
extern(C) void* function(void* jarg1) new_MessageLatencyTestButton;
extern(C) void function(void* jarg1) delete_MessageLatencyTestButton;
extern(C) void* function(void* objectRef) MessageLatencyTestButton_Upcast;
extern(C) void* function(void* jarg1) new_SensorFusion__SWIG_0;
extern(C) void* function() new_SensorFusion__SWIG_1;
extern(C) void function(void* jarg1) delete_SensorFusion;
extern(C) uint function(void* jarg1, void* jarg2) SensorFusion_AttachToSensor;
extern(C) uint function(void* jarg1) SensorFusion_IsAttachedToSensor;
extern(C) void* function(void* jarg1) SensorFusion_GetOrientation;
extern(C) void* function(void* jarg1, float jarg2) SensorFusion_GetPredictedOrientation__SWIG_0;
extern(C) void* function(void* jarg1) SensorFusion_GetPredictedOrientation__SWIG_1;
extern(C) void* function(void* jarg1) SensorFusion_GetAcceleration;
extern(C) void* function(void* jarg1) SensorFusion_GetAngularVelocity;
extern(C) void* function(void* jarg1) SensorFusion_GetMagnetometer;
extern(C) void* function(void* jarg1) SensorFusion_GetCalibratedMagnetometer;
extern(C) void function(void* jarg1) SensorFusion_Reset;
extern(C) void function(void* jarg1, uint jarg2) SensorFusion_EnableMotionTracking__SWIG_0;
extern(C) void function(void* jarg1) SensorFusion_EnableMotionTracking__SWIG_1;
extern(C) uint function(void* jarg1) SensorFusion_IsMotionTrackingEnabled;
extern(C) float function(void* jarg1) SensorFusion_GetPredictionDelta;
extern(C) void function(void* jarg1, float jarg2, uint jarg3) SensorFusion_SetPrediction__SWIG_0;
extern(C) void function(void* jarg1, float jarg2) SensorFusion_SetPrediction__SWIG_1;
extern(C) void function(void* jarg1, uint jarg2) SensorFusion_SetPredictionEnabled__SWIG_0;
extern(C) void function(void* jarg1) SensorFusion_SetPredictionEnabled__SWIG_1;
extern(C) uint function(void* jarg1) SensorFusion_IsPredictionEnabled;
extern(C) void function(void* jarg1, uint jarg2) SensorFusion_SetGravityEnabled;
extern(C) uint function(void* jarg1) SensorFusion_IsGravityEnabled;
extern(C) float function(void* jarg1) SensorFusion_GetAccelGain;
extern(C) void function(void* jarg1, float jarg2) SensorFusion_SetAccelGain;
extern(C) uint function(void* jarg1, const(char)* jarg2) SensorFusion_SaveMagCalibration__SWIG_0;
extern(C) uint function(void* jarg1) SensorFusion_SaveMagCalibration__SWIG_1;
extern(C) uint function(void* jarg1, const(char)* jarg2) SensorFusion_LoadMagCalibration__SWIG_0;
extern(C) uint function(void* jarg1) SensorFusion_LoadMagCalibration__SWIG_1;
extern(C) void function(void* jarg1, uint jarg2) SensorFusion_SetYawCorrectionEnabled;
extern(C) uint function(void* jarg1) SensorFusion_IsYawCorrectionEnabled;
extern(C) void function(void* jarg1, void* jarg2) SensorFusion_SetMagCalibration;
extern(C) void* function(void* jarg1) SensorFusion_GetMagCalibration;
extern(C) void* function(void* jarg1) SensorFusion_GetMagCalibrationTime;
extern(C) uint function(void* jarg1) SensorFusion_HasMagCalibration;
extern(C) void function(void* jarg1) SensorFusion_ClearMagCalibration;
extern(C) void function(void* jarg1) SensorFusion_ClearMagReferences;
extern(C) void* function(void* jarg1, void* jarg2) SensorFusion_GetCalibratedMagValue;
extern(C) void function(void* jarg1, void* jarg2) SensorFusion_OnMessage;
extern(C) void function(void* jarg1, void* jarg2) SensorFusion_SetDelegateMessageHandler;
extern(C) void* function(void* objectRef) SensorFusion_Upcast;
extern(C) void* function() ProfileManager_Create;
extern(C) int function(void* jarg1, int jarg2) ProfileManager_GetProfileCount;
extern(C) const(char)* function(void* jarg1, int jarg2, uint jarg3) ProfileManager_GetProfileName;
extern(C) uint function(void* jarg1, int jarg2, const(char)* jarg3) ProfileManager_HasProfile;
extern(C) void* function(void* jarg1, int jarg2, uint jarg3) ProfileManager_LoadProfile__SWIG_0;
extern(C) void* function(void* jarg1, int jarg2, const(char)* jarg3) ProfileManager_LoadProfile__SWIG_1;
extern(C) void* function(void* jarg1, int jarg2) ProfileManager_GetDeviceDefaultProfile;
extern(C) const(char)* function(void* jarg1, int jarg2) ProfileManager_GetDefaultProfileName;
extern(C) uint function(void* jarg1, int jarg2, const(char)* jarg3) ProfileManager_SetDefaultProfileName;
extern(C) uint function(void* jarg1, void* jarg2) ProfileManager_Save;
extern(C) uint function(void* jarg1, void* jarg2) ProfileManager_Delete;
extern(C) void function(void* jarg1, int jarg2) Profile_Type_set;
extern(C) int function(void* jarg1) Profile_Type_get;
extern(C) void function(void* jarg1, const(char)* jarg2) Profile_Name_set;
extern(C) const(char)* function(void* jarg1) Profile_Name_get;
extern(C) void* function(void* jarg1) Profile_Clone;
extern(C) int function(void* jarg1) Profile_GetGender;
extern(C) float function(void* jarg1) Profile_GetPlayerHeight;
extern(C) float function(void* jarg1) Profile_GetIPD;
extern(C) float function(void* jarg1) Profile_GetEyeHeight;
extern(C) void function(void* jarg1, int jarg2) Profile_SetGender;
extern(C) void function(void* jarg1, float jarg2) Profile_SetPlayerHeight;
extern(C) void function(void* jarg1, float jarg2) Profile_SetIPD;
extern(C) void function(void* jarg1) delete_Profile;
extern(C) void* function(void* jarg1) HMDProfile_Clone;
extern(C) void function(void* jarg1, int jarg2) HMDProfile_SetLL;
extern(C) void function(void* jarg1, int jarg2) HMDProfile_SetLR;
extern(C) void function(void* jarg1, int jarg2) HMDProfile_SetRL;
extern(C) void function(void* jarg1, int jarg2) HMDProfile_SetRR;
extern(C) int function(void* jarg1) HMDProfile_GetLL;
extern(C) int function(void* jarg1) HMDProfile_GetLR;
extern(C) int function(void* jarg1) HMDProfile_GetRL;
extern(C) int function(void* jarg1) HMDProfile_GetRR;
extern(C) void function(void* jarg1) delete_HMDProfile;
extern(C) void* function(void* objectRef) HMDProfile_Upcast;
extern(C) void* function(void* jarg1) RiftDK1Profile_Clone;
extern(C) int function(void* jarg1) RiftDK1Profile_GetEyeCup;
extern(C) void function(void* jarg1, int jarg2) RiftDK1Profile_SetEyeCup;
extern(C) void function(void* jarg1) delete_RiftDK1Profile;
extern(C) void* function(void* objectRef) RiftDK1Profile_Upcast;
extern(C) void* function(void* jarg1) RiftDKHDProfile_Clone;
extern(C) int function(void* jarg1) RiftDKHDProfile_GetEyeCup;
extern(C) void function(void* jarg1, int jarg2) RiftDKHDProfile_SetEyeCup;
extern(C) void function(void* jarg1) delete_RiftDKHDProfile;
extern(C) void* function(void* objectRef) RiftDKHDProfile_Upcast;
extern(C) void* function(uint jarg1) GetBaseOVRPath;
extern(C) void function(void* jarg1) delete_HIDDeviceBase;
extern(C) uint function(void* jarg1, void* jarg2, core.stdc.config.c_ulong jarg3) HIDDeviceBase_SetFeatureReport;
extern(C) uint function(void* jarg1, void* jarg2, core.stdc.config.c_ulong jarg3) HIDDeviceBase_GetFeatureReport;
extern(C) void* function() new_MessageHandler;
extern(C) void function(void* jarg1) delete_MessageHandler;
extern(C) uint function(void* jarg1) MessageHandler_IsHandlerInstalled;
extern(C) void function(void* jarg1) MessageHandler_RemoveHandlerFromDevices;
extern(C) void* function(void* jarg1) MessageHandler_GetHandlerLock;
extern(C) void function(void* jarg1, void* jarg2) MessageHandler_OnMessage;
extern(C) uint function(void* jarg1, int jarg2) MessageHandler_SupportsMessageType;
extern(C) void function(void* jarg1) delete_DeviceBase;
extern(C) void function(void* jarg1) DeviceBase_AddRef;
extern(C) void function(void* jarg1) DeviceBase_Release;
extern(C) void* function(void* jarg1) DeviceBase_GetParent;
extern(C) void* function(void* jarg1) DeviceBase_GetManager;
extern(C) void function(void* jarg1, void* jarg2) DeviceBase_SetMessageHandler;
extern(C) void* function(void* jarg1) DeviceBase_GetMessageHandler;
extern(C) int function(void* jarg1) DeviceBase_GetType;
extern(C) uint function(void* jarg1, void* jarg2) DeviceBase_GetDeviceInfo;
extern(C) void* function(void* jarg1) DeviceBase_GetHandlerLock;
extern(C) void* function(void* objectRef) DeviceBase_Upcast;
extern(C) void* function() new_DeviceInfo;
extern(C) int function(void* jarg1) DeviceInfo_InfoClassType_get;
extern(C) void function(void* jarg1, int jarg2) DeviceInfo_Type_set;
extern(C) int function(void* jarg1) DeviceInfo_Type_get;
extern(C) void function(void* jarg1, const(char)* jarg2) DeviceInfo_ProductName_set;
extern(C) const(char)* function(void* jarg1) DeviceInfo_ProductName_get;
extern(C) void function(void* jarg1, const(char)* jarg2) DeviceInfo_Manufacturer_set;
extern(C) const(char)* function(void* jarg1) DeviceInfo_Manufacturer_get;
extern(C) void function(void* jarg1, uint jarg2) DeviceInfo_Version_set;
extern(C) uint function(void* jarg1) DeviceInfo_Version_get;
extern(C) void function(void* jarg1) delete_DeviceInfo;
extern(C) void* function(int jarg1, uint jarg2) new_DeviceEnumerationArgs;
extern(C) uint function(void* jarg1, int jarg2, uint jarg3) DeviceEnumerationArgs_MatchRule;
extern(C) void function(void* jarg1) delete_DeviceEnumerationArgs;
extern(C) int function(void* jarg1) DeviceManager_GetType;
extern(C) void* function(void* jarg1) DeviceManager_GetManager;
extern(C) void* function(void* jarg1) DeviceManager_GetProfileManager;
extern(C) void* function(void* jarg1, void* jarg2) DeviceManager_EnumerateDevicesEx;
extern(C) void* function() DeviceManager_Create;
extern(C) void* function(void* jarg1, void* jarg2) DeviceManager_AddDevice_NeedsLock;
extern(C) void function(void* jarg1) delete_DeviceManager;
extern(C) void* function(void* objectRef) DeviceManager_Upcast;
extern(C) void function(void* jarg1, uint jarg2) HMDInfo_HResolution_set;
extern(C) uint function(void* jarg1) HMDInfo_HResolution_get;
extern(C) void function(void* jarg1, uint jarg2) HMDInfo_VResolution_set;
extern(C) uint function(void* jarg1) HMDInfo_VResolution_get;
extern(C) void function(void* jarg1, float jarg2) HMDInfo_HScreenSize_set;
extern(C) float function(void* jarg1) HMDInfo_HScreenSize_get;
extern(C) void function(void* jarg1, float jarg2) HMDInfo_VScreenSize_set;
extern(C) float function(void* jarg1) HMDInfo_VScreenSize_get;
extern(C) void function(void* jarg1, float jarg2) HMDInfo_VScreenCenter_set;
extern(C) float function(void* jarg1) HMDInfo_VScreenCenter_get;
extern(C) void function(void* jarg1, float jarg2) HMDInfo_EyeToScreenDistance_set;
extern(C) float function(void* jarg1) HMDInfo_EyeToScreenDistance_get;
extern(C) void function(void* jarg1, float jarg2) HMDInfo_LensSeparationDistance_set;
extern(C) float function(void* jarg1) HMDInfo_LensSeparationDistance_get;
extern(C) void function(void* jarg1, float jarg2) HMDInfo_InterpupillaryDistance_set;
extern(C) float function(void* jarg1) HMDInfo_InterpupillaryDistance_get;
extern(C) void function(void* jarg1, void* jarg2) HMDInfo_DistortionK_set;
extern(C) void* function(void* jarg1) HMDInfo_DistortionK_get;
extern(C) void function(void* jarg1, void* jarg2) HMDInfo_ChromaAbCorrection_set;
extern(C) void* function(void* jarg1) HMDInfo_ChromaAbCorrection_get;
extern(C) void function(void* jarg1, int jarg2) HMDInfo_DesktopX_set;
extern(C) int function(void* jarg1) HMDInfo_DesktopX_get;
extern(C) void function(void* jarg1, int jarg2) HMDInfo_DesktopY_set;
extern(C) int function(void* jarg1) HMDInfo_DesktopY_get;
extern(C) void function(void* jarg1, const(char)* jarg2) HMDInfo_DisplayDeviceName_set;
extern(C) const(char)* function(void* jarg1) HMDInfo_DisplayDeviceName_get;
extern(C) void function(void* jarg1, core.stdc.config.c_long jarg2) HMDInfo_DisplayId_set;
extern(C) core.stdc.config.c_long function(void* jarg1) HMDInfo_DisplayId_get;
extern(C) void* function() new_HMDInfo;
extern(C) uint function(void* jarg1, void* jarg2) HMDInfo_IsSameDisplay;
extern(C) void function(void* jarg1) delete_HMDInfo;
extern(C) void* function(void* objectRef) HMDInfo_Upcast;
extern(C) int function(void* jarg1) HMDDevice_GetType;
extern(C) void* function(void* jarg1) HMDDevice_GetSensor;
extern(C) void* function(void* jarg1) HMDDevice_GetProfile;
extern(C) const(char)* function(void* jarg1) HMDDevice_GetProfileName;
extern(C) uint function(void* jarg1, const(char)* jarg2) HMDDevice_SetProfileName;
extern(C) void* function(void* jarg1, void* jarg2) HMDDevice_Disconnect;
extern(C) uint function(void* jarg1) HMDDevice_IsDisconnected;
extern(C) void function(void* jarg1) delete_HMDDevice;
extern(C) void* function(void* objectRef) HMDDevice_Upcast;
extern(C) void* function(float jarg1, float jarg2, float jarg3) new_SensorRange__SWIG_0;
extern(C) void* function(float jarg1, float jarg2) new_SensorRange__SWIG_1;
extern(C) void* function(float jarg1) new_SensorRange__SWIG_2;
extern(C) void* function() new_SensorRange__SWIG_3;
extern(C) void function(void* jarg1, float jarg2) SensorRange_MaxAcceleration_set;
extern(C) float function(void* jarg1) SensorRange_MaxAcceleration_get;
extern(C) void function(void* jarg1, float jarg2) SensorRange_MaxRotationRate_set;
extern(C) float function(void* jarg1) SensorRange_MaxRotationRate_get;
extern(C) void function(void* jarg1, float jarg2) SensorRange_MaxMagneticField_set;
extern(C) float function(void* jarg1) SensorRange_MaxMagneticField_get;
extern(C) void function(void* jarg1) delete_SensorRange;
extern(C) void* function() new_SensorInfo;
extern(C) void function(void* jarg1, ushort jarg2) SensorInfo_VendorId_set;
extern(C) ushort function(void* jarg1) SensorInfo_VendorId_get;
extern(C) void function(void* jarg1, ushort jarg2) SensorInfo_ProductId_set;
extern(C) ushort function(void* jarg1) SensorInfo_ProductId_get;
extern(C) void function(void* jarg1, void* jarg2) SensorInfo_MaxRanges_set;
extern(C) void* function(void* jarg1) SensorInfo_MaxRanges_get;
extern(C) void function(void* jarg1, const(char)* jarg2) SensorInfo_SerialNumber_set;
extern(C) const(char)* function(void* jarg1) SensorInfo_SerialNumber_get;
extern(C) void function(void* jarg1) delete_SensorInfo;
extern(C) void* function(void* objectRef) SensorInfo_Upcast;
extern(C) int function(void* jarg1) SensorDevice_GetType;
extern(C) void function(void* jarg1, int jarg2) SensorDevice_SetCoordinateFrame;
extern(C) int function(void* jarg1) SensorDevice_GetCoordinateFrame;
extern(C) void function(void* jarg1, uint jarg2) SensorDevice_SetReportRate;
extern(C) uint function(void* jarg1) SensorDevice_GetReportRate;
extern(C) uint function(void* jarg1, void* jarg2, uint jarg3) SensorDevice_SetRange__SWIG_0;
extern(C) uint function(void* jarg1, void* jarg2) SensorDevice_SetRange__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2) SensorDevice_GetRange;
extern(C) void function(void* jarg1) delete_SensorDevice;
extern(C) void* function(void* objectRef) SensorDevice_Upcast;
extern(C) void* function(void* jarg1, uint jarg2) new_LatencyTestConfiguration__SWIG_0;
extern(C) void* function(void* jarg1) new_LatencyTestConfiguration__SWIG_1;
extern(C) void function(void* jarg1, void* jarg2) LatencyTestConfiguration_Threshold_set;
extern(C) void* function(void* jarg1) LatencyTestConfiguration_Threshold_get;
extern(C) void function(void* jarg1, uint jarg2) LatencyTestConfiguration_SendSamples_set;
extern(C) uint function(void* jarg1) LatencyTestConfiguration_SendSamples_get;
extern(C) void function(void* jarg1) delete_LatencyTestConfiguration;
extern(C) void* function(ubyte jarg1, core.stdc.config.c_ulong jarg2) new_LatencyTestDisplay;
extern(C) void function(void* jarg1, ubyte jarg2) LatencyTestDisplay_Mode_set;
extern(C) ubyte function(void* jarg1) LatencyTestDisplay_Mode_get;
extern(C) void function(void* jarg1, core.stdc.config.c_ulong jarg2) LatencyTestDisplay_Value_set;
extern(C) core.stdc.config.c_ulong function(void* jarg1) LatencyTestDisplay_Value_get;
extern(C) void function(void* jarg1) delete_LatencyTestDisplay;
extern(C) int function(void* jarg1) LatencyTestDevice_GetType;
extern(C) uint function(void* jarg1, void* jarg2, uint jarg3) LatencyTestDevice_SetConfiguration__SWIG_0;
extern(C) uint function(void* jarg1, void* jarg2) LatencyTestDevice_SetConfiguration__SWIG_1;
extern(C) uint function(void* jarg1, void* jarg2) LatencyTestDevice_GetConfiguration;
extern(C) uint function(void* jarg1, void* jarg2, uint jarg3) LatencyTestDevice_SetCalibrate__SWIG_0;
extern(C) uint function(void* jarg1, void* jarg2) LatencyTestDevice_SetCalibrate__SWIG_1;
extern(C) uint function(void* jarg1, void* jarg2, uint jarg3) LatencyTestDevice_SetStartTest__SWIG_0;
extern(C) uint function(void* jarg1, void* jarg2) LatencyTestDevice_SetStartTest__SWIG_1;
extern(C) uint function(void* jarg1, void* jarg2, uint jarg3) LatencyTestDevice_SetDisplay__SWIG_0;
extern(C) uint function(void* jarg1, void* jarg2) LatencyTestDevice_SetDisplay__SWIG_1;
extern(C) void* function(void* jarg1) LatencyTestDevice_GetDevice;
extern(C) void function(void* jarg1) delete_LatencyTestDevice;
extern(C) void* function(void* objectRef) LatencyTestDevice_Upcast;
extern(C) void* function(void* jarg1) new_LatencyTest__SWIG_0;
extern(C) void* function() new_LatencyTest__SWIG_1;
extern(C) void function(void* jarg1) delete_LatencyTest;
extern(C) uint function(void* jarg1, void* jarg2) LatencyTest_SetDevice;
extern(C) uint function(void* jarg1) LatencyTest_HasDevice;
extern(C) void function(void* jarg1) LatencyTest_ProcessInputs;
extern(C) uint function(void* jarg1, void* jarg2) LatencyTest_DisplayScreenColor;
extern(C) const(char)* function(void* jarg1) LatencyTest_GetResultsString;
extern(C) void function(void* jarg1) LatencyTest_BeginTest;
extern(C) void* function(void* objectRef) LatencyTest_Upcast;
extern(C) void function(void* jarg1, int jarg2) Viewport_x_set;
extern(C) int function(void* jarg1) Viewport_x_get;
extern(C) void function(void* jarg1, int jarg2) Viewport_y_set;
extern(C) int function(void* jarg1) Viewport_y_get;
extern(C) void function(void* jarg1, int jarg2) Viewport_w_set;
extern(C) int function(void* jarg1) Viewport_w_get;
extern(C) void function(void* jarg1, int jarg2) Viewport_h_set;
extern(C) int function(void* jarg1) Viewport_h_get;
extern(C) void* function() new_Viewport__SWIG_0;
extern(C) void* function(int jarg1, int jarg2, int jarg3, int jarg4) new_Viewport__SWIG_1;
extern(C) uint function(void* jarg1, void* jarg2) Viewport_swigOpEquals;
extern(C) void function(void* jarg1) delete_Viewport;
extern(C) void* function(float jarg1, float jarg2, float jarg3, float jarg4) new_DistortionConfig__SWIG_0;
extern(C) void* function(float jarg1, float jarg2, float jarg3) new_DistortionConfig__SWIG_1;
extern(C) void* function(float jarg1, float jarg2) new_DistortionConfig__SWIG_2;
extern(C) void* function(float jarg1) new_DistortionConfig__SWIG_3;
extern(C) void* function() new_DistortionConfig__SWIG_4;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4, float jarg5) DistortionConfig_SetCoefficients__SWIG_0;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4) DistortionConfig_SetCoefficients__SWIG_1;
extern(C) void function(void* jarg1, float jarg2, float jarg3) DistortionConfig_SetCoefficients__SWIG_2;
extern(C) void function(void* jarg1, float jarg2) DistortionConfig_SetCoefficients__SWIG_3;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4, float jarg5) DistortionConfig_SetChromaticAberration__SWIG_0;
extern(C) void function(void* jarg1, float jarg2, float jarg3, float jarg4) DistortionConfig_SetChromaticAberration__SWIG_1;
extern(C) void function(void* jarg1, float jarg2, float jarg3) DistortionConfig_SetChromaticAberration__SWIG_2;
extern(C) void function(void* jarg1, float jarg2) DistortionConfig_SetChromaticAberration__SWIG_3;
extern(C) void function(void* jarg1) DistortionConfig_SetChromaticAberration__SWIG_4;
extern(C) float function(void* jarg1, float jarg2) DistortionConfig_DistortionFn;
extern(C) float function(void* jarg1, float jarg2) DistortionConfig_DistortionFnInverse;
extern(C) void function(void* jarg1, void* jarg2) DistortionConfig_K_set;
extern(C) void* function(void* jarg1) DistortionConfig_K_get;
extern(C) void function(void* jarg1, float jarg2) DistortionConfig_XCenterOffset_set;
extern(C) float function(void* jarg1) DistortionConfig_XCenterOffset_get;
extern(C) void function(void* jarg1, float jarg2) DistortionConfig_YCenterOffset_set;
extern(C) float function(void* jarg1) DistortionConfig_YCenterOffset_get;
extern(C) void function(void* jarg1, float jarg2) DistortionConfig_Scale_set;
extern(C) float function(void* jarg1) DistortionConfig_Scale_get;
extern(C) void function(void* jarg1, void* jarg2) DistortionConfig_ChromaticAberration_set;
extern(C) void* function(void* jarg1) DistortionConfig_ChromaticAberration_get;
extern(C) void function(void* jarg1) delete_DistortionConfig;
extern(C) void function(void* jarg1, int jarg2) StereoEyeParams_Eye_set;
extern(C) int function(void* jarg1) StereoEyeParams_Eye_get;
extern(C) void function(void* jarg1, void* jarg2) StereoEyeParams_VP_set;
extern(C) void* function(void* jarg1) StereoEyeParams_VP_get;
extern(C) void function(void* jarg1, void* jarg2) StereoEyeParams_pDistortion_set;
extern(C) void* function(void* jarg1) StereoEyeParams_pDistortion_get;
extern(C) void function(void* jarg1, void* jarg2) StereoEyeParams_ViewAdjust_set;
extern(C) void* function(void* jarg1) StereoEyeParams_ViewAdjust_get;
extern(C) void function(void* jarg1, void* jarg2) StereoEyeParams_Projection_set;
extern(C) void* function(void* jarg1) StereoEyeParams_Projection_get;
extern(C) void function(void* jarg1, void* jarg2) StereoEyeParams_OrthoProjection_set;
extern(C) void* function(void* jarg1) StereoEyeParams_OrthoProjection_get;
extern(C) void function(void* jarg1, int jarg2, void* jarg3, float jarg4, void* jarg5, void* jarg6, void* jarg7) StereoEyeParams_Init__SWIG_0;
extern(C) void function(void* jarg1, int jarg2, void* jarg3, float jarg4, void* jarg5, void* jarg6) StereoEyeParams_Init__SWIG_1;
extern(C) void* function() new_StereoEyeParams;
extern(C) void function(void* jarg1) delete_StereoEyeParams;
extern(C) void* function(int jarg1, void* jarg2) new_StereoConfig__SWIG_0;
extern(C) void* function(int jarg1) new_StereoConfig__SWIG_1;
extern(C) void* function() new_StereoConfig__SWIG_2;
extern(C) void function(void* jarg1, int jarg2) StereoConfig_SetStereoMode;
extern(C) int function(void* jarg1) StereoConfig_GetStereoMode;
extern(C) void function(void* jarg1, void* jarg2) StereoConfig_SetHMDInfo;
extern(C) void* function(void* jarg1) StereoConfig_GetHMDInfo;
extern(C) float function(void* jarg1) StereoConfig_GetEyeToScreenDistance;
extern(C) void function(void* jarg1, float jarg2) StereoConfig_SetEyeToScreenDistance;
extern(C) void function(void* jarg1, float jarg2) StereoConfig_SetIPD;
extern(C) float function(void* jarg1) StereoConfig_GetIPD;
extern(C) void function(void* jarg1, void* jarg2) StereoConfig_SetFullViewport;
extern(C) void* function(void* jarg1) StereoConfig_GetFullViewport;
extern(C) void function(void* jarg1, float jarg2) StereoConfig_SetAspectMultiplier;
extern(C) float function(void* jarg1) StereoConfig_GetAspectMultiplier;
extern(C) void function(void* jarg1, float jarg2, float jarg3) StereoConfig_SetDistortionFitPointVP;
extern(C) void function(void* jarg1, float jarg2, float jarg3) StereoConfig_SetDistortionFitPointPixels;
extern(C) void function(void* jarg1, void* jarg2) StereoConfig_SetDistortionConfig;
extern(C) void function(void* jarg1, int jarg2, float jarg3) StereoConfig_SetDistortionK;
extern(C) float function(void* jarg1, int jarg2) StereoConfig_GetDistortionK;
extern(C) void function(void* jarg1, float jarg2) StereoConfig_Set2DAreaFov;
extern(C) float function(void* jarg1) StereoConfig_GetAspect;
extern(C) float function(void* jarg1) StereoConfig_GetYFOVRadians;
extern(C) float function(void* jarg1) StereoConfig_GetYFOVDegrees;
extern(C) float function(void* jarg1) StereoConfig_GetProjectionCenterOffset;
extern(C) void* function(void* jarg1) StereoConfig_GetDistortionConfig;
extern(C) float function(void* jarg1) StereoConfig_GetDistortionScale;
extern(C) float function(void* jarg1) StereoConfig_Get2DUnitPixel;
extern(C) void* function(void* jarg1, int jarg2) StereoConfig_GetEyeRenderParams;
extern(C) void function(void* jarg1) delete_StereoConfig;
extern(C) void function(void* jarg1, int jarg2) JSON_Type_set;
extern(C) int function(void* jarg1) JSON_Type_get;
extern(C) void function(void* jarg1, void* jarg2) JSON_Name_set;
extern(C) void* function(void* jarg1) JSON_Name_get;
extern(C) void function(void* jarg1, void* jarg2) JSON_Value_set;
extern(C) void* function(void* jarg1) JSON_Value_get;
extern(C) void function(void* jarg1, double jarg2) JSON_dValue_set;
extern(C) double function(void* jarg1) JSON_dValue_get;
extern(C) void function(void* jarg1) delete_JSON;
extern(C) void* function() JSON_CreateObject;
extern(C) void* function() JSON_CreateNull;
extern(C) void* function() JSON_CreateArray;
extern(C) void* function(uint jarg1) JSON_CreateBool;
extern(C) void* function(double jarg1) JSON_CreateNumber;
extern(C) void* function(const(char)* jarg1) JSON_CreateString;
extern(C) void* function(const(char)* jarg1, void* jarg2) JSON_Parse__SWIG_0;
extern(C) void* function(const(char)* jarg1) JSON_Parse__SWIG_1;
extern(C) void* function(const(char)* jarg1, void* jarg2) JSON_Load__SWIG_0;
extern(C) void* function(const(char)* jarg1) JSON_Load__SWIG_1;
extern(C) uint function(void* jarg1, const(char)* jarg2) JSON_Save;
extern(C) uint function(void* jarg1) JSON_HasItems;
extern(C) void* function(void* jarg1) JSON_GetFirstItem;
extern(C) void* function(void* jarg1) JSON_GetLastItem;
extern(C) uint function(void* jarg1) JSON_GetItemCount;
extern(C) void* function(void* jarg1, uint jarg2) JSON_GetItemByIndex;
extern(C) void* function(void* jarg1, const(char)* jarg2) JSON_GetItemByName;
extern(C) void* function(void* jarg1, void* jarg2) JSON_GetNextItem;
extern(C) void* function(void* jarg1, void* jarg2) JSON_GetPrevItem;
extern(C) void function(void* jarg1, const(char)* jarg2, void* jarg3) JSON_AddItem;
extern(C) void function(void* jarg1, const(char)* jarg2) JSON_AddNullItem;
extern(C) void function(void* jarg1, const(char)* jarg2, uint jarg3) JSON_AddBoolItem;
extern(C) void function(void* jarg1, const(char)* jarg2, double jarg3) JSON_AddNumberItem;
extern(C) void function(void* jarg1, const(char)* jarg2, const(char)* jarg3) JSON_AddStringItem;
extern(C) void function(void* jarg1, void* jarg2) JSON_AddArrayElement;
extern(C) void function(void* jarg1, double jarg2) JSON_AddArrayNumber;
extern(C) void function(void* jarg1, const(char)* jarg2) JSON_AddArrayString;
extern(C) int function(void* jarg1) JSON_GetArraySize;
extern(C) double function(void* jarg1, int jarg2) JSON_GetArrayNumber;
extern(C) const(char)* function(void* jarg1, int jarg2) JSON_GetArrayString;

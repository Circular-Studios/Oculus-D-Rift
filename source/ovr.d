/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

module ovr;

static import ovr_im;
static import core.stdc.config;

static import std.conv;
static import std.string;


enum LogMaskConstants {
  LogMask_Regular = 0x100,
  LogMask_Debug = 0x200,
  LogMask_None = 0,
  LogMask_All = LogMask_Regular|LogMask_Debug
}

enum LogMessageType {
  Log_Text = OVR::LogMask_Regular|0,
  Log_Error = OVR::LogMask_Regular|1,
  Log_DebugText = OVR::LogMask_Debug|0,
  Log_Debug = OVR::LogMask_Debug|1,
  Log_Assert = OVR::LogMask_Debug|2
}

class Log {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Log obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_Log(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum {
    MaxLogBufferMessageSize = 2048
  }

  public this(uint logMask) {
    this(ovr_im.new_Log__SWIG_0(logMask), true);
  }

  public this() {
    this(ovr_im.new_Log__SWIG_1(), true);
  }

  public uint GetLoggingMask() const {
    auto ret = ovr_im.Log_GetLoggingMask(cast(void*)swigCPtr);
    return ret;
  }

  public void SetLoggingMask(uint logMask) {
    ovr_im.Log_SetLoggingMask(cast(void*)swigCPtr, logMask);
  }

  public void LogMessageVarg(LogMessageType messageType, string fmt, SWIGTYPE_p_va_list argList) {
    ovr_im.Log_LogMessageVarg(cast(void*)swigCPtr, cast(int)messageType, (fmt ? std.string.toStringz(fmt) : null), SWIGTYPE_p_va_list.swigGetCPtr(argList));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void LogMessage(LogMessageType messageType, string fmt) {
    ovr_im.Log_LogMessage(cast(void*)swigCPtr, cast(int)messageType, (fmt ? std.string.toStringz(fmt) : null));
  }

  public static void FormatLog(string buffer, uint bufferSize, LogMessageType messageType, string fmt, SWIGTYPE_p_va_list argList) {
    ovr_im.Log_FormatLog((buffer ? std.string.toStringz(buffer) : null), bufferSize, cast(int)messageType, (fmt ? std.string.toStringz(fmt) : null), SWIGTYPE_p_va_list.swigGetCPtr(argList));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public static void DefaultLogOutput(string textBuffer, bool arg1) {
    ovr_im.Log_DefaultLogOutput((textBuffer ? std.string.toStringz(textBuffer) : null), arg1);
  }

  public static bool IsDebugMessage(LogMessageType messageType) {
    bool ret = ovr_im.Log_IsDebugMessage(cast(int)messageType) ? true : false;
    return ret;
  }

  public static void SetGlobalLog(Log log) {
    ovr_im.Log_SetGlobalLog(Log.swigGetCPtr(log));
  }

  public static Log GetGlobalLog() {
    void* cPtr = ovr_im.Log_GetGlobalLog();
    Log ret = (cPtr is null) ? null : new Log(cPtr, false);
    return ret;
  }

  public static Log GetDefaultLog() {
    void* cPtr = ovr_im.Log_GetDefaultLog();
    Log ret = (cPtr is null) ? null : new Log(cPtr, false);
    return ret;
  }

  public static Log ConfigureDefaultLog(uint logMask) {
    void* cPtr = ovr_im.Log_ConfigureDefaultLog__SWIG_0(logMask);
    Log ret = (cPtr is null) ? null : new Log(cPtr, false);
    return ret;
  }

  public static Log ConfigureDefaultLog() {
    void* cPtr = ovr_im.Log_ConfigureDefaultLog__SWIG_1();
    Log ret = (cPtr is null) ? null : new Log(cPtr, false);
    return ret;
  }
}

void LogText(string fmt) {
  ovr_im.LogText((fmt ? std.string.toStringz(fmt) : null));
}

void LogError(string fmt) {
  ovr_im.LogError((fmt ? std.string.toStringz(fmt) : null));
}

class Allocator {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Allocator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_Allocator(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void* Alloc(size_t size) {
    auto ret = cast(void*)ovr_im.Allocator_Alloc(cast(void*)swigCPtr, size);
    return ret;
  }

  public void* AllocDebug(size_t size, string file, uint line) {
    auto ret = cast(void*)ovr_im.Allocator_AllocDebug(cast(void*)swigCPtr, size, (file ? std.string.toStringz(file) : null), line);
    return ret;
  }

  public void* Realloc(void* p, size_t newSize) {
    auto ret = cast(void*)ovr_im.Allocator_Realloc(cast(void*)swigCPtr, cast(void*)p, newSize);
    return ret;
  }

  public void Free(void* p) {
    ovr_im.Allocator_Free(cast(void*)swigCPtr, cast(void*)p);
  }

  public void* AllocAligned(size_t size, size_t arg1) {
    auto ret = cast(void*)ovr_im.Allocator_AllocAligned(cast(void*)swigCPtr, size, arg1);
    return ret;
  }

  public void FreeAligned(void* p) {
    ovr_im.Allocator_FreeAligned(cast(void*)swigCPtr, cast(void*)p);
  }

  public static Allocator GetInstance() {
    void* cPtr = ovr_im.Allocator_GetInstance();
    Allocator ret = (cPtr is null) ? null : new Allocator(cPtr, false);
    return ret;
  }

  public static void setInstance(Allocator palloc) {
    ovr_im.Allocator_setInstance(Allocator.swigGetCPtr(palloc));
  }
}

class DefaultAllocator {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(DefaultAllocator obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_DefaultAllocator(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void* Alloc(size_t size) {
    auto ret = cast(void*)ovr_im.DefaultAllocator_Alloc(cast(void*)swigCPtr, size);
    return ret;
  }

  public void* AllocDebug(size_t size, string file, uint line) {
    auto ret = cast(void*)ovr_im.DefaultAllocator_AllocDebug(cast(void*)swigCPtr, size, (file ? std.string.toStringz(file) : null), line);
    return ret;
  }

  public void* Realloc(void* p, size_t newSize) {
    auto ret = cast(void*)ovr_im.DefaultAllocator_Realloc(cast(void*)swigCPtr, cast(void*)p, newSize);
    return ret;
  }

  public void Free(void* p) {
    ovr_im.DefaultAllocator_Free(cast(void*)swigCPtr, cast(void*)p);
  }

  public this() {
    this(ovr_im.new_DefaultAllocator(), true);
  }
}

class NewOverrideBase {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(NewOverrideBase obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_NewOverrideBase(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(ovr_im.new_NewOverrideBase(), true);
  }
}

class System {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(System obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_System(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(Log log, Allocator palloc) {
    this(ovr_im.new_System__SWIG_0(Log.swigGetCPtr(log), Allocator.swigGetCPtr(palloc)), true);
  }

  public this(Log log) {
    this(ovr_im.new_System__SWIG_1(Log.swigGetCPtr(log)), true);
  }

  public this() {
    this(ovr_im.new_System__SWIG_2(), true);
  }

  public static bool IsInitialized() {
    bool ret = ovr_im.System_IsInitialized() ? true : false;
    return ret;
  }

  public static void Init(Log log, Allocator palloc) {
    ovr_im.System_Init__SWIG_0(Log.swigGetCPtr(log), Allocator.swigGetCPtr(palloc));
  }

  public static void Init(Log log) {
    ovr_im.System_Init__SWIG_1(Log.swigGetCPtr(log));
  }

  public static void Init() {
    ovr_im.System_Init__SWIG_2();
  }

  public static void Destroy() {
    ovr_im.System_Destroy();
  }
}

enum Axis {
  Axis_X = 0,
  Axis_Y = 1,
  Axis_Z = 2
}

enum RotateDirection {
  Rotate_CCW = 1,
  Rotate_CW = -1
}

enum HandedSystem {
  Handed_R = 1,
  Handed_L = -1
}

enum AxisDirection {
  Axis_Up = 2,
  Axis_Down = -2,
  Axis_Right = 1,
  Axis_Left = -1,
  Axis_In = 3,
  Axis_Out = -3
}

class WorldAxes {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(WorldAxes obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_WorldAxes(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void XAxis(AxisDirection value) @property {
    ovr_im.WorldAxes_XAxis_set(cast(void*)swigCPtr, cast(int)value);
  }

  public AxisDirection XAxis() @property const {
    AxisDirection ret = cast(AxisDirection)ovr_im.WorldAxes_XAxis_get(cast(void*)swigCPtr);
    return ret;
  }

  public void YAxis(AxisDirection value) @property {
    ovr_im.WorldAxes_YAxis_set(cast(void*)swigCPtr, cast(int)value);
  }

  public AxisDirection YAxis() @property const {
    AxisDirection ret = cast(AxisDirection)ovr_im.WorldAxes_YAxis_get(cast(void*)swigCPtr);
    return ret;
  }

  public void ZAxis(AxisDirection value) @property {
    ovr_im.WorldAxes_ZAxis_set(cast(void*)swigCPtr, cast(int)value);
  }

  public AxisDirection ZAxis() @property const {
    AxisDirection ret = cast(AxisDirection)ovr_im.WorldAxes_ZAxis_get(cast(void*)swigCPtr);
    return ret;
  }

  public this(AxisDirection x, AxisDirection y, AxisDirection z) {
    this(ovr_im.new_WorldAxes(cast(int)x, cast(int)y, cast(int)z), true);
  }
}

class Matrix4f {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Matrix4f obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_Matrix4f(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum NoInitType {
    NoInit
  }

  public void M(SWIGTYPE_p_a_4__float value) @property {
    ovr_im.Matrix4f_M_set(cast(void*)swigCPtr, SWIGTYPE_p_a_4__float.swigGetCPtr(value));
  }

  public SWIGTYPE_p_a_4__float M() @property const {
    void* cPtr = ovr_im.Matrix4f_M_get(cast(void*)swigCPtr);
    SWIGTYPE_p_a_4__float ret = (cPtr is null) ? null : new SWIGTYPE_p_a_4__float(cPtr, false);
    return ret;
  }

  public this(Matrix4f.NoInitType arg0) {
    this(ovr_im.new_Matrix4f__SWIG_0(cast(int)arg0), true);
  }

  public this() {
    this(ovr_im.new_Matrix4f__SWIG_1(), true);
  }

  public this(float m11, float m12, float m13, float m14, float m21, float m22, float m23, float m24, float m31, float m32, float m33, float m34, float m41, float m42, float m43, float m44) {
    this(ovr_im.new_Matrix4f__SWIG_2(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44), true);
  }

  public this(float m11, float m12, float m13, float m21, float m22, float m23, float m31, float m32, float m33) {
    this(ovr_im.new_Matrix4f__SWIG_3(m11, m12, m13, m21, m22, m23, m31, m32, m33), true);
  }

  public void ToString(string dest, size_t destsize) {
    ovr_im.Matrix4f_ToString(cast(void*)swigCPtr, (dest ? std.string.toStringz(dest) : null), destsize);
  }

  public static Matrix4f FromString(string src) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_FromString((src ? std.string.toStringz(src) : null)), true);
    return ret;
  }

  public static Matrix4f Identity() {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_Identity(), false);
    return ret;
  }

  public void SetIdentity() {
    ovr_im.Matrix4f_SetIdentity(cast(void*)swigCPtr);
  }

  public Matrix4f swigOpAdd(Matrix4f b) const {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_swigOpAdd(cast(void*)swigCPtr, Matrix4f.swigGetCPtr(b)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public Matrix4f swigOpAddAssign(Matrix4f b) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_swigOpAddAssign(cast(void*)swigCPtr, Matrix4f.swigGetCPtr(b)), false);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public Matrix4f swigOpSub(Matrix4f b) const {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_swigOpSub(cast(void*)swigCPtr, Matrix4f.swigGetCPtr(b)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public Matrix4f swigOpSubAssign(Matrix4f b) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_swigOpSubAssign(cast(void*)swigCPtr, Matrix4f.swigGetCPtr(b)), false);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Matrix4f Multiply(Matrix4f d, Matrix4f a, Matrix4f b) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_Multiply(Matrix4f.swigGetCPtr(d), Matrix4f.swigGetCPtr(a), Matrix4f.swigGetCPtr(b)), false);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public Matrix4f swigOpMul(Matrix4f b) const {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_swigOpMul__SWIG_0(cast(void*)swigCPtr, Matrix4f.swigGetCPtr(b)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public Matrix4f swigOpMulAssign(Matrix4f b) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_swigOpMulAssign__SWIG_0(cast(void*)swigCPtr, Matrix4f.swigGetCPtr(b)), false);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public Matrix4f swigOpMul(float s) const {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_swigOpMul__SWIG_1(cast(void*)swigCPtr, s), true);
    return ret;
  }

  public Matrix4f swigOpMulAssign(float s) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_swigOpMulAssign__SWIG_1(cast(void*)swigCPtr, s), false);
    return ret;
  }

  public Matrix4f swigOpDiv(float s) const {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_swigOpDiv(cast(void*)swigCPtr, s), true);
    return ret;
  }

  public Matrix4f swigOpDivAssign(float s) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_swigOpDivAssign(cast(void*)swigCPtr, s), false);
    return ret;
  }

  public SWIGTYPE_p_OVR__Vector3T_float_t Transform(SWIGTYPE_p_OVR__Vector3T_float_t v) const {
    SWIGTYPE_p_OVR__Vector3T_float_t ret = new SWIGTYPE_p_OVR__Vector3T_float_t(ovr_im.Matrix4f_Transform(cast(void*)swigCPtr, SWIGTYPE_p_OVR__Vector3T_float_t.swigGetCPtr(v)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public Matrix4f Transposed() const {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_Transposed(cast(void*)swigCPtr), true);
    return ret;
  }

  public void Transpose() {
    ovr_im.Matrix4f_Transpose(cast(void*)swigCPtr);
  }

  public float SubDet(size_t* rows, size_t* cols) const {
    auto ret = ovr_im.Matrix4f_SubDet(cast(void*)swigCPtr, cast(void*)rows, cast(void*)cols);
    return ret;
  }

  public float Cofactor(size_t I, size_t J) const {
    auto ret = ovr_im.Matrix4f_Cofactor(cast(void*)swigCPtr, I, J);
    return ret;
  }

  public float Determinant() const {
    auto ret = ovr_im.Matrix4f_Determinant(cast(void*)swigCPtr);
    return ret;
  }

  public Matrix4f Adjugated() const {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_Adjugated(cast(void*)swigCPtr), true);
    return ret;
  }

  public Matrix4f Inverted() const {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_Inverted(cast(void*)swigCPtr), true);
    return ret;
  }

  public void Invert() {
    ovr_im.Matrix4f_Invert(cast(void*)swigCPtr);
  }

  public Matrix4f InvertedHomogeneousTransform() const {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_InvertedHomogeneousTransform(cast(void*)swigCPtr), true);
    return ret;
  }

  public void InvertHomogeneousTransform() {
    ovr_im.Matrix4f_InvertHomogeneousTransform(cast(void*)swigCPtr);
  }

  public static Matrix4f AxisConversion(WorldAxes to, WorldAxes from) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_AxisConversion(WorldAxes.swigGetCPtr(to), WorldAxes.swigGetCPtr(from)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Matrix4f Translation(SWIGTYPE_p_OVR__Vector3T_float_t v) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_Translation__SWIG_0(SWIGTYPE_p_OVR__Vector3T_float_t.swigGetCPtr(v)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Matrix4f Translation(float x, float y, float z) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_Translation__SWIG_1(x, y, z), true);
    return ret;
  }

  public static Matrix4f Translation(float x, float y) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_Translation__SWIG_2(x, y), true);
    return ret;
  }

  public static Matrix4f Scaling(SWIGTYPE_p_OVR__Vector3T_float_t v) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_Scaling__SWIG_0(SWIGTYPE_p_OVR__Vector3T_float_t.swigGetCPtr(v)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Matrix4f Scaling(float x, float y, float z) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_Scaling__SWIG_1(x, y, z), true);
    return ret;
  }

  public static Matrix4f Scaling(float s) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_Scaling__SWIG_2(s), true);
    return ret;
  }

  public static Matrix4f RotationAxis(Axis A, float angle, RotateDirection d, HandedSystem s) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_RotationAxis(cast(int)A, angle, cast(int)d, cast(int)s), true);
    return ret;
  }

  public static Matrix4f RotationX(float angle) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_RotationX(angle), true);
    return ret;
  }

  public static Matrix4f RotationY(float angle) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_RotationY(angle), true);
    return ret;
  }

  public static Matrix4f RotationZ(float angle) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_RotationZ(angle), true);
    return ret;
  }

  public static Matrix4f LookAtRH(SWIGTYPE_p_OVR__Vector3T_float_t eye, SWIGTYPE_p_OVR__Vector3T_float_t at, SWIGTYPE_p_OVR__Vector3T_float_t up) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_LookAtRH(SWIGTYPE_p_OVR__Vector3T_float_t.swigGetCPtr(eye), SWIGTYPE_p_OVR__Vector3T_float_t.swigGetCPtr(at), SWIGTYPE_p_OVR__Vector3T_float_t.swigGetCPtr(up)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Matrix4f LookAtLH(SWIGTYPE_p_OVR__Vector3T_float_t eye, SWIGTYPE_p_OVR__Vector3T_float_t at, SWIGTYPE_p_OVR__Vector3T_float_t up) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_LookAtLH(SWIGTYPE_p_OVR__Vector3T_float_t.swigGetCPtr(eye), SWIGTYPE_p_OVR__Vector3T_float_t.swigGetCPtr(at), SWIGTYPE_p_OVR__Vector3T_float_t.swigGetCPtr(up)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public static Matrix4f PerspectiveRH(float yfov, float aspect, float znear, float zfar) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_PerspectiveRH(yfov, aspect, znear, zfar), true);
    return ret;
  }

  public static Matrix4f PerspectiveLH(float yfov, float aspect, float znear, float zfar) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_PerspectiveLH(yfov, aspect, znear, zfar), true);
    return ret;
  }

  public static Matrix4f Ortho2D(float w, float h) {
    Matrix4f ret = new Matrix4f(ovr_im.Matrix4f_Ortho2D(w, h), true);
    return ret;
  }
}

class AtomicOpsRawBase {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(AtomicOpsRawBase obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_AtomicOpsRawBase(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(ovr_im.new_AtomicOpsRawBase(), true);
  }
}

class AtomicOpsRaw_4ByteImpl : AtomicOpsRawBase {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.AtomicOpsRaw_4ByteImpl_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(AtomicOpsRaw_4ByteImpl obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_AtomicOpsRaw_4ByteImpl(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(ovr_im.new_AtomicOpsRaw_4ByteImpl(), true);
  }
}

class AtomicOpsRaw_8ByteImpl : AtomicOpsRawBase {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.AtomicOpsRaw_8ByteImpl_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(AtomicOpsRaw_8ByteImpl obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_AtomicOpsRaw_8ByteImpl(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(ovr_im.new_AtomicOpsRaw_8ByteImpl(), true);
  }
}

class Lock {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Lock obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_Lock(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public static void RecursiveAttr(SWIGTYPE_p_pthread_mutexattr_t value) @property {
    ovr_im.Lock_RecursiveAttr_set(SWIGTYPE_p_pthread_mutexattr_t.swigGetCPtr(value));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public static SWIGTYPE_p_pthread_mutexattr_t RecursiveAttr() @property {
    SWIGTYPE_p_pthread_mutexattr_t ret = new SWIGTYPE_p_pthread_mutexattr_t(ovr_im.Lock_RecursiveAttr_get(), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public static void RecursiveAttrInit(bool value) @property {
    ovr_im.Lock_RecursiveAttrInit_set(value);
  }

  public static bool RecursiveAttrInit() @property {
    bool ret = ovr_im.Lock_RecursiveAttrInit_get() ? true : false;
    return ret;
  }

  public this(uint dummy) {
    this(ovr_im.new_Lock__SWIG_0(dummy), true);
  }

  public this() {
    this(ovr_im.new_Lock__SWIG_1(), true);
  }

  public void DoLock() {
    ovr_im.Lock_DoLock(cast(void*)swigCPtr);
  }

  public void Unlock() {
    ovr_im.Lock_Unlock(cast(void*)swigCPtr);
  }
}

class String {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(String obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_String(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(ovr_im.new_String__SWIG_1(), true);
  }

  public this(string data) {
    this(ovr_im.new_String__SWIG_2((data ? std.string.toStringz(data) : null)), true);
  }

  public this(string data1, string pdata2, string pdata3) {
    this(ovr_im.new_String__SWIG_3((data1 ? std.string.toStringz(data1) : null), (pdata2 ? std.string.toStringz(pdata2) : null), (pdata3 ? std.string.toStringz(pdata3) : null)), true);
  }

  public this(string data1, string pdata2) {
    this(ovr_im.new_String__SWIG_4((data1 ? std.string.toStringz(data1) : null), (pdata2 ? std.string.toStringz(pdata2) : null)), true);
  }

  public this(string data, size_t buflen) {
    this(ovr_im.new_String__SWIG_5((data ? std.string.toStringz(data) : null), buflen), true);
  }

  public this(String src) {
    this(ovr_im.new_String__SWIG_6(String.swigGetCPtr(src)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public this(StringBuffer src) {
    this(ovr_im.new_String__SWIG_7(StringBuffer.swigGetCPtr(src)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public this(SWIGTYPE_p_OVR__String__InitStruct src, size_t size) {
    this(ovr_im.new_String__SWIG_8(SWIGTYPE_p_OVR__String__InitStruct.swigGetCPtr(src), size), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public this(SWIGTYPE_p_wchar_t data) {
    this(ovr_im.new_String__SWIG_9(SWIGTYPE_p_wchar_t.swigGetCPtr(data)), true);
  }

  public static void NullData(SWIGTYPE_p_DataDesc value) @property {
    ovr_im.String_NullData_set(SWIGTYPE_p_DataDesc.swigGetCPtr(value));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public static SWIGTYPE_p_DataDesc NullData() @property {
    SWIGTYPE_p_DataDesc ret = new SWIGTYPE_p_DataDesc(ovr_im.String_NullData_get(), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Clear() {
    ovr_im.String_Clear(cast(void*)swigCPtr);
  }

  public string ToCStr() const {
    string ret = std.conv.to!string(ovr_im.String_ToCStr(cast(void*)swigCPtr));
    return ret;
  }

  public size_t GetSize() const {
    auto ret = ovr_im.String_GetSize(cast(void*)swigCPtr);
    return ret;
  }

  public bool IsEmpty() const {
    bool ret = ovr_im.String_IsEmpty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public size_t GetLength() const {
    auto ret = ovr_im.String_GetLength(cast(void*)swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_uint32_t GetCharAt(size_t index) const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(ovr_im.String_GetCharAt(cast(void*)swigCPtr, index), true);
    return ret;
  }

  public SWIGTYPE_p_uint32_t GetFirstCharAt(size_t index, char** offset) const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(ovr_im.String_GetFirstCharAt(cast(void*)swigCPtr, index, cast(void*)offset), true);
    return ret;
  }

  public SWIGTYPE_p_uint32_t GetNextChar(char** offset) const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(ovr_im.String_GetNextChar(cast(void*)swigCPtr, cast(void*)offset), true);
    return ret;
  }

  public void AppendChar(SWIGTYPE_p_uint32_t ch) {
    ovr_im.String_AppendChar(cast(void*)swigCPtr, SWIGTYPE_p_uint32_t.swigGetCPtr(ch));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void AppendString(SWIGTYPE_p_wchar_t pstr, SWIGTYPE_p_ptrdiff_t len) {
    ovr_im.String_AppendString__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_wchar_t.swigGetCPtr(pstr), SWIGTYPE_p_ptrdiff_t.swigGetCPtr(len));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void AppendString(SWIGTYPE_p_wchar_t pstr) {
    ovr_im.String_AppendString__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_wchar_t.swigGetCPtr(pstr));
  }

  public void AppendString(string putf8str, SWIGTYPE_p_ptrdiff_t utf8StrSz) {
    ovr_im.String_AppendString__SWIG_2(cast(void*)swigCPtr, (putf8str ? std.string.toStringz(putf8str) : null), SWIGTYPE_p_ptrdiff_t.swigGetCPtr(utf8StrSz));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void AppendString(string putf8str) {
    ovr_im.String_AppendString__SWIG_3(cast(void*)swigCPtr, (putf8str ? std.string.toStringz(putf8str) : null));
  }

  public void AssignString(SWIGTYPE_p_OVR__String__InitStruct src, size_t size) {
    ovr_im.String_AssignString__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_OVR__String__InitStruct.swigGetCPtr(src), size);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void AssignString(string putf8str, size_t size) {
    ovr_im.String_AssignString__SWIG_1(cast(void*)swigCPtr, (putf8str ? std.string.toStringz(putf8str) : null), size);
  }

  public void Remove(size_t posAt, SWIGTYPE_p_ptrdiff_t len) {
    ovr_im.String_Remove__SWIG_0(cast(void*)swigCPtr, posAt, SWIGTYPE_p_ptrdiff_t.swigGetCPtr(len));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void Remove(size_t posAt) {
    ovr_im.String_Remove__SWIG_1(cast(void*)swigCPtr, posAt);
  }

  public String Substring(size_t start, size_t end) const {
    String ret = new String(ovr_im.String_Substring(cast(void*)swigCPtr, start, end), true);
    return ret;
  }

  public String ToUpper() const {
    String ret = new String(ovr_im.String_ToUpper(cast(void*)swigCPtr), true);
    return ret;
  }

  public String ToLower() const {
    String ret = new String(ovr_im.String_ToLower(cast(void*)swigCPtr), true);
    return ret;
  }

  public String Insert(string substr, size_t posAt, SWIGTYPE_p_ptrdiff_t len) {
    String ret = new String(ovr_im.String_Insert__SWIG_0(cast(void*)swigCPtr, (substr ? std.string.toStringz(substr) : null), posAt, SWIGTYPE_p_ptrdiff_t.swigGetCPtr(len)), false);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public String Insert(string substr, size_t posAt) {
    String ret = new String(ovr_im.String_Insert__SWIG_1(cast(void*)swigCPtr, (substr ? std.string.toStringz(substr) : null), posAt), false);
    return ret;
  }

  public size_t InsertCharAt(SWIGTYPE_p_uint32_t c, size_t posAt) {
    auto ret = ovr_im.String_InsertCharAt(cast(void*)swigCPtr, SWIGTYPE_p_uint32_t.swigGetCPtr(c), posAt);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public size_t GetByteIndex(size_t index) const {
    auto ret = ovr_im.String_GetByteIndex(cast(void*)swigCPtr, index);
    return ret;
  }

  public static int CompareNoCase(string a, string b) {
    auto ret = ovr_im.String_CompareNoCase__SWIG_0((a ? std.string.toStringz(a) : null), (b ? std.string.toStringz(b) : null));
    return ret;
  }

  public static int CompareNoCase(string a, string b, SWIGTYPE_p_ptrdiff_t len) {
    auto ret = ovr_im.String_CompareNoCase__SWIG_1((a ? std.string.toStringz(a) : null), (b ? std.string.toStringz(b) : null), SWIGTYPE_p_ptrdiff_t.swigGetCPtr(len));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public static size_t BernsteinHashFunctionCIS(void* pdataIn, size_t size, size_t seed) {
    auto ret = ovr_im.String_BernsteinHashFunctionCIS__SWIG_0(cast(void*)pdataIn, size, seed);
    return ret;
  }

  public static size_t BernsteinHashFunctionCIS(void* pdataIn, size_t size) {
    auto ret = ovr_im.String_BernsteinHashFunctionCIS__SWIG_1(cast(void*)pdataIn, size);
    return ret;
  }

  public static size_t BernsteinHashFunction(void* pdataIn, size_t size, size_t seed) {
    auto ret = ovr_im.String_BernsteinHashFunction__SWIG_0(cast(void*)pdataIn, size, seed);
    return ret;
  }

  public static size_t BernsteinHashFunction(void* pdataIn, size_t size) {
    auto ret = ovr_im.String_BernsteinHashFunction__SWIG_1(cast(void*)pdataIn, size);
    return ret;
  }

  public static bool HasAbsolutePath(string path) {
    bool ret = ovr_im.String_HasAbsolutePath__SWIG_0((path ? std.string.toStringz(path) : null)) ? true : false;
    return ret;
  }

  public static bool HasExtension(string path) {
    bool ret = ovr_im.String_HasExtension__SWIG_0((path ? std.string.toStringz(path) : null)) ? true : false;
    return ret;
  }

  public static bool HasProtocol(string path) {
    bool ret = ovr_im.String_HasProtocol__SWIG_0((path ? std.string.toStringz(path) : null)) ? true : false;
    return ret;
  }

  public bool HasAbsolutePath() const {
    bool ret = ovr_im.String_HasAbsolutePath__SWIG_1(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool HasExtension() const {
    bool ret = ovr_im.String_HasExtension__SWIG_1(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool HasProtocol() const {
    bool ret = ovr_im.String_HasProtocol__SWIG_1(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public String GetProtocol() const {
    String ret = new String(ovr_im.String_GetProtocol(cast(void*)swigCPtr), true);
    return ret;
  }

  public String GetPath() const {
    String ret = new String(ovr_im.String_GetPath(cast(void*)swigCPtr), true);
    return ret;
  }

  public String GetFilename() const {
    String ret = new String(ovr_im.String_GetFilename(cast(void*)swigCPtr), true);
    return ret;
  }

  public String GetExtension() const {
    String ret = new String(ovr_im.String_GetExtension(cast(void*)swigCPtr), true);
    return ret;
  }

  public void StripProtocol() {
    ovr_im.String_StripProtocol(cast(void*)swigCPtr);
  }

  public void StripExtension() {
    ovr_im.String_StripExtension(cast(void*)swigCPtr);
  }

  public void swigOpAddAssign(String src) {
    ovr_im.String_swigOpAddAssign__SWIG_0(cast(void*)swigCPtr, String.swigGetCPtr(src));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void swigOpAddAssign(string psrc) {
    ovr_im.String_swigOpAddAssign__SWIG_1(cast(void*)swigCPtr, (psrc ? std.string.toStringz(psrc) : null));
  }

  public void swigOpAddAssign(SWIGTYPE_p_wchar_t psrc) {
    ovr_im.String_swigOpAddAssign__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_wchar_t.swigGetCPtr(psrc));
  }

  public void swigOpAddAssign(char ch) {
    ovr_im.String_swigOpAddAssign__SWIG_3(cast(void*)swigCPtr, ch);
  }

  public String swigOpAdd(string str) const {
    String ret = new String(ovr_im.String_swigOpAdd__SWIG_0(cast(void*)swigCPtr, (str ? std.string.toStringz(str) : null)), true);
    return ret;
  }

  public String swigOpAdd(String src) const {
    String ret = new String(ovr_im.String_swigOpAdd__SWIG_1(cast(void*)swigCPtr, String.swigGetCPtr(src)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpEquals(String str) const {
    bool ret = ovr_im.String_swigOpEquals__SWIG_0(cast(void*)swigCPtr, String.swigGetCPtr(str)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpEquals(string str) const {
    bool ret = ovr_im.String_swigOpEquals__SWIG_1(cast(void*)swigCPtr, (str ? std.string.toStringz(str) : null)) ? true : false;
    return ret;
  }

  public bool swigOpLt(string pstr) const {
    bool ret = ovr_im.String_swigOpLt__SWIG_0(cast(void*)swigCPtr, (pstr ? std.string.toStringz(pstr) : null)) ? true : false;
    return ret;
  }

  public bool swigOpLt(String str) const {
    bool ret = ovr_im.String_swigOpLt__SWIG_1(cast(void*)swigCPtr, String.swigGetCPtr(str)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool swigOpGt(string pstr) const {
    bool ret = ovr_im.String_swigOpGt__SWIG_0(cast(void*)swigCPtr, (pstr ? std.string.toStringz(pstr) : null)) ? true : false;
    return ret;
  }

  public bool swigOpGt(String str) const {
    bool ret = ovr_im.String_swigOpGt__SWIG_1(cast(void*)swigCPtr, String.swigGetCPtr(str)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public int CompareNoCase(string pstr) const {
    auto ret = ovr_im.String_CompareNoCase__SWIG_2(cast(void*)swigCPtr, (pstr ? std.string.toStringz(pstr) : null));
    return ret;
  }

  public int CompareNoCase(String str) const {
    auto ret = ovr_im.String_CompareNoCase__SWIG_3(cast(void*)swigCPtr, String.swigGetCPtr(str));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public char opIndex(int index) const {
    auto ret = ovr_im.String_opIndex__SWIG_0(cast(void*)swigCPtr, index);
    return ret;
  }

  public char opIndex(size_t index) const {
    auto ret = ovr_im.String_opIndex__SWIG_1(cast(void*)swigCPtr, index);
    return ret;
  }

  public bool swigOpEquals(SWIGTYPE_p_OVR__String__NoCaseKey strKey) const {
    bool ret = ovr_im.String_swigOpEquals__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_OVR__String__NoCaseKey.swigGetCPtr(strKey)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }
}

class StringBuffer {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(StringBuffer obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_StringBuffer(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(ovr_im.new_StringBuffer__SWIG_0(), true);
  }

  public this(size_t growSize) {
    this(ovr_im.new_StringBuffer__SWIG_1(growSize), true);
  }

  public this(string data) {
    this(ovr_im.new_StringBuffer__SWIG_2((data ? std.string.toStringz(data) : null)), true);
  }

  public this(string data, size_t buflen) {
    this(ovr_im.new_StringBuffer__SWIG_3((data ? std.string.toStringz(data) : null), buflen), true);
  }

  public this(String src) {
    this(ovr_im.new_StringBuffer__SWIG_4(String.swigGetCPtr(src)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public this(StringBuffer src) {
    this(ovr_im.new_StringBuffer__SWIG_5(StringBuffer.swigGetCPtr(src)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public this(SWIGTYPE_p_wchar_t data) {
    this(ovr_im.new_StringBuffer__SWIG_6(SWIGTYPE_p_wchar_t.swigGetCPtr(data)), true);
  }

  public size_t GetGrowSize() const {
    auto ret = ovr_im.StringBuffer_GetGrowSize(cast(void*)swigCPtr);
    return ret;
  }

  public void SetGrowSize(size_t growSize) {
    ovr_im.StringBuffer_SetGrowSize(cast(void*)swigCPtr, growSize);
  }

  public void Clear() {
    ovr_im.StringBuffer_Clear(cast(void*)swigCPtr);
  }

  public string ToCStr() const {
    string ret = std.conv.to!string(ovr_im.StringBuffer_ToCStr(cast(void*)swigCPtr));
    return ret;
  }

  public size_t GetSize() const {
    auto ret = ovr_im.StringBuffer_GetSize(cast(void*)swigCPtr);
    return ret;
  }

  public bool IsEmpty() const {
    bool ret = ovr_im.StringBuffer_IsEmpty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public size_t GetLength() const {
    auto ret = ovr_im.StringBuffer_GetLength(cast(void*)swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_uint32_t GetCharAt(size_t index) const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(ovr_im.StringBuffer_GetCharAt(cast(void*)swigCPtr, index), true);
    return ret;
  }

  public SWIGTYPE_p_uint32_t GetFirstCharAt(size_t index, char** offset) const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(ovr_im.StringBuffer_GetFirstCharAt(cast(void*)swigCPtr, index, cast(void*)offset), true);
    return ret;
  }

  public SWIGTYPE_p_uint32_t GetNextChar(char** offset) const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(ovr_im.StringBuffer_GetNextChar(cast(void*)swigCPtr, cast(void*)offset), true);
    return ret;
  }

  public void Resize(size_t _size) {
    ovr_im.StringBuffer_Resize(cast(void*)swigCPtr, _size);
  }

  public void Reserve(size_t _size) {
    ovr_im.StringBuffer_Reserve(cast(void*)swigCPtr, _size);
  }

  public void AppendChar(SWIGTYPE_p_uint32_t ch) {
    ovr_im.StringBuffer_AppendChar(cast(void*)swigCPtr, SWIGTYPE_p_uint32_t.swigGetCPtr(ch));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void AppendString(SWIGTYPE_p_wchar_t pstr, SWIGTYPE_p_ptrdiff_t len) {
    ovr_im.StringBuffer_AppendString__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_wchar_t.swigGetCPtr(pstr), SWIGTYPE_p_ptrdiff_t.swigGetCPtr(len));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void AppendString(SWIGTYPE_p_wchar_t pstr) {
    ovr_im.StringBuffer_AppendString__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_wchar_t.swigGetCPtr(pstr));
  }

  public void AppendString(string putf8str, SWIGTYPE_p_ptrdiff_t utf8StrSz) {
    ovr_im.StringBuffer_AppendString__SWIG_2(cast(void*)swigCPtr, (putf8str ? std.string.toStringz(putf8str) : null), SWIGTYPE_p_ptrdiff_t.swigGetCPtr(utf8StrSz));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void AppendString(string putf8str) {
    ovr_im.StringBuffer_AppendString__SWIG_3(cast(void*)swigCPtr, (putf8str ? std.string.toStringz(putf8str) : null));
  }

  public void AppendFormat(string format) {
    ovr_im.StringBuffer_AppendFormat(cast(void*)swigCPtr, (format ? std.string.toStringz(format) : null));
  }

  public void Insert(string substr, size_t posAt, SWIGTYPE_p_ptrdiff_t len) {
    ovr_im.StringBuffer_Insert__SWIG_0(cast(void*)swigCPtr, (substr ? std.string.toStringz(substr) : null), posAt, SWIGTYPE_p_ptrdiff_t.swigGetCPtr(len));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void Insert(string substr, size_t posAt) {
    ovr_im.StringBuffer_Insert__SWIG_1(cast(void*)swigCPtr, (substr ? std.string.toStringz(substr) : null), posAt);
  }

  public size_t InsertCharAt(SWIGTYPE_p_uint32_t c, size_t posAt) {
    auto ret = ovr_im.StringBuffer_InsertCharAt(cast(void*)swigCPtr, SWIGTYPE_p_uint32_t.swigGetCPtr(c), posAt);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public void swigOpAddAssign(String src) {
    ovr_im.StringBuffer_swigOpAddAssign__SWIG_0(cast(void*)swigCPtr, String.swigGetCPtr(src));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void swigOpAddAssign(string psrc) {
    ovr_im.StringBuffer_swigOpAddAssign__SWIG_1(cast(void*)swigCPtr, (psrc ? std.string.toStringz(psrc) : null));
  }

  public void swigOpAddAssign(SWIGTYPE_p_wchar_t psrc) {
    ovr_im.StringBuffer_swigOpAddAssign__SWIG_2(cast(void*)swigCPtr, SWIGTYPE_p_wchar_t.swigGetCPtr(psrc));
  }

  public void swigOpAddAssign(char ch) {
    ovr_im.StringBuffer_swigOpAddAssign__SWIG_3(cast(void*)swigCPtr, ch);
  }

  public char* opIndex(int index) {
    auto ret = cast(char*)ovr_im.StringBuffer_opIndex__SWIG_0(cast(void*)swigCPtr, index);
    return ret;
  }

  public char* opIndex(size_t index) {
    auto ret = cast(char*)ovr_im.StringBuffer_opIndex__SWIG_1(cast(void*)swigCPtr, index);
    return ret;
  }
}

class StringDataPtr {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(StringDataPtr obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_StringDataPtr(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(ovr_im.new_StringDataPtr__SWIG_0(), true);
  }

  public this(StringDataPtr p) {
    this(ovr_im.new_StringDataPtr__SWIG_1(StringDataPtr.swigGetCPtr(p)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public this(string pstr, size_t sz) {
    this(ovr_im.new_StringDataPtr__SWIG_2((pstr ? std.string.toStringz(pstr) : null), sz), true);
  }

  public this(string pstr) {
    this(ovr_im.new_StringDataPtr__SWIG_3((pstr ? std.string.toStringz(pstr) : null)), true);
  }

  public this(String str) {
    this(ovr_im.new_StringDataPtr__SWIG_4(String.swigGetCPtr(str)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public string ToCStr() const {
    string ret = std.conv.to!string(ovr_im.StringDataPtr_ToCStr(cast(void*)swigCPtr));
    return ret;
  }

  public size_t GetSize() const {
    auto ret = ovr_im.StringDataPtr_GetSize(cast(void*)swigCPtr);
    return ret;
  }

  public bool IsEmpty() const {
    bool ret = ovr_im.StringDataPtr_IsEmpty(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool IsPrefix(StringDataPtr value) const {
    bool ret = ovr_im.StringDataPtr_IsPrefix(cast(void*)swigCPtr, StringDataPtr.swigGetCPtr(value)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool IsSuffix(StringDataPtr value) const {
    bool ret = ovr_im.StringDataPtr_IsSuffix(cast(void*)swigCPtr, StringDataPtr.swigGetCPtr(value)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public SWIGTYPE_p_ptrdiff_t FindChar(char c, size_t init_ind) const {
    SWIGTYPE_p_ptrdiff_t ret = new SWIGTYPE_p_ptrdiff_t(ovr_im.StringDataPtr_FindChar__SWIG_0(cast(void*)swigCPtr, c, init_ind), true);
    return ret;
  }

  public SWIGTYPE_p_ptrdiff_t FindChar(char c) const {
    SWIGTYPE_p_ptrdiff_t ret = new SWIGTYPE_p_ptrdiff_t(ovr_im.StringDataPtr_FindChar__SWIG_1(cast(void*)swigCPtr, c), true);
    return ret;
  }

  public SWIGTYPE_p_ptrdiff_t FindLastChar(char c, size_t init_ind) const {
    SWIGTYPE_p_ptrdiff_t ret = new SWIGTYPE_p_ptrdiff_t(ovr_im.StringDataPtr_FindLastChar__SWIG_0(cast(void*)swigCPtr, c, init_ind), true);
    return ret;
  }

  public SWIGTYPE_p_ptrdiff_t FindLastChar(char c) const {
    SWIGTYPE_p_ptrdiff_t ret = new SWIGTYPE_p_ptrdiff_t(ovr_im.StringDataPtr_FindLastChar__SWIG_1(cast(void*)swigCPtr, c), true);
    return ret;
  }

  public StringDataPtr GetTrimLeft(size_t size) const {
    StringDataPtr ret = new StringDataPtr(ovr_im.StringDataPtr_GetTrimLeft(cast(void*)swigCPtr, size), true);
    return ret;
  }

  public StringDataPtr GetTrimRight(size_t size) const {
    StringDataPtr ret = new StringDataPtr(ovr_im.StringDataPtr_GetTrimRight(cast(void*)swigCPtr, size), true);
    return ret;
  }

  public StringDataPtr GetNextToken(char separator) const {
    StringDataPtr ret = new StringDataPtr(ovr_im.StringDataPtr_GetNextToken__SWIG_0(cast(void*)swigCPtr, separator), true);
    return ret;
  }

  public StringDataPtr GetNextToken() const {
    StringDataPtr ret = new StringDataPtr(ovr_im.StringDataPtr_GetNextToken__SWIG_1(cast(void*)swigCPtr), true);
    return ret;
  }

  public StringDataPtr TrimLeft(size_t size) {
    StringDataPtr ret = new StringDataPtr(ovr_im.StringDataPtr_TrimLeft(cast(void*)swigCPtr, size), false);
    return ret;
  }

  public StringDataPtr TrimRight(size_t size) {
    StringDataPtr ret = new StringDataPtr(ovr_im.StringDataPtr_TrimRight(cast(void*)swigCPtr, size), false);
    return ret;
  }

  public string Begin() const {
    string ret = std.conv.to!string(ovr_im.StringDataPtr_Begin(cast(void*)swigCPtr));
    return ret;
  }

  public string End() const {
    string ret = std.conv.to!string(ovr_im.StringDataPtr_End(cast(void*)swigCPtr));
    return ret;
  }

  public bool swigOpEquals(StringDataPtr data) const {
    bool ret = ovr_im.StringDataPtr_swigOpEquals(cast(void*)swigCPtr, StringDataPtr.swigGetCPtr(data)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }
}

enum DeviceType {
  Device_None = 0,
  Device_Manager = 1,
  Device_HMD = 2,
  Device_Sensor = 3,
  Device_LatencyTester = 4,
  Device_BootLoader = 5,
  Device_All = 0xFF
}

class DeviceHandle {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(DeviceHandle obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_DeviceHandle(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(ovr_im.new_DeviceHandle__SWIG_0(), true);
  }

  public this(DeviceHandle src) {
    this(ovr_im.new_DeviceHandle__SWIG_1(DeviceHandle.swigGetCPtr(src)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public bool swigOpEquals(DeviceHandle other) const {
    bool ret = ovr_im.DeviceHandle_swigOpEquals(cast(void*)swigCPtr, DeviceHandle.swigGetCPtr(other)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public DeviceBase GetDevice_AddRef() const {
    void* cPtr = ovr_im.DeviceHandle_GetDevice_AddRef(cast(void*)swigCPtr);
    DeviceBase ret = (cPtr is null) ? null : new DeviceBase(cPtr, false);
    return ret;
  }

  public DeviceType GetType() const {
    DeviceType ret = cast(DeviceType)ovr_im.DeviceHandle_GetType(cast(void*)swigCPtr);
    return ret;
  }

  public bool GetDeviceInfo(DeviceInfo info) const {
    bool ret = ovr_im.DeviceHandle_GetDeviceInfo(cast(void*)swigCPtr, DeviceInfo.swigGetCPtr(info)) ? true : false;
    return ret;
  }

  public bool IsAvailable() const {
    bool ret = ovr_im.DeviceHandle_IsAvailable(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool IsCreated() const {
    bool ret = ovr_im.DeviceHandle_IsCreated(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool IsDevice(DeviceBase arg0) const {
    bool ret = ovr_im.DeviceHandle_IsDevice(cast(void*)swigCPtr, DeviceBase.swigGetCPtr(arg0)) ? true : false;
    return ret;
  }

  public DeviceBase CreateDevice() {
    void* cPtr = ovr_im.DeviceHandle_CreateDevice(cast(void*)swigCPtr);
    DeviceBase ret = (cPtr is null) ? null : new DeviceBase(cPtr, false);
    return ret;
  }

  public void Clear() {
    ovr_im.DeviceHandle_Clear(cast(void*)swigCPtr);
  }
}

enum MessageType {
  Message_None = 0,
  Message_DeviceAdded = ((OVR::Device_Manager << 8)|0),
  Message_DeviceRemoved = ((OVR::Device_Manager << 8)|1),
  Message_BodyFrame = ((OVR::Device_Sensor << 8)|0),
  Message_LatencyTestSamples = ((OVR::Device_LatencyTester << 8)|0),
  Message_LatencyTestColorDetected = ((OVR::Device_LatencyTester << 8)|1),
  Message_LatencyTestStarted = ((OVR::Device_LatencyTester << 8)|2),
  Message_LatencyTestButton = ((OVR::Device_LatencyTester << 8)|3)
}

class Message {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Message obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_Message(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(MessageType type, DeviceBase pdev) {
    this(ovr_im.new_Message__SWIG_0(cast(int)type, DeviceBase.swigGetCPtr(pdev)), true);
  }

  public this(MessageType type) {
    this(ovr_im.new_Message__SWIG_1(cast(int)type), true);
  }

  public this() {
    this(ovr_im.new_Message__SWIG_2(), true);
  }

  public void Type(MessageType value) @property {
    ovr_im.Message_Type_set(cast(void*)swigCPtr, cast(int)value);
  }

  public MessageType Type() @property const {
    MessageType ret = cast(MessageType)ovr_im.Message_Type_get(cast(void*)swigCPtr);
    return ret;
  }

  public void pDevice(DeviceBase value) @property {
    ovr_im.Message_pDevice_set(cast(void*)swigCPtr, DeviceBase.swigGetCPtr(value));
  }

  public DeviceBase pDevice() @property const {
    void* cPtr = ovr_im.Message_pDevice_get(cast(void*)swigCPtr);
    DeviceBase ret = (cPtr is null) ? null : new DeviceBase(cPtr, false);
    return ret;
  }
}

class MessageBodyFrame : Message {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.MessageBodyFrame_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(MessageBodyFrame obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_MessageBodyFrame(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(DeviceBase dev) {
    this(ovr_im.new_MessageBodyFrame(DeviceBase.swigGetCPtr(dev)), true);
  }

  public void Acceleration(SWIGTYPE_p_OVR__Vector3T_float_t value) @property {
    ovr_im.MessageBodyFrame_Acceleration_set(cast(void*)swigCPtr, SWIGTYPE_p_OVR__Vector3T_float_t.swigGetCPtr(value));
  }

  public SWIGTYPE_p_OVR__Vector3T_float_t Acceleration() @property const {
    void* cPtr = ovr_im.MessageBodyFrame_Acceleration_get(cast(void*)swigCPtr);
    SWIGTYPE_p_OVR__Vector3T_float_t ret = (cPtr is null) ? null : new SWIGTYPE_p_OVR__Vector3T_float_t(cPtr, false);
    return ret;
  }

  public void RotationRate(SWIGTYPE_p_OVR__Vector3T_float_t value) @property {
    ovr_im.MessageBodyFrame_RotationRate_set(cast(void*)swigCPtr, SWIGTYPE_p_OVR__Vector3T_float_t.swigGetCPtr(value));
  }

  public SWIGTYPE_p_OVR__Vector3T_float_t RotationRate() @property const {
    void* cPtr = ovr_im.MessageBodyFrame_RotationRate_get(cast(void*)swigCPtr);
    SWIGTYPE_p_OVR__Vector3T_float_t ret = (cPtr is null) ? null : new SWIGTYPE_p_OVR__Vector3T_float_t(cPtr, false);
    return ret;
  }

  public void MagneticField(SWIGTYPE_p_OVR__Vector3T_float_t value) @property {
    ovr_im.MessageBodyFrame_MagneticField_set(cast(void*)swigCPtr, SWIGTYPE_p_OVR__Vector3T_float_t.swigGetCPtr(value));
  }

  public SWIGTYPE_p_OVR__Vector3T_float_t MagneticField() @property const {
    void* cPtr = ovr_im.MessageBodyFrame_MagneticField_get(cast(void*)swigCPtr);
    SWIGTYPE_p_OVR__Vector3T_float_t ret = (cPtr is null) ? null : new SWIGTYPE_p_OVR__Vector3T_float_t(cPtr, false);
    return ret;
  }

  public void Temperature(float value) @property {
    ovr_im.MessageBodyFrame_Temperature_set(cast(void*)swigCPtr, value);
  }

  public float Temperature() @property const {
    auto ret = ovr_im.MessageBodyFrame_Temperature_get(cast(void*)swigCPtr);
    return ret;
  }

  public void TimeDelta(float value) @property {
    ovr_im.MessageBodyFrame_TimeDelta_set(cast(void*)swigCPtr, value);
  }

  public float TimeDelta() @property const {
    auto ret = ovr_im.MessageBodyFrame_TimeDelta_get(cast(void*)swigCPtr);
    return ret;
  }
}

class MessageDeviceStatus : Message {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.MessageDeviceStatus_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(MessageDeviceStatus obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_MessageDeviceStatus(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(MessageType type, DeviceBase dev, DeviceHandle hdev) {
    this(ovr_im.new_MessageDeviceStatus(cast(int)type, DeviceBase.swigGetCPtr(dev), DeviceHandle.swigGetCPtr(hdev)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void Handle(DeviceHandle value) @property {
    ovr_im.MessageDeviceStatus_Handle_set(cast(void*)swigCPtr, DeviceHandle.swigGetCPtr(value));
  }

  public DeviceHandle Handle() @property const {
    void* cPtr = ovr_im.MessageDeviceStatus_Handle_get(cast(void*)swigCPtr);
    DeviceHandle ret = (cPtr is null) ? null : new DeviceHandle(cPtr, false);
    return ret;
  }
}

class MessageLatencyTestSamples : Message {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.MessageLatencyTestSamples_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(MessageLatencyTestSamples obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_MessageLatencyTestSamples(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(DeviceBase dev) {
    this(ovr_im.new_MessageLatencyTestSamples(DeviceBase.swigGetCPtr(dev)), true);
  }

  public void Samples(SWIGTYPE_p_ArrayT_Color_t value) @property {
    ovr_im.MessageLatencyTestSamples_Samples_set(cast(void*)swigCPtr, SWIGTYPE_p_ArrayT_Color_t.swigGetCPtr(value));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_ArrayT_Color_t Samples() @property const {
    SWIGTYPE_p_ArrayT_Color_t ret = new SWIGTYPE_p_ArrayT_Color_t(ovr_im.MessageLatencyTestSamples_Samples_get(cast(void*)swigCPtr), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }
}

class MessageLatencyTestColorDetected : Message {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.MessageLatencyTestColorDetected_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(MessageLatencyTestColorDetected obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_MessageLatencyTestColorDetected(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(DeviceBase dev) {
    this(ovr_im.new_MessageLatencyTestColorDetected(DeviceBase.swigGetCPtr(dev)), true);
  }

  public void Elapsed(SWIGTYPE_p_uint16_t value) @property {
    ovr_im.MessageLatencyTestColorDetected_Elapsed_set(cast(void*)swigCPtr, SWIGTYPE_p_uint16_t.swigGetCPtr(value));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint16_t Elapsed() @property const {
    SWIGTYPE_p_uint16_t ret = new SWIGTYPE_p_uint16_t(ovr_im.MessageLatencyTestColorDetected_Elapsed_get(cast(void*)swigCPtr), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public void DetectedValue(SWIGTYPE_p_Color value) @property {
    ovr_im.MessageLatencyTestColorDetected_DetectedValue_set(cast(void*)swigCPtr, SWIGTYPE_p_Color.swigGetCPtr(value));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_Color DetectedValue() @property const {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(ovr_im.MessageLatencyTestColorDetected_DetectedValue_get(cast(void*)swigCPtr), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public void TargetValue(SWIGTYPE_p_Color value) @property {
    ovr_im.MessageLatencyTestColorDetected_TargetValue_set(cast(void*)swigCPtr, SWIGTYPE_p_Color.swigGetCPtr(value));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_Color TargetValue() @property const {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(ovr_im.MessageLatencyTestColorDetected_TargetValue_get(cast(void*)swigCPtr), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }
}

class MessageLatencyTestStarted : Message {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.MessageLatencyTestStarted_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(MessageLatencyTestStarted obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_MessageLatencyTestStarted(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(DeviceBase dev) {
    this(ovr_im.new_MessageLatencyTestStarted(DeviceBase.swigGetCPtr(dev)), true);
  }

  public void TargetValue(SWIGTYPE_p_Color value) @property {
    ovr_im.MessageLatencyTestStarted_TargetValue_set(cast(void*)swigCPtr, SWIGTYPE_p_Color.swigGetCPtr(value));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_Color TargetValue() @property const {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(ovr_im.MessageLatencyTestStarted_TargetValue_get(cast(void*)swigCPtr), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }
}

class MessageLatencyTestButton : Message {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.MessageLatencyTestButton_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(MessageLatencyTestButton obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_MessageLatencyTestButton(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(DeviceBase dev) {
    this(ovr_im.new_MessageLatencyTestButton(DeviceBase.swigGetCPtr(dev)), true);
  }
}

class SensorFusion : NewOverrideBase {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.SensorFusion_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(SensorFusion obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_SensorFusion(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(SWIGTYPE_p_SensorDevice sensor) {
    this(ovr_im.new_SensorFusion__SWIG_0(SWIGTYPE_p_SensorDevice.swigGetCPtr(sensor)), true);
  }

  public this() {
    this(ovr_im.new_SensorFusion__SWIG_1(), true);
  }

  public bool AttachToSensor(SWIGTYPE_p_SensorDevice sensor) {
    bool ret = ovr_im.SensorFusion_AttachToSensor(cast(void*)swigCPtr, SWIGTYPE_p_SensorDevice.swigGetCPtr(sensor)) ? true : false;
    return ret;
  }

  public bool IsAttachedToSensor() const {
    bool ret = ovr_im.SensorFusion_IsAttachedToSensor(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public SWIGTYPE_p_OVR__QuatT_float_t GetOrientation() const {
    SWIGTYPE_p_OVR__QuatT_float_t ret = new SWIGTYPE_p_OVR__QuatT_float_t(ovr_im.SensorFusion_GetOrientation(cast(void*)swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_OVR__QuatT_float_t GetPredictedOrientation(float predictDt) {
    SWIGTYPE_p_OVR__QuatT_float_t ret = new SWIGTYPE_p_OVR__QuatT_float_t(ovr_im.SensorFusion_GetPredictedOrientation__SWIG_0(cast(void*)swigCPtr, predictDt), true);
    return ret;
  }

  public SWIGTYPE_p_OVR__QuatT_float_t GetPredictedOrientation() {
    SWIGTYPE_p_OVR__QuatT_float_t ret = new SWIGTYPE_p_OVR__QuatT_float_t(ovr_im.SensorFusion_GetPredictedOrientation__SWIG_1(cast(void*)swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_OVR__Vector3T_float_t GetAcceleration() const {
    SWIGTYPE_p_OVR__Vector3T_float_t ret = new SWIGTYPE_p_OVR__Vector3T_float_t(ovr_im.SensorFusion_GetAcceleration(cast(void*)swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_OVR__Vector3T_float_t GetAngularVelocity() const {
    SWIGTYPE_p_OVR__Vector3T_float_t ret = new SWIGTYPE_p_OVR__Vector3T_float_t(ovr_im.SensorFusion_GetAngularVelocity(cast(void*)swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_OVR__Vector3T_float_t GetMagnetometer() const {
    SWIGTYPE_p_OVR__Vector3T_float_t ret = new SWIGTYPE_p_OVR__Vector3T_float_t(ovr_im.SensorFusion_GetMagnetometer(cast(void*)swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_OVR__Vector3T_float_t GetCalibratedMagnetometer() const {
    SWIGTYPE_p_OVR__Vector3T_float_t ret = new SWIGTYPE_p_OVR__Vector3T_float_t(ovr_im.SensorFusion_GetCalibratedMagnetometer(cast(void*)swigCPtr), true);
    return ret;
  }

  public void Reset() {
    ovr_im.SensorFusion_Reset(cast(void*)swigCPtr);
  }

  public void EnableMotionTracking(bool enable) {
    ovr_im.SensorFusion_EnableMotionTracking__SWIG_0(cast(void*)swigCPtr, enable);
  }

  public void EnableMotionTracking() {
    ovr_im.SensorFusion_EnableMotionTracking__SWIG_1(cast(void*)swigCPtr);
  }

  public bool IsMotionTrackingEnabled() const {
    bool ret = ovr_im.SensorFusion_IsMotionTrackingEnabled(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public float GetPredictionDelta() const {
    auto ret = ovr_im.SensorFusion_GetPredictionDelta(cast(void*)swigCPtr);
    return ret;
  }

  public void SetPrediction(float dt, bool enable) {
    ovr_im.SensorFusion_SetPrediction__SWIG_0(cast(void*)swigCPtr, dt, enable);
  }

  public void SetPrediction(float dt) {
    ovr_im.SensorFusion_SetPrediction__SWIG_1(cast(void*)swigCPtr, dt);
  }

  public void SetPredictionEnabled(bool enable) {
    ovr_im.SensorFusion_SetPredictionEnabled__SWIG_0(cast(void*)swigCPtr, enable);
  }

  public void SetPredictionEnabled() {
    ovr_im.SensorFusion_SetPredictionEnabled__SWIG_1(cast(void*)swigCPtr);
  }

  public bool IsPredictionEnabled() {
    bool ret = ovr_im.SensorFusion_IsPredictionEnabled(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetGravityEnabled(bool enableGravity) {
    ovr_im.SensorFusion_SetGravityEnabled(cast(void*)swigCPtr, enableGravity);
  }

  public bool IsGravityEnabled() const {
    bool ret = ovr_im.SensorFusion_IsGravityEnabled(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public float GetAccelGain() const {
    auto ret = ovr_im.SensorFusion_GetAccelGain(cast(void*)swigCPtr);
    return ret;
  }

  public void SetAccelGain(float ag) {
    ovr_im.SensorFusion_SetAccelGain(cast(void*)swigCPtr, ag);
  }

  public bool SaveMagCalibration(string calibrationName) const {
    bool ret = ovr_im.SensorFusion_SaveMagCalibration__SWIG_0(cast(void*)swigCPtr, (calibrationName ? std.string.toStringz(calibrationName) : null)) ? true : false;
    return ret;
  }

  public bool SaveMagCalibration() const {
    bool ret = ovr_im.SensorFusion_SaveMagCalibration__SWIG_1(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public bool LoadMagCalibration(string calibrationName) {
    bool ret = ovr_im.SensorFusion_LoadMagCalibration__SWIG_0(cast(void*)swigCPtr, (calibrationName ? std.string.toStringz(calibrationName) : null)) ? true : false;
    return ret;
  }

  public bool LoadMagCalibration() {
    bool ret = ovr_im.SensorFusion_LoadMagCalibration__SWIG_1(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetYawCorrectionEnabled(bool enable) {
    ovr_im.SensorFusion_SetYawCorrectionEnabled(cast(void*)swigCPtr, enable);
  }

  public bool IsYawCorrectionEnabled() const {
    bool ret = ovr_im.SensorFusion_IsYawCorrectionEnabled(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void SetMagCalibration(Matrix4f m) {
    ovr_im.SensorFusion_SetMagCalibration(cast(void*)swigCPtr, Matrix4f.swigGetCPtr(m));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public Matrix4f GetMagCalibration() const {
    Matrix4f ret = new Matrix4f(ovr_im.SensorFusion_GetMagCalibration(cast(void*)swigCPtr), true);
    return ret;
  }

  public SWIGTYPE_p_time_t GetMagCalibrationTime() const {
    SWIGTYPE_p_time_t ret = new SWIGTYPE_p_time_t(ovr_im.SensorFusion_GetMagCalibrationTime(cast(void*)swigCPtr), true);
    return ret;
  }

  public bool HasMagCalibration() const {
    bool ret = ovr_im.SensorFusion_HasMagCalibration(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void ClearMagCalibration() {
    ovr_im.SensorFusion_ClearMagCalibration(cast(void*)swigCPtr);
  }

  public void ClearMagReferences() {
    ovr_im.SensorFusion_ClearMagReferences(cast(void*)swigCPtr);
  }

  public SWIGTYPE_p_OVR__Vector3T_float_t GetCalibratedMagValue(SWIGTYPE_p_OVR__Vector3T_float_t rawMag) const {
    SWIGTYPE_p_OVR__Vector3T_float_t ret = new SWIGTYPE_p_OVR__Vector3T_float_t(ovr_im.SensorFusion_GetCalibratedMagValue(cast(void*)swigCPtr, SWIGTYPE_p_OVR__Vector3T_float_t.swigGetCPtr(rawMag)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public void OnMessage(MessageBodyFrame msg) {
    ovr_im.SensorFusion_OnMessage(cast(void*)swigCPtr, MessageBodyFrame.swigGetCPtr(msg));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void SetDelegateMessageHandler(SWIGTYPE_p_MessageHandler handler) {
    ovr_im.SensorFusion_SetDelegateMessageHandler(cast(void*)swigCPtr, SWIGTYPE_p_MessageHandler.swigGetCPtr(handler));
  }
}

enum ProfileType {
  Profile_Unknown = 0,
  Profile_GenericHMD = 10,
  Profile_RiftDK1 = 11,
  Profile_RiftDKHD = 12
}

class ProfileManager {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(ProfileManager obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new object.Exception("C++ destructor does not have public access");
        }
        swigCPtr = null;
      }
    }
  }

  public static ProfileManager Create() {
    void* cPtr = ovr_im.ProfileManager_Create();
    ProfileManager ret = (cPtr is null) ? null : new ProfileManager(cPtr, false);
    return ret;
  }

  public int GetProfileCount(ProfileType device) {
    auto ret = ovr_im.ProfileManager_GetProfileCount(cast(void*)swigCPtr, cast(int)device);
    return ret;
  }

  public string GetProfileName(ProfileType device, uint index) {
    string ret = std.conv.to!string(ovr_im.ProfileManager_GetProfileName(cast(void*)swigCPtr, cast(int)device, index));
    return ret;
  }

  public bool HasProfile(ProfileType device, string name) {
    bool ret = ovr_im.ProfileManager_HasProfile(cast(void*)swigCPtr, cast(int)device, (name ? std.string.toStringz(name) : null)) ? true : false;
    return ret;
  }

  public Profile LoadProfile(ProfileType device, uint index) {
    void* cPtr = ovr_im.ProfileManager_LoadProfile__SWIG_0(cast(void*)swigCPtr, cast(int)device, index);
    Profile ret = (cPtr is null) ? null : new Profile(cPtr, false);
    return ret;
  }

  public Profile LoadProfile(ProfileType device, string name) {
    void* cPtr = ovr_im.ProfileManager_LoadProfile__SWIG_1(cast(void*)swigCPtr, cast(int)device, (name ? std.string.toStringz(name) : null));
    Profile ret = (cPtr is null) ? null : new Profile(cPtr, false);
    return ret;
  }

  public Profile GetDeviceDefaultProfile(ProfileType device) {
    void* cPtr = ovr_im.ProfileManager_GetDeviceDefaultProfile(cast(void*)swigCPtr, cast(int)device);
    Profile ret = (cPtr is null) ? null : new Profile(cPtr, false);
    return ret;
  }

  public string GetDefaultProfileName(ProfileType device) {
    string ret = std.conv.to!string(ovr_im.ProfileManager_GetDefaultProfileName(cast(void*)swigCPtr, cast(int)device));
    return ret;
  }

  public bool SetDefaultProfileName(ProfileType device, string name) {
    bool ret = ovr_im.ProfileManager_SetDefaultProfileName(cast(void*)swigCPtr, cast(int)device, (name ? std.string.toStringz(name) : null)) ? true : false;
    return ret;
  }

  public bool Save(Profile profile) {
    bool ret = ovr_im.ProfileManager_Save(cast(void*)swigCPtr, Profile.swigGetCPtr(profile)) ? true : false;
    return ret;
  }

  public bool Delete(Profile profile) {
    bool ret = ovr_im.ProfileManager_Delete(cast(void*)swigCPtr, Profile.swigGetCPtr(profile)) ? true : false;
    return ret;
  }
}

class Profile {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Profile obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_Profile(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum {
    MaxNameLen = 32
  }

  enum GenderType {
    Gender_Unspecified = 0,
    Gender_Male = 1,
    Gender_Female = 2
  }

  public void Type(ProfileType value) @property {
    ovr_im.Profile_Type_set(cast(void*)swigCPtr, cast(int)value);
  }

  public ProfileType Type() @property const {
    ProfileType ret = cast(ProfileType)ovr_im.Profile_Type_get(cast(void*)swigCPtr);
    return ret;
  }

  public void Name(string value) @property {
    ovr_im.Profile_Name_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string Name() @property const {
    string ret = std.conv.to!string(ovr_im.Profile_Name_get(cast(void*)swigCPtr));
    return ret;
  }

  public Profile Clone() const {
    void* cPtr = ovr_im.Profile_Clone(cast(void*)swigCPtr);
    Profile ret = (cPtr is null) ? null : new Profile(cPtr, false);
    return ret;
  }

  public Profile.GenderType GetGender() {
    Profile.GenderType ret = cast(Profile.GenderType)ovr_im.Profile_GetGender(cast(void*)swigCPtr);
    return ret;
  }

  public float GetPlayerHeight() {
    auto ret = ovr_im.Profile_GetPlayerHeight(cast(void*)swigCPtr);
    return ret;
  }

  public float GetIPD() {
    auto ret = ovr_im.Profile_GetIPD(cast(void*)swigCPtr);
    return ret;
  }

  public float GetEyeHeight() {
    auto ret = ovr_im.Profile_GetEyeHeight(cast(void*)swigCPtr);
    return ret;
  }

  public void SetGender(Profile.GenderType gender) {
    ovr_im.Profile_SetGender(cast(void*)swigCPtr, cast(int)gender);
  }

  public void SetPlayerHeight(float height) {
    ovr_im.Profile_SetPlayerHeight(cast(void*)swigCPtr, height);
  }

  public void SetIPD(float ipd) {
    ovr_im.Profile_SetIPD(cast(void*)swigCPtr, ipd);
  }
}

class HMDProfile : Profile {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.HMDProfile_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(HMDProfile obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_HMDProfile(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public override Profile Clone() const {
    void* cPtr = ovr_im.HMDProfile_Clone(cast(void*)swigCPtr);
    Profile ret = (cPtr is null) ? null : new Profile(cPtr, false);
    return ret;
  }

  public void SetLL(int val) {
    ovr_im.HMDProfile_SetLL(cast(void*)swigCPtr, val);
  }

  public void SetLR(int val) {
    ovr_im.HMDProfile_SetLR(cast(void*)swigCPtr, val);
  }

  public void SetRL(int val) {
    ovr_im.HMDProfile_SetRL(cast(void*)swigCPtr, val);
  }

  public void SetRR(int val) {
    ovr_im.HMDProfile_SetRR(cast(void*)swigCPtr, val);
  }

  public int GetLL() {
    auto ret = ovr_im.HMDProfile_GetLL(cast(void*)swigCPtr);
    return ret;
  }

  public int GetLR() {
    auto ret = ovr_im.HMDProfile_GetLR(cast(void*)swigCPtr);
    return ret;
  }

  public int GetRL() {
    auto ret = ovr_im.HMDProfile_GetRL(cast(void*)swigCPtr);
    return ret;
  }

  public int GetRR() {
    auto ret = ovr_im.HMDProfile_GetRR(cast(void*)swigCPtr);
    return ret;
  }
}

enum EyeCupType {
  EyeCup_A = 0,
  EyeCup_B = 1,
  EyeCup_C = 2
}

class RiftDK1Profile : HMDProfile {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.RiftDK1Profile_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(RiftDK1Profile obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_RiftDK1Profile(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public override Profile Clone() const {
    void* cPtr = ovr_im.RiftDK1Profile_Clone(cast(void*)swigCPtr);
    Profile ret = (cPtr is null) ? null : new Profile(cPtr, false);
    return ret;
  }

  public EyeCupType GetEyeCup() {
    EyeCupType ret = cast(EyeCupType)ovr_im.RiftDK1Profile_GetEyeCup(cast(void*)swigCPtr);
    return ret;
  }

  public void SetEyeCup(EyeCupType cup) {
    ovr_im.RiftDK1Profile_SetEyeCup(cast(void*)swigCPtr, cast(int)cup);
  }
}

class RiftDKHDProfile : HMDProfile {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.RiftDKHDProfile_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(RiftDKHDProfile obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_RiftDKHDProfile(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public override Profile Clone() const {
    void* cPtr = ovr_im.RiftDKHDProfile_Clone(cast(void*)swigCPtr);
    Profile ret = (cPtr is null) ? null : new Profile(cPtr, false);
    return ret;
  }

  public EyeCupType GetEyeCup() {
    EyeCupType ret = cast(EyeCupType)ovr_im.RiftDKHDProfile_GetEyeCup(cast(void*)swigCPtr);
    return ret;
  }

  public void SetEyeCup(EyeCupType cup) {
    ovr_im.RiftDKHDProfile_SetEyeCup(cast(void*)swigCPtr, cast(int)cup);
  }
}

String GetBaseOVRPath(bool create_dir) {
  String ret = new String(ovr_im.GetBaseOVRPath(create_dir), true);
  return ret;
}

class HIDDeviceBase {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(HIDDeviceBase obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_HIDDeviceBase(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public bool SetFeatureReport(SWIGTYPE_p_uint8_t data, SWIGTYPE_p_uint32_t length) {
    bool ret = ovr_im.HIDDeviceBase_SetFeatureReport(cast(void*)swigCPtr, SWIGTYPE_p_uint8_t.swigGetCPtr(data), SWIGTYPE_p_uint32_t.swigGetCPtr(length)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool GetFeatureReport(SWIGTYPE_p_uint8_t data, SWIGTYPE_p_uint32_t length) {
    bool ret = ovr_im.HIDDeviceBase_GetFeatureReport(cast(void*)swigCPtr, SWIGTYPE_p_uint8_t.swigGetCPtr(data), SWIGTYPE_p_uint32_t.swigGetCPtr(length)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }
}

class MessageHandler {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(MessageHandler obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_MessageHandler(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this() {
    this(ovr_im.new_MessageHandler(), true);
  }

  public bool IsHandlerInstalled() const {
    bool ret = ovr_im.MessageHandler_IsHandlerInstalled(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void RemoveHandlerFromDevices() {
    ovr_im.MessageHandler_RemoveHandlerFromDevices(cast(void*)swigCPtr);
  }

  public Lock GetHandlerLock() const {
    void* cPtr = ovr_im.MessageHandler_GetHandlerLock(cast(void*)swigCPtr);
    Lock ret = (cPtr is null) ? null : new Lock(cPtr, false);
    return ret;
  }

  public void OnMessage(Message arg0) {
    ovr_im.MessageHandler_OnMessage(cast(void*)swigCPtr, Message.swigGetCPtr(arg0));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public bool SupportsMessageType(MessageType arg0) const {
    bool ret = ovr_im.MessageHandler_SupportsMessageType(cast(void*)swigCPtr, cast(int)arg0) ? true : false;
    return ret;
  }
}

class DeviceBase : NewOverrideBase {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.DeviceBase_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(DeviceBase obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_DeviceBase(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum {
    EnumDeviceType = OVR::Device_All
  }

  public void AddRef() {
    ovr_im.DeviceBase_AddRef(cast(void*)swigCPtr);
  }

  public void Release() {
    ovr_im.DeviceBase_Release(cast(void*)swigCPtr);
  }

  public DeviceBase GetParent() const {
    void* cPtr = ovr_im.DeviceBase_GetParent(cast(void*)swigCPtr);
    DeviceBase ret = (cPtr is null) ? null : new DeviceBase(cPtr, false);
    return ret;
  }

  public DeviceManager GetManager() const {
    void* cPtr = ovr_im.DeviceBase_GetManager(cast(void*)swigCPtr);
    DeviceManager ret = (cPtr is null) ? null : new DeviceManager(cPtr, false);
    return ret;
  }

  public void SetMessageHandler(MessageHandler handler) {
    ovr_im.DeviceBase_SetMessageHandler(cast(void*)swigCPtr, MessageHandler.swigGetCPtr(handler));
  }

  public MessageHandler GetMessageHandler() const {
    void* cPtr = ovr_im.DeviceBase_GetMessageHandler(cast(void*)swigCPtr);
    MessageHandler ret = (cPtr is null) ? null : new MessageHandler(cPtr, false);
    return ret;
  }

  public DeviceType GetType() const {
    DeviceType ret = cast(DeviceType)ovr_im.DeviceBase_GetType(cast(void*)swigCPtr);
    return ret;
  }

  public bool GetDeviceInfo(DeviceInfo info) const {
    bool ret = ovr_im.DeviceBase_GetDeviceInfo(cast(void*)swigCPtr, DeviceInfo.swigGetCPtr(info)) ? true : false;
    return ret;
  }

  public Lock GetHandlerLock() const {
    void* cPtr = ovr_im.DeviceBase_GetHandlerLock(cast(void*)swigCPtr);
    Lock ret = (cPtr is null) ? null : new Lock(cPtr, false);
    return ret;
  }
}

class DeviceInfo {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(DeviceInfo obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_DeviceInfo(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  enum {
    MaxNameLength = 32
  }

  public this() {
    this(ovr_im.new_DeviceInfo(), true);
  }

  public DeviceType InfoClassType() @property const {
    DeviceType ret = cast(DeviceType)ovr_im.DeviceInfo_InfoClassType_get(cast(void*)swigCPtr);
    return ret;
  }

  public void Type(DeviceType value) @property {
    ovr_im.DeviceInfo_Type_set(cast(void*)swigCPtr, cast(int)value);
  }

  public DeviceType Type() @property const {
    DeviceType ret = cast(DeviceType)ovr_im.DeviceInfo_Type_get(cast(void*)swigCPtr);
    return ret;
  }

  public void ProductName(string value) @property {
    ovr_im.DeviceInfo_ProductName_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string ProductName() @property const {
    string ret = std.conv.to!string(ovr_im.DeviceInfo_ProductName_get(cast(void*)swigCPtr));
    return ret;
  }

  public void Manufacturer(string value) @property {
    ovr_im.DeviceInfo_Manufacturer_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string Manufacturer() @property const {
    string ret = std.conv.to!string(ovr_im.DeviceInfo_Manufacturer_get(cast(void*)swigCPtr));
    return ret;
  }

  public void Version(uint value) @property {
    ovr_im.DeviceInfo_Version_set(cast(void*)swigCPtr, value);
  }

  public uint Version() @property const {
    auto ret = ovr_im.DeviceInfo_Version_get(cast(void*)swigCPtr);
    return ret;
  }
}

class DeviceEnumerationArgs {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(DeviceEnumerationArgs obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_DeviceEnumerationArgs(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(DeviceType enumType, bool availableOnly) {
    this(ovr_im.new_DeviceEnumerationArgs(cast(int)enumType, availableOnly), true);
  }

  public bool MatchRule(DeviceType type, bool available) const {
    bool ret = ovr_im.DeviceEnumerationArgs_MatchRule(cast(void*)swigCPtr, cast(int)type, available) ? true : false;
    return ret;
  }
}

class DeviceManager : DeviceBase {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.DeviceManager_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(DeviceManager obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_DeviceManager(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum {
    EnumDeviceType = OVR::Device_Manager
  }

  public override DeviceType GetType() const {
    DeviceType ret = cast(DeviceType)ovr_im.DeviceManager_GetType(cast(void*)swigCPtr);
    return ret;
  }

  public override DeviceManager GetManager() const {
    void* cPtr = ovr_im.DeviceManager_GetManager(cast(void*)swigCPtr);
    DeviceManager ret = (cPtr is null) ? null : new DeviceManager(cPtr, false);
    return ret;
  }

  public ProfileManager GetProfileManager() const {
    void* cPtr = ovr_im.DeviceManager_GetProfileManager(cast(void*)swigCPtr);
    ProfileManager ret = (cPtr is null) ? null : new ProfileManager(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_OVR__DeviceEnumeratorT_OVR__DeviceBase_t EnumerateDevicesEx(DeviceEnumerationArgs args) {
    SWIGTYPE_p_OVR__DeviceEnumeratorT_OVR__DeviceBase_t ret = new SWIGTYPE_p_OVR__DeviceEnumeratorT_OVR__DeviceBase_t(ovr_im.DeviceManager_EnumerateDevicesEx(cast(void*)swigCPtr, DeviceEnumerationArgs.swigGetCPtr(args)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public static DeviceManager Create() {
    void* cPtr = ovr_im.DeviceManager_Create();
    DeviceManager ret = (cPtr is null) ? null : new DeviceManager(cPtr, false);
    return ret;
  }

  public SWIGTYPE_p_OVR__PtrT_OVR__DeviceCreateDesc_t AddDevice_NeedsLock(SWIGTYPE_p_OVR__DeviceCreateDesc createDesc) {
    SWIGTYPE_p_OVR__PtrT_OVR__DeviceCreateDesc_t ret = new SWIGTYPE_p_OVR__PtrT_OVR__DeviceCreateDesc_t(ovr_im.DeviceManager_AddDevice_NeedsLock(cast(void*)swigCPtr, SWIGTYPE_p_OVR__DeviceCreateDesc.swigGetCPtr(createDesc)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }
}

class HMDInfo : DeviceInfo {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.HMDInfo_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(HMDInfo obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_HMDInfo(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public void HResolution(uint value) @property {
    ovr_im.HMDInfo_HResolution_set(cast(void*)swigCPtr, value);
  }

  public uint HResolution() @property const {
    auto ret = ovr_im.HMDInfo_HResolution_get(cast(void*)swigCPtr);
    return ret;
  }

  public void VResolution(uint value) @property {
    ovr_im.HMDInfo_VResolution_set(cast(void*)swigCPtr, value);
  }

  public uint VResolution() @property const {
    auto ret = ovr_im.HMDInfo_VResolution_get(cast(void*)swigCPtr);
    return ret;
  }

  public void HScreenSize(float value) @property {
    ovr_im.HMDInfo_HScreenSize_set(cast(void*)swigCPtr, value);
  }

  public float HScreenSize() @property const {
    auto ret = ovr_im.HMDInfo_HScreenSize_get(cast(void*)swigCPtr);
    return ret;
  }

  public void VScreenSize(float value) @property {
    ovr_im.HMDInfo_VScreenSize_set(cast(void*)swigCPtr, value);
  }

  public float VScreenSize() @property const {
    auto ret = ovr_im.HMDInfo_VScreenSize_get(cast(void*)swigCPtr);
    return ret;
  }

  public void VScreenCenter(float value) @property {
    ovr_im.HMDInfo_VScreenCenter_set(cast(void*)swigCPtr, value);
  }

  public float VScreenCenter() @property const {
    auto ret = ovr_im.HMDInfo_VScreenCenter_get(cast(void*)swigCPtr);
    return ret;
  }

  public void EyeToScreenDistance(float value) @property {
    ovr_im.HMDInfo_EyeToScreenDistance_set(cast(void*)swigCPtr, value);
  }

  public float EyeToScreenDistance() @property const {
    auto ret = ovr_im.HMDInfo_EyeToScreenDistance_get(cast(void*)swigCPtr);
    return ret;
  }

  public void LensSeparationDistance(float value) @property {
    ovr_im.HMDInfo_LensSeparationDistance_set(cast(void*)swigCPtr, value);
  }

  public float LensSeparationDistance() @property const {
    auto ret = ovr_im.HMDInfo_LensSeparationDistance_get(cast(void*)swigCPtr);
    return ret;
  }

  public void InterpupillaryDistance(float value) @property {
    ovr_im.HMDInfo_InterpupillaryDistance_set(cast(void*)swigCPtr, value);
  }

  public float InterpupillaryDistance() @property const {
    auto ret = ovr_im.HMDInfo_InterpupillaryDistance_get(cast(void*)swigCPtr);
    return ret;
  }

  public void DistortionK(SWIGTYPE_p_float value) @property {
    ovr_im.HMDInfo_DistortionK_set(cast(void*)swigCPtr, SWIGTYPE_p_float.swigGetCPtr(value));
  }

  public SWIGTYPE_p_float DistortionK() @property const {
    void* cPtr = ovr_im.HMDInfo_DistortionK_get(cast(void*)swigCPtr);
    SWIGTYPE_p_float ret = (cPtr is null) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public void ChromaAbCorrection(SWIGTYPE_p_float value) @property {
    ovr_im.HMDInfo_ChromaAbCorrection_set(cast(void*)swigCPtr, SWIGTYPE_p_float.swigGetCPtr(value));
  }

  public SWIGTYPE_p_float ChromaAbCorrection() @property const {
    void* cPtr = ovr_im.HMDInfo_ChromaAbCorrection_get(cast(void*)swigCPtr);
    SWIGTYPE_p_float ret = (cPtr is null) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public void DesktopX(int value) @property {
    ovr_im.HMDInfo_DesktopX_set(cast(void*)swigCPtr, value);
  }

  public int DesktopX() @property const {
    auto ret = ovr_im.HMDInfo_DesktopX_get(cast(void*)swigCPtr);
    return ret;
  }

  public void DesktopY(int value) @property {
    ovr_im.HMDInfo_DesktopY_set(cast(void*)swigCPtr, value);
  }

  public int DesktopY() @property const {
    auto ret = ovr_im.HMDInfo_DesktopY_get(cast(void*)swigCPtr);
    return ret;
  }

  public void DisplayDeviceName(string value) @property {
    ovr_im.HMDInfo_DisplayDeviceName_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string DisplayDeviceName() @property const {
    string ret = std.conv.to!string(ovr_im.HMDInfo_DisplayDeviceName_get(cast(void*)swigCPtr));
    return ret;
  }

  public void DisplayId(core.stdc.config.c_long value) @property {
    ovr_im.HMDInfo_DisplayId_set(cast(void*)swigCPtr, value);
  }

  public core.stdc.config.c_long DisplayId() @property const {
    auto ret = ovr_im.HMDInfo_DisplayId_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(ovr_im.new_HMDInfo(), true);
  }

  public bool IsSameDisplay(HMDInfo o) const {
    bool ret = ovr_im.HMDInfo_IsSameDisplay(cast(void*)swigCPtr, HMDInfo.swigGetCPtr(o)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }
}

class HMDDevice : DeviceBase {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.HMDDevice_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(HMDDevice obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_HMDDevice(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum {
    EnumDeviceType = OVR::Device_HMD
  }

  public override DeviceType GetType() const {
    DeviceType ret = cast(DeviceType)ovr_im.HMDDevice_GetType(cast(void*)swigCPtr);
    return ret;
  }

  public SensorDevice GetSensor() {
    void* cPtr = ovr_im.HMDDevice_GetSensor(cast(void*)swigCPtr);
    SensorDevice ret = (cPtr is null) ? null : new SensorDevice(cPtr, false);
    return ret;
  }

  public Profile GetProfile() const {
    void* cPtr = ovr_im.HMDDevice_GetProfile(cast(void*)swigCPtr);
    Profile ret = (cPtr is null) ? null : new Profile(cPtr, false);
    return ret;
  }

  public string GetProfileName() const {
    string ret = std.conv.to!string(ovr_im.HMDDevice_GetProfileName(cast(void*)swigCPtr));
    return ret;
  }

  public bool SetProfileName(string name) {
    bool ret = ovr_im.HMDDevice_SetProfileName(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null)) ? true : false;
    return ret;
  }

  public HMDDevice Disconnect(SensorDevice arg0) {
    void* cPtr = ovr_im.HMDDevice_Disconnect(cast(void*)swigCPtr, SensorDevice.swigGetCPtr(arg0));
    HMDDevice ret = (cPtr is null) ? null : new HMDDevice(cPtr, false);
    return ret;
  }

  public bool IsDisconnected() const {
    bool ret = ovr_im.HMDDevice_IsDisconnected(cast(void*)swigCPtr) ? true : false;
    return ret;
  }
}

class SensorRange {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(SensorRange obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_SensorRange(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(float maxAcceleration, float maxRotationRate, float maxMagneticField) {
    this(ovr_im.new_SensorRange__SWIG_0(maxAcceleration, maxRotationRate, maxMagneticField), true);
  }

  public this(float maxAcceleration, float maxRotationRate) {
    this(ovr_im.new_SensorRange__SWIG_1(maxAcceleration, maxRotationRate), true);
  }

  public this(float maxAcceleration) {
    this(ovr_im.new_SensorRange__SWIG_2(maxAcceleration), true);
  }

  public this() {
    this(ovr_im.new_SensorRange__SWIG_3(), true);
  }

  public void MaxAcceleration(float value) @property {
    ovr_im.SensorRange_MaxAcceleration_set(cast(void*)swigCPtr, value);
  }

  public float MaxAcceleration() @property const {
    auto ret = ovr_im.SensorRange_MaxAcceleration_get(cast(void*)swigCPtr);
    return ret;
  }

  public void MaxRotationRate(float value) @property {
    ovr_im.SensorRange_MaxRotationRate_set(cast(void*)swigCPtr, value);
  }

  public float MaxRotationRate() @property const {
    auto ret = ovr_im.SensorRange_MaxRotationRate_get(cast(void*)swigCPtr);
    return ret;
  }

  public void MaxMagneticField(float value) @property {
    ovr_im.SensorRange_MaxMagneticField_set(cast(void*)swigCPtr, value);
  }

  public float MaxMagneticField() @property const {
    auto ret = ovr_im.SensorRange_MaxMagneticField_get(cast(void*)swigCPtr);
    return ret;
  }
}

class SensorInfo : DeviceInfo {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.SensorInfo_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(SensorInfo obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_SensorInfo(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this() {
    this(ovr_im.new_SensorInfo(), true);
  }

  public void VendorId(SWIGTYPE_p_uint16_t value) @property {
    ovr_im.SensorInfo_VendorId_set(cast(void*)swigCPtr, SWIGTYPE_p_uint16_t.swigGetCPtr(value));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint16_t VendorId() @property const {
    SWIGTYPE_p_uint16_t ret = new SWIGTYPE_p_uint16_t(ovr_im.SensorInfo_VendorId_get(cast(void*)swigCPtr), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public void ProductId(SWIGTYPE_p_uint16_t value) @property {
    ovr_im.SensorInfo_ProductId_set(cast(void*)swigCPtr, SWIGTYPE_p_uint16_t.swigGetCPtr(value));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint16_t ProductId() @property const {
    SWIGTYPE_p_uint16_t ret = new SWIGTYPE_p_uint16_t(ovr_im.SensorInfo_ProductId_get(cast(void*)swigCPtr), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public void MaxRanges(SensorRange value) @property {
    ovr_im.SensorInfo_MaxRanges_set(cast(void*)swigCPtr, SensorRange.swigGetCPtr(value));
  }

  public SensorRange MaxRanges() @property const {
    void* cPtr = ovr_im.SensorInfo_MaxRanges_get(cast(void*)swigCPtr);
    SensorRange ret = (cPtr is null) ? null : new SensorRange(cPtr, false);
    return ret;
  }

  public void SerialNumber(string value) @property {
    ovr_im.SensorInfo_SerialNumber_set(cast(void*)swigCPtr, (value ? std.string.toStringz(value) : null));
  }

  public string SerialNumber() @property const {
    string ret = std.conv.to!string(ovr_im.SensorInfo_SerialNumber_get(cast(void*)swigCPtr));
    return ret;
  }
}

class SensorDevice : HIDDeviceBase {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.SensorDevice_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(SensorDevice obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_SensorDevice(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum {
    EnumDeviceType = OVR::Device_Sensor
  }

  enum CoordinateFrame {
    Coord_Sensor = 0,
    Coord_HMD = 1
  }

  public override DeviceType GetType() const {
    DeviceType ret = cast(DeviceType)ovr_im.SensorDevice_GetType(cast(void*)swigCPtr);
    return ret;
  }

  public void SetCoordinateFrame(SensorDevice.CoordinateFrame coordframe) {
    ovr_im.SensorDevice_SetCoordinateFrame(cast(void*)swigCPtr, cast(int)coordframe);
  }

  public SensorDevice.CoordinateFrame GetCoordinateFrame() const {
    SensorDevice.CoordinateFrame ret = cast(SensorDevice.CoordinateFrame)ovr_im.SensorDevice_GetCoordinateFrame(cast(void*)swigCPtr);
    return ret;
  }

  public void SetReportRate(uint rateHz) {
    ovr_im.SensorDevice_SetReportRate(cast(void*)swigCPtr, rateHz);
  }

  public uint GetReportRate() const {
    auto ret = ovr_im.SensorDevice_GetReportRate(cast(void*)swigCPtr);
    return ret;
  }

  public bool SetRange(SensorRange range, bool waitFlag) {
    bool ret = ovr_im.SensorDevice_SetRange__SWIG_0(cast(void*)swigCPtr, SensorRange.swigGetCPtr(range), waitFlag) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool SetRange(SensorRange range) {
    bool ret = ovr_im.SensorDevice_SetRange__SWIG_1(cast(void*)swigCPtr, SensorRange.swigGetCPtr(range)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public void GetRange(SensorRange range) const {
    ovr_im.SensorDevice_GetRange(cast(void*)swigCPtr, SensorRange.swigGetCPtr(range));
  }
}

class LatencyTestConfiguration {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(LatencyTestConfiguration obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_LatencyTestConfiguration(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(SWIGTYPE_p_Color threshold, bool sendSamples) {
    this(ovr_im.new_LatencyTestConfiguration__SWIG_0(SWIGTYPE_p_Color.swigGetCPtr(threshold), sendSamples), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public this(SWIGTYPE_p_Color threshold) {
    this(ovr_im.new_LatencyTestConfiguration__SWIG_1(SWIGTYPE_p_Color.swigGetCPtr(threshold)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void Threshold(SWIGTYPE_p_Color value) @property {
    ovr_im.LatencyTestConfiguration_Threshold_set(cast(void*)swigCPtr, SWIGTYPE_p_Color.swigGetCPtr(value));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_Color Threshold() @property const {
    SWIGTYPE_p_Color ret = new SWIGTYPE_p_Color(ovr_im.LatencyTestConfiguration_Threshold_get(cast(void*)swigCPtr), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public void SendSamples(bool value) @property {
    ovr_im.LatencyTestConfiguration_SendSamples_set(cast(void*)swigCPtr, value);
  }

  public bool SendSamples() @property const {
    bool ret = ovr_im.LatencyTestConfiguration_SendSamples_get(cast(void*)swigCPtr) ? true : false;
    return ret;
  }
}

class LatencyTestDisplay {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(LatencyTestDisplay obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_LatencyTestDisplay(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(SWIGTYPE_p_uint8_t mode, SWIGTYPE_p_uint32_t value) {
    this(ovr_im.new_LatencyTestDisplay(SWIGTYPE_p_uint8_t.swigGetCPtr(mode), SWIGTYPE_p_uint32_t.swigGetCPtr(value)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void Mode(SWIGTYPE_p_uint8_t value) @property {
    ovr_im.LatencyTestDisplay_Mode_set(cast(void*)swigCPtr, SWIGTYPE_p_uint8_t.swigGetCPtr(value));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint8_t Mode() @property const {
    SWIGTYPE_p_uint8_t ret = new SWIGTYPE_p_uint8_t(ovr_im.LatencyTestDisplay_Mode_get(cast(void*)swigCPtr), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public void Value(SWIGTYPE_p_uint32_t value) @property {
    ovr_im.LatencyTestDisplay_Value_set(cast(void*)swigCPtr, SWIGTYPE_p_uint32_t.swigGetCPtr(value));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public SWIGTYPE_p_uint32_t Value() @property const {
    SWIGTYPE_p_uint32_t ret = new SWIGTYPE_p_uint32_t(ovr_im.LatencyTestDisplay_Value_get(cast(void*)swigCPtr), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }
}

class LatencyTestDevice : HIDDeviceBase {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.LatencyTestDevice_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(LatencyTestDevice obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_LatencyTestDevice(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  enum {
    EnumDeviceType = OVR::Device_LatencyTester
  }

  public override DeviceType GetType() const {
    DeviceType ret = cast(DeviceType)ovr_im.LatencyTestDevice_GetType(cast(void*)swigCPtr);
    return ret;
  }

  public bool SetConfiguration(LatencyTestConfiguration configuration, bool waitFlag) {
    bool ret = ovr_im.LatencyTestDevice_SetConfiguration__SWIG_0(cast(void*)swigCPtr, LatencyTestConfiguration.swigGetCPtr(configuration), waitFlag) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool SetConfiguration(LatencyTestConfiguration configuration) {
    bool ret = ovr_im.LatencyTestDevice_SetConfiguration__SWIG_1(cast(void*)swigCPtr, LatencyTestConfiguration.swigGetCPtr(configuration)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool GetConfiguration(LatencyTestConfiguration configuration) {
    bool ret = ovr_im.LatencyTestDevice_GetConfiguration(cast(void*)swigCPtr, LatencyTestConfiguration.swigGetCPtr(configuration)) ? true : false;
    return ret;
  }

  public bool SetCalibrate(SWIGTYPE_p_Color calibrationColor, bool waitFlag) {
    bool ret = ovr_im.LatencyTestDevice_SetCalibrate__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_Color.swigGetCPtr(calibrationColor), waitFlag) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool SetCalibrate(SWIGTYPE_p_Color calibrationColor) {
    bool ret = ovr_im.LatencyTestDevice_SetCalibrate__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_Color.swigGetCPtr(calibrationColor)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool SetStartTest(SWIGTYPE_p_Color targetColor, bool waitFlag) {
    bool ret = ovr_im.LatencyTestDevice_SetStartTest__SWIG_0(cast(void*)swigCPtr, SWIGTYPE_p_Color.swigGetCPtr(targetColor), waitFlag) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool SetStartTest(SWIGTYPE_p_Color targetColor) {
    bool ret = ovr_im.LatencyTestDevice_SetStartTest__SWIG_1(cast(void*)swigCPtr, SWIGTYPE_p_Color.swigGetCPtr(targetColor)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool SetDisplay(LatencyTestDisplay display, bool waitFlag) {
    bool ret = ovr_im.LatencyTestDevice_SetDisplay__SWIG_0(cast(void*)swigCPtr, LatencyTestDisplay.swigGetCPtr(display), waitFlag) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public bool SetDisplay(LatencyTestDisplay display) {
    bool ret = ovr_im.LatencyTestDevice_SetDisplay__SWIG_1(cast(void*)swigCPtr, LatencyTestDisplay.swigGetCPtr(display)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public DeviceBase GetDevice() {
    void* cPtr = ovr_im.LatencyTestDevice_GetDevice(cast(void*)swigCPtr);
    DeviceBase ret = (cPtr is null) ? null : new DeviceBase(cPtr, false);
    return ret;
  }
}

class LatencyTest : NewOverrideBase {
  private void* swigCPtr;

  public this(void* cObject, bool ownCObject) {
    super(ovr_im.LatencyTest_Upcast(cObject), ownCObject);
    swigCPtr = cObject;
  }

  public static void* swigGetCPtr(LatencyTest obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public override void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_LatencyTest(cast(void*)swigCPtr);
        }
        swigCPtr = null;
        super.dispose();
      }
    }
  }

  public this(LatencyTestDevice device) {
    this(ovr_im.new_LatencyTest__SWIG_0(LatencyTestDevice.swigGetCPtr(device)), true);
  }

  public this() {
    this(ovr_im.new_LatencyTest__SWIG_1(), true);
  }

  public bool SetDevice(LatencyTestDevice device) {
    bool ret = ovr_im.LatencyTest_SetDevice(cast(void*)swigCPtr, LatencyTestDevice.swigGetCPtr(device)) ? true : false;
    return ret;
  }

  public bool HasDevice() const {
    bool ret = ovr_im.LatencyTest_HasDevice(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public void ProcessInputs() {
    ovr_im.LatencyTest_ProcessInputs(cast(void*)swigCPtr);
  }

  public bool DisplayScreenColor(SWIGTYPE_p_Color colorToDisplay) {
    bool ret = ovr_im.LatencyTest_DisplayScreenColor(cast(void*)swigCPtr, SWIGTYPE_p_Color.swigGetCPtr(colorToDisplay)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }

  public string GetResultsString() {
    string ret = std.conv.to!string(ovr_im.LatencyTest_GetResultsString(cast(void*)swigCPtr));
    return ret;
  }

  public void BeginTest() {
    ovr_im.LatencyTest_BeginTest(cast(void*)swigCPtr);
  }
}

enum StereoMode {
  Stereo_None = 0,
  Stereo_LeftRight_Multipass = 1
}

enum StereoEye {
  StereoEye_Center,
  StereoEye_Left,
  StereoEye_Right
}

class Viewport {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(Viewport obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_Viewport(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void x(int value) @property {
    ovr_im.Viewport_x_set(cast(void*)swigCPtr, value);
  }

  public int x() @property const {
    auto ret = ovr_im.Viewport_x_get(cast(void*)swigCPtr);
    return ret;
  }

  public void y(int value) @property {
    ovr_im.Viewport_y_set(cast(void*)swigCPtr, value);
  }

  public int y() @property const {
    auto ret = ovr_im.Viewport_y_get(cast(void*)swigCPtr);
    return ret;
  }

  public void w(int value) @property {
    ovr_im.Viewport_w_set(cast(void*)swigCPtr, value);
  }

  public int w() @property const {
    auto ret = ovr_im.Viewport_w_get(cast(void*)swigCPtr);
    return ret;
  }

  public void h(int value) @property {
    ovr_im.Viewport_h_set(cast(void*)swigCPtr, value);
  }

  public int h() @property const {
    auto ret = ovr_im.Viewport_h_get(cast(void*)swigCPtr);
    return ret;
  }

  public this() {
    this(ovr_im.new_Viewport__SWIG_0(), true);
  }

  public this(int x1, int y1, int w1, int h1) {
    this(ovr_im.new_Viewport__SWIG_1(x1, y1, w1, h1), true);
  }

  public bool swigOpEquals(Viewport vp) const {
    bool ret = ovr_im.Viewport_swigOpEquals(cast(void*)swigCPtr, Viewport.swigGetCPtr(vp)) ? true : false;
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
    return ret;
  }
}

class DistortionConfig {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(DistortionConfig obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_DistortionConfig(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(float k0, float k1, float k2, float k3) {
    this(ovr_im.new_DistortionConfig__SWIG_0(k0, k1, k2, k3), true);
  }

  public this(float k0, float k1, float k2) {
    this(ovr_im.new_DistortionConfig__SWIG_1(k0, k1, k2), true);
  }

  public this(float k0, float k1) {
    this(ovr_im.new_DistortionConfig__SWIG_2(k0, k1), true);
  }

  public this(float k0) {
    this(ovr_im.new_DistortionConfig__SWIG_3(k0), true);
  }

  public this() {
    this(ovr_im.new_DistortionConfig__SWIG_4(), true);
  }

  public void SetCoefficients(float k0, float k1, float k2, float k3) {
    ovr_im.DistortionConfig_SetCoefficients__SWIG_0(cast(void*)swigCPtr, k0, k1, k2, k3);
  }

  public void SetCoefficients(float k0, float k1, float k2) {
    ovr_im.DistortionConfig_SetCoefficients__SWIG_1(cast(void*)swigCPtr, k0, k1, k2);
  }

  public void SetCoefficients(float k0, float k1) {
    ovr_im.DistortionConfig_SetCoefficients__SWIG_2(cast(void*)swigCPtr, k0, k1);
  }

  public void SetCoefficients(float k0) {
    ovr_im.DistortionConfig_SetCoefficients__SWIG_3(cast(void*)swigCPtr, k0);
  }

  public void SetChromaticAberration(float red1, float red2, float blue1, float blue2) {
    ovr_im.DistortionConfig_SetChromaticAberration__SWIG_0(cast(void*)swigCPtr, red1, red2, blue1, blue2);
  }

  public void SetChromaticAberration(float red1, float red2, float blue1) {
    ovr_im.DistortionConfig_SetChromaticAberration__SWIG_1(cast(void*)swigCPtr, red1, red2, blue1);
  }

  public void SetChromaticAberration(float red1, float red2) {
    ovr_im.DistortionConfig_SetChromaticAberration__SWIG_2(cast(void*)swigCPtr, red1, red2);
  }

  public void SetChromaticAberration(float red1) {
    ovr_im.DistortionConfig_SetChromaticAberration__SWIG_3(cast(void*)swigCPtr, red1);
  }

  public void SetChromaticAberration() {
    ovr_im.DistortionConfig_SetChromaticAberration__SWIG_4(cast(void*)swigCPtr);
  }

  public float DistortionFn(float r) const {
    auto ret = ovr_im.DistortionConfig_DistortionFn(cast(void*)swigCPtr, r);
    return ret;
  }

  public float DistortionFnInverse(float r) {
    auto ret = ovr_im.DistortionConfig_DistortionFnInverse(cast(void*)swigCPtr, r);
    return ret;
  }

  public void K(SWIGTYPE_p_float value) @property {
    ovr_im.DistortionConfig_K_set(cast(void*)swigCPtr, SWIGTYPE_p_float.swigGetCPtr(value));
  }

  public SWIGTYPE_p_float K() @property const {
    void* cPtr = ovr_im.DistortionConfig_K_get(cast(void*)swigCPtr);
    SWIGTYPE_p_float ret = (cPtr is null) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }

  public void XCenterOffset(float value) @property {
    ovr_im.DistortionConfig_XCenterOffset_set(cast(void*)swigCPtr, value);
  }

  public float XCenterOffset() @property const {
    auto ret = ovr_im.DistortionConfig_XCenterOffset_get(cast(void*)swigCPtr);
    return ret;
  }

  public void YCenterOffset(float value) @property {
    ovr_im.DistortionConfig_YCenterOffset_set(cast(void*)swigCPtr, value);
  }

  public float YCenterOffset() @property const {
    auto ret = ovr_im.DistortionConfig_YCenterOffset_get(cast(void*)swigCPtr);
    return ret;
  }

  public void Scale(float value) @property {
    ovr_im.DistortionConfig_Scale_set(cast(void*)swigCPtr, value);
  }

  public float Scale() @property const {
    auto ret = ovr_im.DistortionConfig_Scale_get(cast(void*)swigCPtr);
    return ret;
  }

  public void ChromaticAberration(SWIGTYPE_p_float value) @property {
    ovr_im.DistortionConfig_ChromaticAberration_set(cast(void*)swigCPtr, SWIGTYPE_p_float.swigGetCPtr(value));
  }

  public SWIGTYPE_p_float ChromaticAberration() @property const {
    void* cPtr = ovr_im.DistortionConfig_ChromaticAberration_get(cast(void*)swigCPtr);
    SWIGTYPE_p_float ret = (cPtr is null) ? null : new SWIGTYPE_p_float(cPtr, false);
    return ret;
  }
}

class StereoEyeParams {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(StereoEyeParams obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_StereoEyeParams(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Eye(StereoEye value) @property {
    ovr_im.StereoEyeParams_Eye_set(cast(void*)swigCPtr, cast(int)value);
  }

  public StereoEye Eye() @property const {
    StereoEye ret = cast(StereoEye)ovr_im.StereoEyeParams_Eye_get(cast(void*)swigCPtr);
    return ret;
  }

  public void VP(Viewport value) @property {
    ovr_im.StereoEyeParams_VP_set(cast(void*)swigCPtr, Viewport.swigGetCPtr(value));
  }

  public Viewport VP() @property const {
    void* cPtr = ovr_im.StereoEyeParams_VP_get(cast(void*)swigCPtr);
    Viewport ret = (cPtr is null) ? null : new Viewport(cPtr, false);
    return ret;
  }

  public void pDistortion(DistortionConfig value) @property {
    ovr_im.StereoEyeParams_pDistortion_set(cast(void*)swigCPtr, DistortionConfig.swigGetCPtr(value));
  }

  public DistortionConfig pDistortion() @property const {
    void* cPtr = ovr_im.StereoEyeParams_pDistortion_get(cast(void*)swigCPtr);
    DistortionConfig ret = (cPtr is null) ? null : new DistortionConfig(cPtr, false);
    return ret;
  }

  public void ViewAdjust(Matrix4f value) @property {
    ovr_im.StereoEyeParams_ViewAdjust_set(cast(void*)swigCPtr, Matrix4f.swigGetCPtr(value));
  }

  public Matrix4f ViewAdjust() @property const {
    void* cPtr = ovr_im.StereoEyeParams_ViewAdjust_get(cast(void*)swigCPtr);
    Matrix4f ret = (cPtr is null) ? null : new Matrix4f(cPtr, false);
    return ret;
  }

  public void Projection(Matrix4f value) @property {
    ovr_im.StereoEyeParams_Projection_set(cast(void*)swigCPtr, Matrix4f.swigGetCPtr(value));
  }

  public Matrix4f Projection() @property const {
    void* cPtr = ovr_im.StereoEyeParams_Projection_get(cast(void*)swigCPtr);
    Matrix4f ret = (cPtr is null) ? null : new Matrix4f(cPtr, false);
    return ret;
  }

  public void OrthoProjection(Matrix4f value) @property {
    ovr_im.StereoEyeParams_OrthoProjection_set(cast(void*)swigCPtr, Matrix4f.swigGetCPtr(value));
  }

  public Matrix4f OrthoProjection() @property const {
    void* cPtr = ovr_im.StereoEyeParams_OrthoProjection_get(cast(void*)swigCPtr);
    Matrix4f ret = (cPtr is null) ? null : new Matrix4f(cPtr, false);
    return ret;
  }

  public void Init(StereoEye eye, Viewport vp, float vofs, Matrix4f proj, Matrix4f orthoProj, DistortionConfig distortion) {
    ovr_im.StereoEyeParams_Init__SWIG_0(cast(void*)swigCPtr, cast(int)eye, Viewport.swigGetCPtr(vp), vofs, Matrix4f.swigGetCPtr(proj), Matrix4f.swigGetCPtr(orthoProj), DistortionConfig.swigGetCPtr(distortion));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void Init(StereoEye eye, Viewport vp, float vofs, Matrix4f proj, Matrix4f orthoProj) {
    ovr_im.StereoEyeParams_Init__SWIG_1(cast(void*)swigCPtr, cast(int)eye, Viewport.swigGetCPtr(vp), vofs, Matrix4f.swigGetCPtr(proj), Matrix4f.swigGetCPtr(orthoProj));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public this() {
    this(ovr_im.new_StereoEyeParams(), true);
  }
}

class StereoConfig {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(StereoConfig obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_StereoConfig(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public this(StereoMode mode, Viewport fullViewport) {
    this(ovr_im.new_StereoConfig__SWIG_0(cast(int)mode, Viewport.swigGetCPtr(fullViewport)), true);
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public this(StereoMode mode) {
    this(ovr_im.new_StereoConfig__SWIG_1(cast(int)mode), true);
  }

  public this() {
    this(ovr_im.new_StereoConfig__SWIG_2(), true);
  }

  public void SetStereoMode(StereoMode mode) {
    ovr_im.StereoConfig_SetStereoMode(cast(void*)swigCPtr, cast(int)mode);
  }

  public StereoMode GetStereoMode() const {
    StereoMode ret = cast(StereoMode)ovr_im.StereoConfig_GetStereoMode(cast(void*)swigCPtr);
    return ret;
  }

  public void SetHMDInfo(HMDInfo hmd) {
    ovr_im.StereoConfig_SetHMDInfo(cast(void*)swigCPtr, HMDInfo.swigGetCPtr(hmd));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public HMDInfo GetHMDInfo() const {
    HMDInfo ret = new HMDInfo(ovr_im.StereoConfig_GetHMDInfo(cast(void*)swigCPtr), false);
    return ret;
  }

  public float GetEyeToScreenDistance() const {
    auto ret = ovr_im.StereoConfig_GetEyeToScreenDistance(cast(void*)swigCPtr);
    return ret;
  }

  public void SetEyeToScreenDistance(float esd) {
    ovr_im.StereoConfig_SetEyeToScreenDistance(cast(void*)swigCPtr, esd);
  }

  public void SetIPD(float ipd) {
    ovr_im.StereoConfig_SetIPD(cast(void*)swigCPtr, ipd);
  }

  public float GetIPD() const {
    auto ret = ovr_im.StereoConfig_GetIPD(cast(void*)swigCPtr);
    return ret;
  }

  public void SetFullViewport(Viewport vp) {
    ovr_im.StereoConfig_SetFullViewport(cast(void*)swigCPtr, Viewport.swigGetCPtr(vp));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public Viewport GetFullViewport() const {
    Viewport ret = new Viewport(ovr_im.StereoConfig_GetFullViewport(cast(void*)swigCPtr), false);
    return ret;
  }

  public void SetAspectMultiplier(float m) {
    ovr_im.StereoConfig_SetAspectMultiplier(cast(void*)swigCPtr, m);
  }

  public float GetAspectMultiplier() const {
    auto ret = ovr_im.StereoConfig_GetAspectMultiplier(cast(void*)swigCPtr);
    return ret;
  }

  public void SetDistortionFitPointVP(float x, float y) {
    ovr_im.StereoConfig_SetDistortionFitPointVP(cast(void*)swigCPtr, x, y);
  }

  public void SetDistortionFitPointPixels(float x, float y) {
    ovr_im.StereoConfig_SetDistortionFitPointPixels(cast(void*)swigCPtr, x, y);
  }

  public void SetDistortionConfig(DistortionConfig d) {
    ovr_im.StereoConfig_SetDistortionConfig(cast(void*)swigCPtr, DistortionConfig.swigGetCPtr(d));
    if (ovr_im.SwigPendingException.isPending) throw ovr_im.SwigPendingException.retrieve();
  }

  public void SetDistortionK(int i, float k) {
    ovr_im.StereoConfig_SetDistortionK(cast(void*)swigCPtr, i, k);
  }

  public float GetDistortionK(int i) const {
    auto ret = ovr_im.StereoConfig_GetDistortionK(cast(void*)swigCPtr, i);
    return ret;
  }

  public void Set2DAreaFov(float fovRadians) {
    ovr_im.StereoConfig_Set2DAreaFov(cast(void*)swigCPtr, fovRadians);
  }

  public float GetAspect() {
    auto ret = ovr_im.StereoConfig_GetAspect(cast(void*)swigCPtr);
    return ret;
  }

  public float GetYFOVRadians() {
    auto ret = ovr_im.StereoConfig_GetYFOVRadians(cast(void*)swigCPtr);
    return ret;
  }

  public float GetYFOVDegrees() {
    auto ret = ovr_im.StereoConfig_GetYFOVDegrees(cast(void*)swigCPtr);
    return ret;
  }

  public float GetProjectionCenterOffset() {
    auto ret = ovr_im.StereoConfig_GetProjectionCenterOffset(cast(void*)swigCPtr);
    return ret;
  }

  public DistortionConfig GetDistortionConfig() {
    DistortionConfig ret = new DistortionConfig(ovr_im.StereoConfig_GetDistortionConfig(cast(void*)swigCPtr), false);
    return ret;
  }

  public float GetDistortionScale() {
    auto ret = ovr_im.StereoConfig_GetDistortionScale(cast(void*)swigCPtr);
    return ret;
  }

  public float Get2DUnitPixel() {
    auto ret = ovr_im.StereoConfig_Get2DUnitPixel(cast(void*)swigCPtr);
    return ret;
  }

  public StereoEyeParams GetEyeRenderParams(StereoEye eye) {
    StereoEyeParams ret = new StereoEyeParams(ovr_im.StereoConfig_GetEyeRenderParams(cast(void*)swigCPtr, cast(int)eye), false);
    return ret;
  }
}

enum JSONItemType {
  JSON_None = 0,
  JSON_Null = 1,
  JSON_Bool = 2,
  JSON_Number = 3,
  JSON_String = 4,
  JSON_Array = 5,
  JSON_Object = 6
}

class JSON {
  private void* swigCPtr;
  protected bool swigCMemOwn;

  public this(void* cObject, bool ownCObject) {
    swigCPtr = cObject;
    swigCMemOwn = ownCObject;
  }

  public static void* swigGetCPtr(JSON obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;

  ~this() {
    dispose();
  }

  public void dispose() {
    synchronized(this) {
      if (swigCPtr !is null) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ovr_im.delete_JSON(cast(void*)swigCPtr);
        }
        swigCPtr = null;
      }
    }
  }

  public void Type(JSONItemType value) @property {
    ovr_im.JSON_Type_set(cast(void*)swigCPtr, cast(int)value);
  }

  public JSONItemType Type() @property const {
    JSONItemType ret = cast(JSONItemType)ovr_im.JSON_Type_get(cast(void*)swigCPtr);
    return ret;
  }

  public void Name(String value) @property {
    ovr_im.JSON_Name_set(cast(void*)swigCPtr, String.swigGetCPtr(value));
  }

  public String Name() @property const {
    void* cPtr = ovr_im.JSON_Name_get(cast(void*)swigCPtr);
    String ret = (cPtr is null) ? null : new String(cPtr, false);
    return ret;
  }

  public void Value(String value) @property {
    ovr_im.JSON_Value_set(cast(void*)swigCPtr, String.swigGetCPtr(value));
  }

  public String Value() @property const {
    void* cPtr = ovr_im.JSON_Value_get(cast(void*)swigCPtr);
    String ret = (cPtr is null) ? null : new String(cPtr, false);
    return ret;
  }

  public void dValue(double value) @property {
    ovr_im.JSON_dValue_set(cast(void*)swigCPtr, value);
  }

  public double dValue() @property const {
    auto ret = ovr_im.JSON_dValue_get(cast(void*)swigCPtr);
    return ret;
  }

  public static JSON CreateObject() {
    void* cPtr = ovr_im.JSON_CreateObject();
    JSON ret = (cPtr is null) ? null : new JSON(cPtr, false);
    return ret;
  }

  public static JSON CreateNull() {
    void* cPtr = ovr_im.JSON_CreateNull();
    JSON ret = (cPtr is null) ? null : new JSON(cPtr, false);
    return ret;
  }

  public static JSON CreateArray() {
    void* cPtr = ovr_im.JSON_CreateArray();
    JSON ret = (cPtr is null) ? null : new JSON(cPtr, false);
    return ret;
  }

  public static JSON CreateBool(bool b) {
    void* cPtr = ovr_im.JSON_CreateBool(b);
    JSON ret = (cPtr is null) ? null : new JSON(cPtr, false);
    return ret;
  }

  public static JSON CreateNumber(double num) {
    void* cPtr = ovr_im.JSON_CreateNumber(num);
    JSON ret = (cPtr is null) ? null : new JSON(cPtr, false);
    return ret;
  }

  public static JSON CreateString(string s) {
    void* cPtr = ovr_im.JSON_CreateString((s ? std.string.toStringz(s) : null));
    JSON ret = (cPtr is null) ? null : new JSON(cPtr, false);
    return ret;
  }

  public static JSON Parse(string buff, char** perror) {
    void* cPtr = ovr_im.JSON_Parse__SWIG_0((buff ? std.string.toStringz(buff) : null), cast(void*)perror);
    JSON ret = (cPtr is null) ? null : new JSON(cPtr, false);
    return ret;
  }

  public static JSON Parse(string buff) {
    void* cPtr = ovr_im.JSON_Parse__SWIG_1((buff ? std.string.toStringz(buff) : null));
    JSON ret = (cPtr is null) ? null : new JSON(cPtr, false);
    return ret;
  }

  public static JSON Load(string path, char** perror) {
    void* cPtr = ovr_im.JSON_Load__SWIG_0((path ? std.string.toStringz(path) : null), cast(void*)perror);
    JSON ret = (cPtr is null) ? null : new JSON(cPtr, false);
    return ret;
  }

  public static JSON Load(string path) {
    void* cPtr = ovr_im.JSON_Load__SWIG_1((path ? std.string.toStringz(path) : null));
    JSON ret = (cPtr is null) ? null : new JSON(cPtr, false);
    return ret;
  }

  public bool Save(string path) {
    bool ret = ovr_im.JSON_Save(cast(void*)swigCPtr, (path ? std.string.toStringz(path) : null)) ? true : false;
    return ret;
  }

  public bool HasItems() const {
    bool ret = ovr_im.JSON_HasItems(cast(void*)swigCPtr) ? true : false;
    return ret;
  }

  public JSON GetFirstItem() {
    void* cPtr = ovr_im.JSON_GetFirstItem(cast(void*)swigCPtr);
    JSON ret = (cPtr is null) ? null : new JSON(cPtr, false);
    return ret;
  }

  public JSON GetLastItem() {
    void* cPtr = ovr_im.JSON_GetLastItem(cast(void*)swigCPtr);
    JSON ret = (cPtr is null) ? null : new JSON(cPtr, false);
    return ret;
  }

  public uint GetItemCount() const {
    auto ret = ovr_im.JSON_GetItemCount(cast(void*)swigCPtr);
    return ret;
  }

  public JSON GetItemByIndex(uint i) {
    void* cPtr = ovr_im.JSON_GetItemByIndex(cast(void*)swigCPtr, i);
    JSON ret = (cPtr is null) ? null : new JSON(cPtr, false);
    return ret;
  }

  public JSON GetItemByName(string name) {
    void* cPtr = ovr_im.JSON_GetItemByName(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
    JSON ret = (cPtr is null) ? null : new JSON(cPtr, false);
    return ret;
  }

  public JSON GetNextItem(JSON item) {
    void* cPtr = ovr_im.JSON_GetNextItem(cast(void*)swigCPtr, JSON.swigGetCPtr(item));
    JSON ret = (cPtr is null) ? null : new JSON(cPtr, false);
    return ret;
  }

  public JSON GetPrevItem(JSON item) {
    void* cPtr = ovr_im.JSON_GetPrevItem(cast(void*)swigCPtr, JSON.swigGetCPtr(item));
    JSON ret = (cPtr is null) ? null : new JSON(cPtr, false);
    return ret;
  }

  public void AddItem(string arg0, JSON item) {
    ovr_im.JSON_AddItem(cast(void*)swigCPtr, (arg0 ? std.string.toStringz(arg0) : null), JSON.swigGetCPtr(item));
  }

  public void AddNullItem(string name) {
    ovr_im.JSON_AddNullItem(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null));
  }

  public void AddBoolItem(string name, bool b) {
    ovr_im.JSON_AddBoolItem(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), b);
  }

  public void AddNumberItem(string name, double n) {
    ovr_im.JSON_AddNumberItem(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), n);
  }

  public void AddStringItem(string name, string s) {
    ovr_im.JSON_AddStringItem(cast(void*)swigCPtr, (name ? std.string.toStringz(name) : null), (s ? std.string.toStringz(s) : null));
  }

  public void AddArrayElement(JSON item) {
    ovr_im.JSON_AddArrayElement(cast(void*)swigCPtr, JSON.swigGetCPtr(item));
  }

  public void AddArrayNumber(double n) {
    ovr_im.JSON_AddArrayNumber(cast(void*)swigCPtr, n);
  }

  public void AddArrayString(string s) {
    ovr_im.JSON_AddArrayString(cast(void*)swigCPtr, (s ? std.string.toStringz(s) : null));
  }

  public int GetArraySize() {
    auto ret = ovr_im.JSON_GetArraySize(cast(void*)swigCPtr);
    return ret;
  }

  public double GetArrayNumber(int index) {
    auto ret = ovr_im.JSON_GetArrayNumber(cast(void*)swigCPtr, index);
    return ret;
  }

  public string GetArrayString(int index) {
    string ret = std.conv.to!string(ovr_im.JSON_GetArrayString(cast(void*)swigCPtr, index));
    return ret;
  }
}

class SWIGTYPE_p_SensorDevice {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_SensorDevice obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_wchar_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_wchar_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_uint16_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_uint16_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_OVR__PtrT_OVR__DeviceCreateDesc_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_OVR__PtrT_OVR__DeviceCreateDesc_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_uint32_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_uint32_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_time_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_time_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_float {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_float obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_OVR__String__InitStruct {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_OVR__String__InitStruct obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_va_list {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_va_list obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_OVR__DeviceCreateDesc {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_OVR__DeviceCreateDesc obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_Color {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_Color obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_a_4__float {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_a_4__float obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_MessageHandler {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_MessageHandler obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_ArrayT_Color_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_ArrayT_Color_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_OVR__String__NoCaseKey {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_OVR__String__NoCaseKey obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_ptrdiff_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_ptrdiff_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_DataDesc {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_DataDesc obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_uint8_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_uint8_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_OVR__DeviceEnumeratorT_OVR__DeviceBase_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_OVR__DeviceEnumeratorT_OVR__DeviceBase_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_OVR__Vector3T_float_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_OVR__Vector3T_float_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_pthread_mutexattr_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_pthread_mutexattr_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}

class SWIGTYPE_p_OVR__QuatT_float_t {
  private void* swigCPtr;

  public this(void* cObject, bool futureUse) {
    swigCPtr = cObject;
  }

  protected this() {
    swigCPtr = null;
  }

  public static void* swigGetCPtr(SWIGTYPE_p_OVR__QuatT_float_t obj) {
    return (obj is null) ? null : obj.swigCPtr;
  }

  mixin ovr_im.SwigOperatorDefinitions;
}
